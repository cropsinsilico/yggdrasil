# DO NOT MODIFY THIS FILE, IT IS GENERATED.
# To make changes, modify '.git/../utils/test-install-base.yml'
# and run 'ygggha'
name: Test of package installation & execution
'on':
  push:
    branches-ignore:
    - gh-pages
    tags:
    - '*'
  schedule:
  - cron: 0 10 * * 1
env:
  NUMPY: numpy
  MATPLOTLIB: matplotlib
  MPLBACKEND: agg
  JSONSCHEMA: jsonschema
  INSTALLR: 1
  INSTALLC: 1
  INSTALLFORTRAN: 1
  INSTALLSBML: 1
  INSTALLLPY: 0
  INSTALLZMQ: 1
  INSTALLRMQ: 0
  INSTALLTRIMESH: 1
  INSTALLPYGMENTS: 1
  INSTALLOMP: 1
  INSTALLMPI: 1
  USEVIRTUALENV: 0
  BUILDDOCS: 0
  YGG_GHA_JOB_ID_SUFFIX: null
  TMPDIR: /tmp/
jobs:
  test_pip:
    name: Test (${{ matrix.python-version }}, ${{ matrix.os }}, ${{ matrix.install-method
      }}, ${{ matrix.test-flags1 }}, ${{ matrix.test-flags2 }}), Install C = ${{ matrix.install-c
      }}
    runs-on: ${{ matrix.os }}
    strategy:
      max-parallel: 20
      matrix:
        os:
        - ubuntu-latest
        - macos-latest
        - windows-latest
        python-version:
        - 3.6
        install-method:
        - pip
        test-flags1:
        - --long-running --test-suite=timing --test-suite=demos --test-suite=top
        - --test-suite=examples
        - --test-suite=types --skip-languages c c++
        - --test-suite=types --languages c cpp
        test-flags2:
        - ''
        install-c:
        - true
        include:
        - os: windows-latest
          python-version: 3.6
          install-method: pip
          test-flags1: --long-running --languages cpp
          test-flags2: --long-running --skip-languages c++
          install-c: false
      fail-fast: false
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - name: Set C installation based on matrix value
      if: matrix.install-c != true && matrix.install-method != 'conda'
      run: echo "INSTALLC=0" >> $GITHUB_ENV
      shell: bash -l {0}
    - name: Store an ID string for the job
      run: echo "YGG_GHA_JOB_ID=${{ matrix.os }}-${{ matrix.install-method }}-py${{
        matrix.python-version }}-C${{ env.INSTALLC }}-RMQ${{ env.INSTALLRMQ }}${{
        env.YGG_GHA_JOB_ID_SUFFIX }}" >> $GITHUB_ENV
      shell: bash -l {0}
    - name: (WINDOWS) Patch TEMP/TMPDIR on Windows
      if: matrix.os == 'windows-latest'
      run: 'echo "TMPDIR=$USERPROFILE\\AppData\\Local\\Temp" >> $GITHUB_ENV

        echo "TEMP=$USERPROFILE\\AppData\\Local\\Temp" >> $GITHUB_ENV

        '
      shell: bash -l {0}
    - name: (WINDOWS,PIP) Set up MSVC Compiler
      uses: ilammy/msvc-dev-cmd@v1
      if: matrix.os == 'windows-latest' && matrix.install-method == 'pip' && env.INSTALLC
        == 1
      with:
        toolset: 14.0
    - name: Install R
      uses: r-lib/actions/setup-r@v1
      if: matrix.os == 'windows-latest' && matrix.install-method == 'pip' && env.INSTALLR
        == 1
    - name: (LINUX,PIP) Cache pip
      uses: actions/cache@v2
      if: startsWith(runner.os, 'Linux') && matrix.install-method == 'pip'
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: '${{ runner.os }}-pip-

          '
    - name: (MACOS,PIP) Cache pip
      uses: actions/cache@v2
      if: startsWith(runner.os, 'macOS') && matrix.install-method == 'pip'
      with:
        path: ~/Library/Caches/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: '${{ runner.os }}-pip-

          '
    - name: (WINDOWS,PIP) Cache pip
      uses: actions/cache@v2
      if: startsWith(runner.os, 'Windows') && matrix.install-method == 'pip'
      with:
        path: ~\AppData\Local\pip\Cache
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: '${{ runner.os }}-pip-

          '
    - name: (PIP) Set up Python
      uses: actions/setup-python@v2
      if: matrix.install-method == 'pip'
      with:
        python-version: ${{ matrix.python-version }}
    - name: (PIP) Set up Virtual Env
      if: env.USEVIRTUALENV == 1 && matrix.install-method == 'pip'
      run: 'python utils/setup_test_env.py env virtualenv ${{ matrix.python-version
        }} --env-name=test

        echo "source activate ygg" > ~/.bashrc

        source test/bin/activate

        echo "$VIRTUAL_ENV"

        echo "VIRTUAL_ENV=$VIRTUAL_ENV" >> $GITHUB_ENV

        echo "PATH=$VIRTUAL_ENV/bin:$PATH" >> $GITHUB_ENV

        '
    - name: (PIP) Install dependencies & package
      if: matrix.install-method == 'pip'
      run: python utils/setup_test_env.py install ${{ matrix.install-method }}
    - name: (WINDOWS,PIP) Set the vcpkg root config value
      if: matrix.os == 'windows-latest' && matrix.install-method == 'pip' && env.INSTALLC
        == 1
      run: yggconfig --vcpkg-dir=C:\\vcpkg
    - name: (WINDOWS,PIP) Update R requirements
      if: matrix.os == 'windows-latest' && matrix.install-method == 'pip' && env.INSTALLR
        == 1
      run: ygginstall R --update-r-requirements
    - name: (WINDOWS,CONDA) Set up miniconda base environment
      uses: conda-incubator/setup-miniconda@v2
      if: matrix.install-method == 'conda' && matrix.os == 'windows-latest'
      with:
        channels: conda-forge
        use-only-tar-bz2: true
        activate-environment: ''
    - name: (WINDOWS,CONDA) Set up MSVC Compiler
      uses: ilammy/msvc-dev-cmd@v1
      if: matrix.install-method == 'conda' && matrix.os == 'windows-latest' && env.INSTALLC
        == 1
      with:
        toolset: 14.0
    - name: (UNIX,CONDA) Add miniconda bin to path
      if: matrix.install-method == 'conda' && matrix.os != 'windows-latest'
      run: 'echo "NON_CONDA_PATH=$PATH" >> $GITHUB_ENV

        echo "PATH=$CONDA/bin:$PATH" >> $GITHUB_ENV

        '
      shell: bash -l {0}
    - name: (MACOS,CONDA) Change ownership of conda on MacOS
      if: matrix.install-method == 'conda' && matrix.os == 'macos-latest'
      run: sudo chown -R $(whoami) $CONDA
      shell: bash
    - name: (CONDA) Build package in base environment
      id: conda_build
      continue-on-error: true
      if: matrix.install-method == 'conda'
      run: python utils/setup_test_env.py build ${{ matrix.install-method }} --python
        ${{ matrix.python-version }}
      shell: bash --noprofile --norc -eo pipefail {0}
    - name: (CONDA) Build package in base environment (re-attempt)
      if: ${{ steps.conda_build.outcome == 'failure' && matrix.install-method == 'conda'}}
      run: python utils/setup_test_env.py build ${{ matrix.install-method }} --python
        ${{ matrix.python-version }}
      shell: bash --noprofile --norc -eo pipefail {0}
    - name: (UNIX,CONDA) Remove miniconda bin to path
      if: matrix.install-method == 'conda' && matrix.os != 'windows-latest'
      run: 'echo "PATH=$NON_CONDA_PATH" >> $GITHUB_ENV

        '
      shell: bash -l {0}
    - name: (CONDA) Set up miniconda test environment
      uses: conda-incubator/setup-miniconda@v2
      if: matrix.install-method == 'conda'
      with:
        auto-update-conda: true
        python-version: ${{ matrix.python-version }}
        channels: conda-forge
        use-only-tar-bz2: true
        channel-priority: strict
    - name: (MACOS,CONDA) Install old MacOSX SDK for compatibility with the conda
        llvm (7)
      if: matrix.os == 'macos-latest' && matrix.install-method == 'conda'
      run: ./utils/setup_old_mac_sdk.sh
    - name: (CONDA) Install dependencies & package from existing build
      id: conda_install
      continue-on-error: true
      if: matrix.install-method == 'conda'
      run: python utils/setup_test_env.py install ${{ matrix.install-method }} --without-build
    - name: (CONDA) Install dependencies & package from existing build (re-attempt)
      if: ${{ steps.conda_install.outcome == 'failure' && matrix.install-method ==
        'conda'}}
      run: python utils/setup_test_env.py install ${{ matrix.install-method }} --without-build
    - name: (MACOS,CONDA) Set allow_multiple_omp config
      if: matrix.install-method == 'conda' && matrix.os == 'macos-latest'
      run: yggconfig --allow-multiple-omp
    - name: Verify installation
      run: python utils/setup_test_env.py verify
    - name: Compile libraries
      run: yggcompile
    - name: Run cmake test in command prompt
      if: matrix.os == 'windows-latest'
      shell: cmd /C CALL {0}
      run: 'cmake -h

        yggtest --ci --nocapture drivers/tests/test_CMakeModelDriver.py

        '
    - name: Run tests (1st)
      id: test1
      run: 'yggtest --ci --cov-append ${{ matrix.test-flags1 }}

        '
      continue-on-error: true
    - name: Re-run test failures (1st)
      if: ${{ steps.test1.outcome == 'failure' }}
      run: 'yggtest --ci --cov-append ${{ matrix.test-flags1 }} --last-failed --last-failed-no-failures=none
        --debug

        '
    - name: Run tests (2nd)
      if: matrix.test-flags2 != ''
      id: test2
      run: yggtest --ci --cov-append ${{ matrix.test-flags2 }}
      continue-on-error: true
    - name: Re-run test failures (2nd)
      if: ${{ steps.test2.outcome == 'failure' }}
      run: yggtest --ci --cov-append ${{ matrix.test-flags2 }} --last-failed --last-failed-no-failures=none
        --debug
    - name: Run MPI tests (macos)
      if: env.INSTALLMPI == 1 && matrix.os == 'macos-latest'
      id: mpi
      run: 'yggtest --ci --cov-append --test-suite=mpi --write-script=run_mpi.sh

        ./run_mpi.sh

        '
    - name: Run MPI tests (ubuntu)
      if: env.INSTALLMPI == 1 && matrix.os == 'ubuntu-latest'
      id: mpi
      run: 'yggtest --ci --cov-append --with-mpi=2 yggdrasil/communication/tests/test_MPIComm.py::TestMPICommAsync::test_eof_no_close
        --write-script=run_mpi.sh --nocapture --debug

        ./run_mpi.sh

        '
    - name: Combine coverage reports
      continue-on-error: true
      run: '# ls .*

        coverage combine --append

        '
    - name: (CONDA) Generate XML version of coverage report
      if: matrix.install-method == 'conda'
      run: '# ls .*

        coverage xml

        '
    - name: Upload coverage report
      uses: codecov/codecov-action@v1
      with:
        name: ${{ env.YGG_GHA_JOB_ID }}
        token: ${{ secrets.CODECOV_TOKEN }}
    - name: Download the last successful workflow environment log
      if: ${{ always() }}
      continue-on-error: true
      uses: dawidd6/action-download-artifact@v2
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        workflow: test-install.yml
        name: environment-log-${{ env.YGG_GHA_JOB_ID }}
        path: .
    - name: Create a log of Python package versions
      if: ${{ always() }}
      run: python utils/setup_test_env.py log
    - uses: actions/upload-artifact@v2
      if: ${{ success() }}
      with:
        name: environment-log-${{ env.YGG_GHA_JOB_ID }}
        path: new_environment_log.txt
  test_conda:
    name: Test (${{ matrix.python-version }}, ${{ matrix.os }}, ${{ matrix.install-method
      }}, ${{ matrix.test-flags1 }}, ${{ matrix.test-flags2 }}), Install C = ${{ matrix.install-c
      }}
    runs-on: ${{ matrix.os }}
    strategy:
      max-parallel: 20
      matrix:
        os:
        - ubuntu-latest
        - macos-latest
        - windows-latest
        python-version:
        - 3.6
        install-method:
        - conda
        test-flags1:
        - --long-running
        test-flags2:
        - --with-examples examples/tests/test_backwards.py
        install-c:
        - true
        include:
        - os: ubuntu-latest
          python-version: 3.7
          install-method: conda
          test-flags1: --long-running
          test-flags2: ''
          install-c: true
        - os: ubuntu-latest
          python-version: 3.8
          install-method: conda
          test-flags1: --long-running
          test-flags2: ''
          install-c: true
        - os: ubuntu-latest
          python-version: 3.9
          install-method: conda
          test-flags1: --long-running
          test-flags2: ''
          install-c: true
        - os: macos-latest
          python-version: 3.8
          install-method: conda
          test-flags1: tests/test_tools.py --with-examples examples/tests/test_rpc_lesson3.py
          test-flags2: ''
          install-c: true
      fail-fast: false
    defaults:
      run:
        shell: bash -l {0}
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - name: Set C installation based on matrix value
      if: matrix.install-c != true && matrix.install-method != 'conda'
      run: echo "INSTALLC=0" >> $GITHUB_ENV
      shell: bash -l {0}
    - name: Store an ID string for the job
      run: echo "YGG_GHA_JOB_ID=${{ matrix.os }}-${{ matrix.install-method }}-py${{
        matrix.python-version }}-C${{ env.INSTALLC }}-RMQ${{ env.INSTALLRMQ }}${{
        env.YGG_GHA_JOB_ID_SUFFIX }}" >> $GITHUB_ENV
      shell: bash -l {0}
    - name: (WINDOWS) Patch TEMP/TMPDIR on Windows
      if: matrix.os == 'windows-latest'
      run: 'echo "TMPDIR=$USERPROFILE\\AppData\\Local\\Temp" >> $GITHUB_ENV

        echo "TEMP=$USERPROFILE\\AppData\\Local\\Temp" >> $GITHUB_ENV

        '
      shell: bash -l {0}
    - name: (WINDOWS,PIP) Set up MSVC Compiler
      uses: ilammy/msvc-dev-cmd@v1
      if: matrix.os == 'windows-latest' && matrix.install-method == 'pip' && env.INSTALLC
        == 1
      with:
        toolset: 14.0
    - name: Install R
      uses: r-lib/actions/setup-r@v1
      if: matrix.os == 'windows-latest' && matrix.install-method == 'pip' && env.INSTALLR
        == 1
    - name: (LINUX,PIP) Cache pip
      uses: actions/cache@v2
      if: startsWith(runner.os, 'Linux') && matrix.install-method == 'pip'
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: '${{ runner.os }}-pip-

          '
    - name: (MACOS,PIP) Cache pip
      uses: actions/cache@v2
      if: startsWith(runner.os, 'macOS') && matrix.install-method == 'pip'
      with:
        path: ~/Library/Caches/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: '${{ runner.os }}-pip-

          '
    - name: (WINDOWS,PIP) Cache pip
      uses: actions/cache@v2
      if: startsWith(runner.os, 'Windows') && matrix.install-method == 'pip'
      with:
        path: ~\AppData\Local\pip\Cache
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: '${{ runner.os }}-pip-

          '
    - name: (PIP) Set up Python
      uses: actions/setup-python@v2
      if: matrix.install-method == 'pip'
      with:
        python-version: ${{ matrix.python-version }}
    - name: (PIP) Set up Virtual Env
      if: env.USEVIRTUALENV == 1 && matrix.install-method == 'pip'
      run: 'python utils/setup_test_env.py env virtualenv ${{ matrix.python-version
        }} --env-name=test

        echo "source activate ygg" > ~/.bashrc

        source test/bin/activate

        echo "$VIRTUAL_ENV"

        echo "VIRTUAL_ENV=$VIRTUAL_ENV" >> $GITHUB_ENV

        echo "PATH=$VIRTUAL_ENV/bin:$PATH" >> $GITHUB_ENV

        '
    - name: (PIP) Install dependencies & package
      if: matrix.install-method == 'pip'
      run: python utils/setup_test_env.py install ${{ matrix.install-method }}
    - name: (WINDOWS,PIP) Set the vcpkg root config value
      if: matrix.os == 'windows-latest' && matrix.install-method == 'pip' && env.INSTALLC
        == 1
      run: yggconfig --vcpkg-dir=C:\\vcpkg
    - name: (WINDOWS,PIP) Update R requirements
      if: matrix.os == 'windows-latest' && matrix.install-method == 'pip' && env.INSTALLR
        == 1
      run: ygginstall R --update-r-requirements
    - name: (WINDOWS,CONDA) Set up miniconda base environment
      uses: conda-incubator/setup-miniconda@v2
      if: matrix.install-method == 'conda' && matrix.os == 'windows-latest'
      with:
        channels: conda-forge
        use-only-tar-bz2: true
        activate-environment: ''
    - name: (WINDOWS,CONDA) Set up MSVC Compiler
      uses: ilammy/msvc-dev-cmd@v1
      if: matrix.install-method == 'conda' && matrix.os == 'windows-latest' && env.INSTALLC
        == 1
      with:
        toolset: 14.0
    - name: (UNIX,CONDA) Add miniconda bin to path
      if: matrix.install-method == 'conda' && matrix.os != 'windows-latest'
      run: 'echo "NON_CONDA_PATH=$PATH" >> $GITHUB_ENV

        echo "PATH=$CONDA/bin:$PATH" >> $GITHUB_ENV

        '
      shell: bash -l {0}
    - name: (MACOS,CONDA) Change ownership of conda on MacOS
      if: matrix.install-method == 'conda' && matrix.os == 'macos-latest'
      run: sudo chown -R $(whoami) $CONDA
      shell: bash
    - name: (CONDA) Build package in base environment
      id: conda_build
      continue-on-error: true
      if: matrix.install-method == 'conda'
      run: python utils/setup_test_env.py build ${{ matrix.install-method }} --python
        ${{ matrix.python-version }}
      shell: bash --noprofile --norc -eo pipefail {0}
    - name: (CONDA) Build package in base environment (re-attempt)
      if: ${{ steps.conda_build.outcome == 'failure' && matrix.install-method == 'conda'}}
      run: python utils/setup_test_env.py build ${{ matrix.install-method }} --python
        ${{ matrix.python-version }}
      shell: bash --noprofile --norc -eo pipefail {0}
    - name: (UNIX,CONDA) Remove miniconda bin to path
      if: matrix.install-method == 'conda' && matrix.os != 'windows-latest'
      run: 'echo "PATH=$NON_CONDA_PATH" >> $GITHUB_ENV

        '
      shell: bash -l {0}
    - name: (CONDA) Set up miniconda test environment
      uses: conda-incubator/setup-miniconda@v2
      if: matrix.install-method == 'conda'
      with:
        auto-update-conda: true
        python-version: ${{ matrix.python-version }}
        channels: conda-forge
        use-only-tar-bz2: true
        channel-priority: strict
    - name: (MACOS,CONDA) Install old MacOSX SDK for compatibility with the conda
        llvm (7)
      if: matrix.os == 'macos-latest' && matrix.install-method == 'conda'
      run: ./utils/setup_old_mac_sdk.sh
    - name: (CONDA) Install dependencies & package from existing build
      id: conda_install
      continue-on-error: true
      if: matrix.install-method == 'conda'
      run: python utils/setup_test_env.py install ${{ matrix.install-method }} --without-build
    - name: (CONDA) Install dependencies & package from existing build (re-attempt)
      if: ${{ steps.conda_install.outcome == 'failure' && matrix.install-method ==
        'conda'}}
      run: python utils/setup_test_env.py install ${{ matrix.install-method }} --without-build
    - name: (MACOS,CONDA) Set allow_multiple_omp config
      if: matrix.install-method == 'conda' && matrix.os == 'macos-latest'
      run: yggconfig --allow-multiple-omp
    - name: Verify installation
      run: python utils/setup_test_env.py verify
    - name: Compile libraries
      run: yggcompile
    - name: Run cmake test in command prompt
      if: matrix.os == 'windows-latest'
      shell: cmd /C CALL {0}
      run: 'cmake -h

        yggtest --ci --nocapture drivers/tests/test_CMakeModelDriver.py

        '
    - name: Run tests (1st)
      id: test1
      run: 'yggtest --ci --cov-append ${{ matrix.test-flags1 }}

        '
      continue-on-error: true
    - name: Re-run test failures (1st)
      if: ${{ steps.test1.outcome == 'failure' }}
      run: 'yggtest --ci --cov-append ${{ matrix.test-flags1 }} --last-failed --last-failed-no-failures=none
        --debug

        '
    - name: Run tests (2nd)
      if: matrix.test-flags2 != ''
      id: test2
      run: yggtest --ci --cov-append ${{ matrix.test-flags2 }}
      continue-on-error: true
    - name: Re-run test failures (2nd)
      if: ${{ steps.test2.outcome == 'failure' }}
      run: yggtest --ci --cov-append ${{ matrix.test-flags2 }} --last-failed --last-failed-no-failures=none
        --debug
    - name: Run MPI tests (macos)
      if: env.INSTALLMPI == 1 && matrix.os == 'macos-latest'
      id: mpi
      run: 'yggtest --ci --cov-append --test-suite=mpi --write-script=run_mpi.sh

        ./run_mpi.sh

        '
    - name: Run MPI tests (ubuntu)
      if: env.INSTALLMPI == 1 && matrix.os == 'ubuntu-latest'
      id: mpi
      run: 'yggtest --ci --cov-append --with-mpi=2 yggdrasil/communication/tests/test_MPIComm.py::TestMPICommAsync::test_eof_no_close
        --write-script=run_mpi.sh --nocapture --debug

        ./run_mpi.sh

        '
    - name: Combine coverage reports
      continue-on-error: true
      run: '# ls .*

        coverage combine --append

        '
    - name: (CONDA) Generate XML version of coverage report
      if: matrix.install-method == 'conda'
      run: '# ls .*

        coverage xml

        '
    - name: Upload coverage report
      uses: codecov/codecov-action@v1
      with:
        name: ${{ env.YGG_GHA_JOB_ID }}
        token: ${{ secrets.CODECOV_TOKEN }}
    - name: Download the last successful workflow environment log
      if: ${{ always() }}
      continue-on-error: true
      uses: dawidd6/action-download-artifact@v2
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        workflow: test-install.yml
        name: environment-log-${{ env.YGG_GHA_JOB_ID }}
        path: .
    - name: Create a log of Python package versions
      if: ${{ always() }}
      run: python utils/setup_test_env.py log
    - uses: actions/upload-artifact@v2
      if: ${{ success() }}
      with:
        name: environment-log-${{ env.YGG_GHA_JOB_ID }}
        path: new_environment_log.txt
  test_rmq_pip:
    name: Test RMQ (${{ matrix.python-version }}, ${{ matrix.os }}, ${{ matrix.install-method
      }})
    runs-on: ${{ matrix.os }}
    env:
      INSTALLRMQ: 1
      INSTALLAPY: 1
      USEVIRTUALENV: 1
      YGG_DEFAULT_COMM: IPCComm
    strategy:
      matrix:
        os:
        - ubuntu-latest
        python-version:
        - 3.6
        install-method:
        - pip
        test-flags1:
        - --long-running --languages python R matlab
        test-flags2:
        - ''
        install-c:
        - true
      fail-fast: false
    services:
      rabbitmq:
        image: rabbitmq:latest
        ports:
        - 5672:5672
        options: --health-cmd "rabbitmqctl node_health_check" --health-interval 10s
          --health-timeout 5s --health-retries 5
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - name: Set C installation based on matrix value
      if: matrix.install-c != true && matrix.install-method != 'conda'
      run: echo "INSTALLC=0" >> $GITHUB_ENV
      shell: bash -l {0}
    - name: Store an ID string for the job
      run: echo "YGG_GHA_JOB_ID=${{ matrix.os }}-${{ matrix.install-method }}-py${{
        matrix.python-version }}-C${{ env.INSTALLC }}-RMQ${{ env.INSTALLRMQ }}${{
        env.YGG_GHA_JOB_ID_SUFFIX }}" >> $GITHUB_ENV
      shell: bash -l {0}
    - name: (WINDOWS) Patch TEMP/TMPDIR on Windows
      if: matrix.os == 'windows-latest'
      run: 'echo "TMPDIR=$USERPROFILE\\AppData\\Local\\Temp" >> $GITHUB_ENV

        echo "TEMP=$USERPROFILE\\AppData\\Local\\Temp" >> $GITHUB_ENV

        '
      shell: bash -l {0}
    - name: (WINDOWS,PIP) Set up MSVC Compiler
      uses: ilammy/msvc-dev-cmd@v1
      if: matrix.os == 'windows-latest' && matrix.install-method == 'pip' && env.INSTALLC
        == 1
      with:
        toolset: 14.0
    - name: Install R
      uses: r-lib/actions/setup-r@v1
      if: matrix.os == 'windows-latest' && matrix.install-method == 'pip' && env.INSTALLR
        == 1
    - name: (LINUX,PIP) Cache pip
      uses: actions/cache@v2
      if: startsWith(runner.os, 'Linux') && matrix.install-method == 'pip'
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: '${{ runner.os }}-pip-

          '
    - name: (MACOS,PIP) Cache pip
      uses: actions/cache@v2
      if: startsWith(runner.os, 'macOS') && matrix.install-method == 'pip'
      with:
        path: ~/Library/Caches/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: '${{ runner.os }}-pip-

          '
    - name: (WINDOWS,PIP) Cache pip
      uses: actions/cache@v2
      if: startsWith(runner.os, 'Windows') && matrix.install-method == 'pip'
      with:
        path: ~\AppData\Local\pip\Cache
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: '${{ runner.os }}-pip-

          '
    - name: (PIP) Set up Python
      uses: actions/setup-python@v2
      if: matrix.install-method == 'pip'
      with:
        python-version: ${{ matrix.python-version }}
    - name: (PIP) Set up Virtual Env
      if: env.USEVIRTUALENV == 1 && matrix.install-method == 'pip'
      run: 'python utils/setup_test_env.py env virtualenv ${{ matrix.python-version
        }} --env-name=test

        echo "source activate ygg" > ~/.bashrc

        source test/bin/activate

        echo "$VIRTUAL_ENV"

        echo "VIRTUAL_ENV=$VIRTUAL_ENV" >> $GITHUB_ENV

        echo "PATH=$VIRTUAL_ENV/bin:$PATH" >> $GITHUB_ENV

        '
    - name: (PIP) Install dependencies & package
      if: matrix.install-method == 'pip'
      run: python utils/setup_test_env.py install ${{ matrix.install-method }}
    - name: (WINDOWS,PIP) Set the vcpkg root config value
      if: matrix.os == 'windows-latest' && matrix.install-method == 'pip' && env.INSTALLC
        == 1
      run: yggconfig --vcpkg-dir=C:\\vcpkg
    - name: (WINDOWS,PIP) Update R requirements
      if: matrix.os == 'windows-latest' && matrix.install-method == 'pip' && env.INSTALLR
        == 1
      run: ygginstall R --update-r-requirements
    - name: (WINDOWS,CONDA) Set up miniconda base environment
      uses: conda-incubator/setup-miniconda@v2
      if: matrix.install-method == 'conda' && matrix.os == 'windows-latest'
      with:
        channels: conda-forge
        use-only-tar-bz2: true
        activate-environment: ''
    - name: (WINDOWS,CONDA) Set up MSVC Compiler
      uses: ilammy/msvc-dev-cmd@v1
      if: matrix.install-method == 'conda' && matrix.os == 'windows-latest' && env.INSTALLC
        == 1
      with:
        toolset: 14.0
    - name: (UNIX,CONDA) Add miniconda bin to path
      if: matrix.install-method == 'conda' && matrix.os != 'windows-latest'
      run: 'echo "NON_CONDA_PATH=$PATH" >> $GITHUB_ENV

        echo "PATH=$CONDA/bin:$PATH" >> $GITHUB_ENV

        '
      shell: bash -l {0}
    - name: (MACOS,CONDA) Change ownership of conda on MacOS
      if: matrix.install-method == 'conda' && matrix.os == 'macos-latest'
      run: sudo chown -R $(whoami) $CONDA
      shell: bash
    - name: (CONDA) Build package in base environment
      id: conda_build
      continue-on-error: true
      if: matrix.install-method == 'conda'
      run: python utils/setup_test_env.py build ${{ matrix.install-method }} --python
        ${{ matrix.python-version }}
      shell: bash --noprofile --norc -eo pipefail {0}
    - name: (CONDA) Build package in base environment (re-attempt)
      if: ${{ steps.conda_build.outcome == 'failure' && matrix.install-method == 'conda'}}
      run: python utils/setup_test_env.py build ${{ matrix.install-method }} --python
        ${{ matrix.python-version }}
      shell: bash --noprofile --norc -eo pipefail {0}
    - name: (UNIX,CONDA) Remove miniconda bin to path
      if: matrix.install-method == 'conda' && matrix.os != 'windows-latest'
      run: 'echo "PATH=$NON_CONDA_PATH" >> $GITHUB_ENV

        '
      shell: bash -l {0}
    - name: (CONDA) Set up miniconda test environment
      uses: conda-incubator/setup-miniconda@v2
      if: matrix.install-method == 'conda'
      with:
        auto-update-conda: true
        python-version: ${{ matrix.python-version }}
        channels: conda-forge
        use-only-tar-bz2: true
        channel-priority: strict
    - name: (MACOS,CONDA) Install old MacOSX SDK for compatibility with the conda
        llvm (7)
      if: matrix.os == 'macos-latest' && matrix.install-method == 'conda'
      run: ./utils/setup_old_mac_sdk.sh
    - name: (CONDA) Install dependencies & package from existing build
      id: conda_install
      continue-on-error: true
      if: matrix.install-method == 'conda'
      run: python utils/setup_test_env.py install ${{ matrix.install-method }} --without-build
    - name: (CONDA) Install dependencies & package from existing build (re-attempt)
      if: ${{ steps.conda_install.outcome == 'failure' && matrix.install-method ==
        'conda'}}
      run: python utils/setup_test_env.py install ${{ matrix.install-method }} --without-build
    - name: (MACOS,CONDA) Set allow_multiple_omp config
      if: matrix.install-method == 'conda' && matrix.os == 'macos-latest'
      run: yggconfig --allow-multiple-omp
    - name: Verify installation
      run: python utils/setup_test_env.py verify
    - name: Compile libraries
      run: yggcompile
    - name: Run cmake test in command prompt
      if: matrix.os == 'windows-latest'
      shell: cmd /C CALL {0}
      run: 'cmake -h

        yggtest --ci --nocapture drivers/tests/test_CMakeModelDriver.py

        '
    - name: Run tests (1st)
      id: test1
      run: 'yggtest --ci --cov-append ${{ matrix.test-flags1 }}

        '
      continue-on-error: true
    - name: Re-run test failures (1st)
      if: ${{ steps.test1.outcome == 'failure' }}
      run: 'yggtest --ci --cov-append ${{ matrix.test-flags1 }} --last-failed --last-failed-no-failures=none
        --debug

        '
    - name: Run tests (2nd)
      if: matrix.test-flags2 != ''
      id: test2
      run: yggtest --ci --cov-append ${{ matrix.test-flags2 }}
      continue-on-error: true
    - name: Re-run test failures (2nd)
      if: ${{ steps.test2.outcome == 'failure' }}
      run: yggtest --ci --cov-append ${{ matrix.test-flags2 }} --last-failed --last-failed-no-failures=none
        --debug
    - name: Run MPI tests (macos)
      if: env.INSTALLMPI == 1 && matrix.os == 'macos-latest'
      id: mpi
      run: 'yggtest --ci --cov-append --test-suite=mpi --write-script=run_mpi.sh

        ./run_mpi.sh

        '
    - name: Run MPI tests (ubuntu)
      if: env.INSTALLMPI == 1 && matrix.os == 'ubuntu-latest'
      id: mpi
      run: 'yggtest --ci --cov-append --with-mpi=2 yggdrasil/communication/tests/test_MPIComm.py::TestMPICommAsync::test_eof_no_close
        --write-script=run_mpi.sh --nocapture --debug

        ./run_mpi.sh

        '
    - name: Combine coverage reports
      continue-on-error: true
      run: '# ls .*

        coverage combine --append

        '
    - name: (CONDA) Generate XML version of coverage report
      if: matrix.install-method == 'conda'
      run: '# ls .*

        coverage xml

        '
    - name: Upload coverage report
      uses: codecov/codecov-action@v1
      with:
        name: ${{ env.YGG_GHA_JOB_ID }}
        token: ${{ secrets.CODECOV_TOKEN }}
    - name: Download the last successful workflow environment log
      if: ${{ always() }}
      continue-on-error: true
      uses: dawidd6/action-download-artifact@v2
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        workflow: test-install.yml
        name: environment-log-${{ env.YGG_GHA_JOB_ID }}
        path: .
    - name: Create a log of Python package versions
      if: ${{ always() }}
      run: python utils/setup_test_env.py log
    - uses: actions/upload-artifact@v2
      if: ${{ success() }}
      with:
        name: environment-log-${{ env.YGG_GHA_JOB_ID }}
        path: new_environment_log.txt
  test_rmq_conda:
    name: Test RMQ (${{ matrix.python-version }}, ${{ matrix.os }}, ${{ matrix.install-method
      }})
    runs-on: ${{ matrix.os }}
    env:
      INSTALLRMQ: 1
      INSTALLAPY: 1
      USEVIRTUALENV: 1
    strategy:
      matrix:
        os:
        - ubuntu-latest
        python-version:
        - 3.6
        install-method:
        - conda
        test-flags1:
        - --long-running --languages python R matlab
        test-flags2:
        - ''
        install-c:
        - true
      fail-fast: false
    services:
      rabbitmq:
        image: rabbitmq:latest
        ports:
        - 5672:5672
        options: --health-cmd "rabbitmqctl node_health_check" --health-interval 10s
          --health-timeout 5s --health-retries 5
    defaults:
      run:
        shell: bash -l {0}
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - name: Set C installation based on matrix value
      if: matrix.install-c != true && matrix.install-method != 'conda'
      run: echo "INSTALLC=0" >> $GITHUB_ENV
      shell: bash -l {0}
    - name: Store an ID string for the job
      run: echo "YGG_GHA_JOB_ID=${{ matrix.os }}-${{ matrix.install-method }}-py${{
        matrix.python-version }}-C${{ env.INSTALLC }}-RMQ${{ env.INSTALLRMQ }}${{
        env.YGG_GHA_JOB_ID_SUFFIX }}" >> $GITHUB_ENV
      shell: bash -l {0}
    - name: (WINDOWS) Patch TEMP/TMPDIR on Windows
      if: matrix.os == 'windows-latest'
      run: 'echo "TMPDIR=$USERPROFILE\\AppData\\Local\\Temp" >> $GITHUB_ENV

        echo "TEMP=$USERPROFILE\\AppData\\Local\\Temp" >> $GITHUB_ENV

        '
      shell: bash -l {0}
    - name: (WINDOWS,PIP) Set up MSVC Compiler
      uses: ilammy/msvc-dev-cmd@v1
      if: matrix.os == 'windows-latest' && matrix.install-method == 'pip' && env.INSTALLC
        == 1
      with:
        toolset: 14.0
    - name: Install R
      uses: r-lib/actions/setup-r@v1
      if: matrix.os == 'windows-latest' && matrix.install-method == 'pip' && env.INSTALLR
        == 1
    - name: (LINUX,PIP) Cache pip
      uses: actions/cache@v2
      if: startsWith(runner.os, 'Linux') && matrix.install-method == 'pip'
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: '${{ runner.os }}-pip-

          '
    - name: (MACOS,PIP) Cache pip
      uses: actions/cache@v2
      if: startsWith(runner.os, 'macOS') && matrix.install-method == 'pip'
      with:
        path: ~/Library/Caches/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: '${{ runner.os }}-pip-

          '
    - name: (WINDOWS,PIP) Cache pip
      uses: actions/cache@v2
      if: startsWith(runner.os, 'Windows') && matrix.install-method == 'pip'
      with:
        path: ~\AppData\Local\pip\Cache
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: '${{ runner.os }}-pip-

          '
    - name: (PIP) Set up Python
      uses: actions/setup-python@v2
      if: matrix.install-method == 'pip'
      with:
        python-version: ${{ matrix.python-version }}
    - name: (PIP) Set up Virtual Env
      if: env.USEVIRTUALENV == 1 && matrix.install-method == 'pip'
      run: 'python utils/setup_test_env.py env virtualenv ${{ matrix.python-version
        }} --env-name=test

        echo "source activate ygg" > ~/.bashrc

        source test/bin/activate

        echo "$VIRTUAL_ENV"

        echo "VIRTUAL_ENV=$VIRTUAL_ENV" >> $GITHUB_ENV

        echo "PATH=$VIRTUAL_ENV/bin:$PATH" >> $GITHUB_ENV

        '
    - name: (PIP) Install dependencies & package
      if: matrix.install-method == 'pip'
      run: python utils/setup_test_env.py install ${{ matrix.install-method }}
    - name: (WINDOWS,PIP) Set the vcpkg root config value
      if: matrix.os == 'windows-latest' && matrix.install-method == 'pip' && env.INSTALLC
        == 1
      run: yggconfig --vcpkg-dir=C:\\vcpkg
    - name: (WINDOWS,PIP) Update R requirements
      if: matrix.os == 'windows-latest' && matrix.install-method == 'pip' && env.INSTALLR
        == 1
      run: ygginstall R --update-r-requirements
    - name: (WINDOWS,CONDA) Set up miniconda base environment
      uses: conda-incubator/setup-miniconda@v2
      if: matrix.install-method == 'conda' && matrix.os == 'windows-latest'
      with:
        channels: conda-forge
        use-only-tar-bz2: true
        activate-environment: ''
    - name: (WINDOWS,CONDA) Set up MSVC Compiler
      uses: ilammy/msvc-dev-cmd@v1
      if: matrix.install-method == 'conda' && matrix.os == 'windows-latest' && env.INSTALLC
        == 1
      with:
        toolset: 14.0
    - name: (UNIX,CONDA) Add miniconda bin to path
      if: matrix.install-method == 'conda' && matrix.os != 'windows-latest'
      run: 'echo "NON_CONDA_PATH=$PATH" >> $GITHUB_ENV

        echo "PATH=$CONDA/bin:$PATH" >> $GITHUB_ENV

        '
      shell: bash -l {0}
    - name: (MACOS,CONDA) Change ownership of conda on MacOS
      if: matrix.install-method == 'conda' && matrix.os == 'macos-latest'
      run: sudo chown -R $(whoami) $CONDA
      shell: bash
    - name: (CONDA) Build package in base environment
      id: conda_build
      continue-on-error: true
      if: matrix.install-method == 'conda'
      run: python utils/setup_test_env.py build ${{ matrix.install-method }} --python
        ${{ matrix.python-version }}
      shell: bash --noprofile --norc -eo pipefail {0}
    - name: (CONDA) Build package in base environment (re-attempt)
      if: ${{ steps.conda_build.outcome == 'failure' && matrix.install-method == 'conda'}}
      run: python utils/setup_test_env.py build ${{ matrix.install-method }} --python
        ${{ matrix.python-version }}
      shell: bash --noprofile --norc -eo pipefail {0}
    - name: (UNIX,CONDA) Remove miniconda bin to path
      if: matrix.install-method == 'conda' && matrix.os != 'windows-latest'
      run: 'echo "PATH=$NON_CONDA_PATH" >> $GITHUB_ENV

        '
      shell: bash -l {0}
    - name: (CONDA) Set up miniconda test environment
      uses: conda-incubator/setup-miniconda@v2
      if: matrix.install-method == 'conda'
      with:
        auto-update-conda: true
        python-version: ${{ matrix.python-version }}
        channels: conda-forge
        use-only-tar-bz2: true
        channel-priority: strict
    - name: (MACOS,CONDA) Install old MacOSX SDK for compatibility with the conda
        llvm (7)
      if: matrix.os == 'macos-latest' && matrix.install-method == 'conda'
      run: ./utils/setup_old_mac_sdk.sh
    - name: (CONDA) Install dependencies & package from existing build
      id: conda_install
      continue-on-error: true
      if: matrix.install-method == 'conda'
      run: python utils/setup_test_env.py install ${{ matrix.install-method }} --without-build
    - name: (CONDA) Install dependencies & package from existing build (re-attempt)
      if: ${{ steps.conda_install.outcome == 'failure' && matrix.install-method ==
        'conda'}}
      run: python utils/setup_test_env.py install ${{ matrix.install-method }} --without-build
    - name: (MACOS,CONDA) Set allow_multiple_omp config
      if: matrix.install-method == 'conda' && matrix.os == 'macos-latest'
      run: yggconfig --allow-multiple-omp
    - name: Verify installation
      run: python utils/setup_test_env.py verify
    - name: Compile libraries
      run: yggcompile
    - name: Run cmake test in command prompt
      if: matrix.os == 'windows-latest'
      shell: cmd /C CALL {0}
      run: 'cmake -h

        yggtest --ci --nocapture drivers/tests/test_CMakeModelDriver.py

        '
    - name: Run tests (1st)
      id: test1
      run: 'yggtest --ci --cov-append ${{ matrix.test-flags1 }}

        '
      continue-on-error: true
    - name: Re-run test failures (1st)
      if: ${{ steps.test1.outcome == 'failure' }}
      run: 'yggtest --ci --cov-append ${{ matrix.test-flags1 }} --last-failed --last-failed-no-failures=none
        --debug

        '
    - name: Run tests (2nd)
      if: matrix.test-flags2 != ''
      id: test2
      run: yggtest --ci --cov-append ${{ matrix.test-flags2 }}
      continue-on-error: true
    - name: Re-run test failures (2nd)
      if: ${{ steps.test2.outcome == 'failure' }}
      run: yggtest --ci --cov-append ${{ matrix.test-flags2 }} --last-failed --last-failed-no-failures=none
        --debug
    - name: Run MPI tests (macos)
      if: env.INSTALLMPI == 1 && matrix.os == 'macos-latest'
      id: mpi
      run: 'yggtest --ci --cov-append --test-suite=mpi --write-script=run_mpi.sh

        ./run_mpi.sh

        '
    - name: Run MPI tests (ubuntu)
      if: env.INSTALLMPI == 1 && matrix.os == 'ubuntu-latest'
      id: mpi
      run: 'yggtest --ci --cov-append --with-mpi=2 yggdrasil/communication/tests/test_MPIComm.py::TestMPICommAsync::test_eof_no_close
        --write-script=run_mpi.sh --nocapture --debug

        ./run_mpi.sh

        '
    - name: Combine coverage reports
      continue-on-error: true
      run: '# ls .*

        coverage combine --append

        '
    - name: (CONDA) Generate XML version of coverage report
      if: matrix.install-method == 'conda'
      run: '# ls .*

        coverage xml

        '
    - name: Upload coverage report
      uses: codecov/codecov-action@v1
      with:
        name: ${{ env.YGG_GHA_JOB_ID }}
        token: ${{ secrets.CODECOV_TOKEN }}
    - name: Download the last successful workflow environment log
      if: ${{ always() }}
      continue-on-error: true
      uses: dawidd6/action-download-artifact@v2
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        workflow: test-install.yml
        name: environment-log-${{ env.YGG_GHA_JOB_ID }}
        path: .
    - name: Create a log of Python package versions
      if: ${{ always() }}
      run: python utils/setup_test_env.py log
    - uses: actions/upload-artifact@v2
      if: ${{ success() }}
      with:
        name: environment-log-${{ env.YGG_GHA_JOB_ID }}
        path: new_environment_log.txt
  test_stripped:
    name: Test stripped install (${{ matrix.python-version }}, ${{ matrix.os }}, ${{
      matrix.install-method }})
    runs-on: ${{ matrix.os }}
    env:
      INSTALLR: 0
      INSTALLC: 0
      INSTALLFORTRAN: 0
      INSTALLLPY: 0
      INSTALLZMQ: 0
      INSTALLRMQ: 0
      INSTALLTRIMESH: 0
      INSTALLPYGMENTS: 0
      YGG_GHA_JOB_ID_SUFFIX: -stripped
    strategy:
      matrix:
        os:
        - ubuntu-latest
        - macos-latest
        - windows-latest
        python-version:
        - 3.6
        install-method:
        - pip
        test-flags1:
        - --long-running
        test-flags2:
        - ''
        install-c:
        - false
      fail-fast: false
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - name: Set C installation based on matrix value
      if: matrix.install-c != true && matrix.install-method != 'conda'
      run: echo "INSTALLC=0" >> $GITHUB_ENV
      shell: bash -l {0}
    - name: Store an ID string for the job
      run: echo "YGG_GHA_JOB_ID=${{ matrix.os }}-${{ matrix.install-method }}-py${{
        matrix.python-version }}-C${{ env.INSTALLC }}-RMQ${{ env.INSTALLRMQ }}${{
        env.YGG_GHA_JOB_ID_SUFFIX }}" >> $GITHUB_ENV
      shell: bash -l {0}
    - name: (WINDOWS) Patch TEMP/TMPDIR on Windows
      if: matrix.os == 'windows-latest'
      run: 'echo "TMPDIR=$USERPROFILE\\AppData\\Local\\Temp" >> $GITHUB_ENV

        echo "TEMP=$USERPROFILE\\AppData\\Local\\Temp" >> $GITHUB_ENV

        '
      shell: bash -l {0}
    - name: (WINDOWS,PIP) Set up MSVC Compiler
      uses: ilammy/msvc-dev-cmd@v1
      if: matrix.os == 'windows-latest' && matrix.install-method == 'pip' && env.INSTALLC
        == 1
      with:
        toolset: 14.0
    - name: Install R
      uses: r-lib/actions/setup-r@v1
      if: matrix.os == 'windows-latest' && matrix.install-method == 'pip' && env.INSTALLR
        == 1
    - name: (LINUX,PIP) Cache pip
      uses: actions/cache@v2
      if: startsWith(runner.os, 'Linux') && matrix.install-method == 'pip'
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: '${{ runner.os }}-pip-

          '
    - name: (MACOS,PIP) Cache pip
      uses: actions/cache@v2
      if: startsWith(runner.os, 'macOS') && matrix.install-method == 'pip'
      with:
        path: ~/Library/Caches/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: '${{ runner.os }}-pip-

          '
    - name: (WINDOWS,PIP) Cache pip
      uses: actions/cache@v2
      if: startsWith(runner.os, 'Windows') && matrix.install-method == 'pip'
      with:
        path: ~\AppData\Local\pip\Cache
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: '${{ runner.os }}-pip-

          '
    - name: (PIP) Set up Python
      uses: actions/setup-python@v2
      if: matrix.install-method == 'pip'
      with:
        python-version: ${{ matrix.python-version }}
    - name: (PIP) Set up Virtual Env
      if: env.USEVIRTUALENV == 1 && matrix.install-method == 'pip'
      run: 'python utils/setup_test_env.py env virtualenv ${{ matrix.python-version
        }} --env-name=test

        echo "source activate ygg" > ~/.bashrc

        source test/bin/activate

        echo "$VIRTUAL_ENV"

        echo "VIRTUAL_ENV=$VIRTUAL_ENV" >> $GITHUB_ENV

        echo "PATH=$VIRTUAL_ENV/bin:$PATH" >> $GITHUB_ENV

        '
    - name: (PIP) Install dependencies & package
      if: matrix.install-method == 'pip'
      run: python utils/setup_test_env.py install ${{ matrix.install-method }}
    - name: (WINDOWS,PIP) Set the vcpkg root config value
      if: matrix.os == 'windows-latest' && matrix.install-method == 'pip' && env.INSTALLC
        == 1
      run: yggconfig --vcpkg-dir=C:\\vcpkg
    - name: (WINDOWS,PIP) Update R requirements
      if: matrix.os == 'windows-latest' && matrix.install-method == 'pip' && env.INSTALLR
        == 1
      run: ygginstall R --update-r-requirements
    - name: (WINDOWS,CONDA) Set up miniconda base environment
      uses: conda-incubator/setup-miniconda@v2
      if: matrix.install-method == 'conda' && matrix.os == 'windows-latest'
      with:
        channels: conda-forge
        use-only-tar-bz2: true
        activate-environment: ''
    - name: (WINDOWS,CONDA) Set up MSVC Compiler
      uses: ilammy/msvc-dev-cmd@v1
      if: matrix.install-method == 'conda' && matrix.os == 'windows-latest' && env.INSTALLC
        == 1
      with:
        toolset: 14.0
    - name: (UNIX,CONDA) Add miniconda bin to path
      if: matrix.install-method == 'conda' && matrix.os != 'windows-latest'
      run: 'echo "NON_CONDA_PATH=$PATH" >> $GITHUB_ENV

        echo "PATH=$CONDA/bin:$PATH" >> $GITHUB_ENV

        '
      shell: bash -l {0}
    - name: (MACOS,CONDA) Change ownership of conda on MacOS
      if: matrix.install-method == 'conda' && matrix.os == 'macos-latest'
      run: sudo chown -R $(whoami) $CONDA
      shell: bash
    - name: (CONDA) Build package in base environment
      id: conda_build
      continue-on-error: true
      if: matrix.install-method == 'conda'
      run: python utils/setup_test_env.py build ${{ matrix.install-method }} --python
        ${{ matrix.python-version }}
      shell: bash --noprofile --norc -eo pipefail {0}
    - name: (CONDA) Build package in base environment (re-attempt)
      if: ${{ steps.conda_build.outcome == 'failure' && matrix.install-method == 'conda'}}
      run: python utils/setup_test_env.py build ${{ matrix.install-method }} --python
        ${{ matrix.python-version }}
      shell: bash --noprofile --norc -eo pipefail {0}
    - name: (UNIX,CONDA) Remove miniconda bin to path
      if: matrix.install-method == 'conda' && matrix.os != 'windows-latest'
      run: 'echo "PATH=$NON_CONDA_PATH" >> $GITHUB_ENV

        '
      shell: bash -l {0}
    - name: (CONDA) Set up miniconda test environment
      uses: conda-incubator/setup-miniconda@v2
      if: matrix.install-method == 'conda'
      with:
        auto-update-conda: true
        python-version: ${{ matrix.python-version }}
        channels: conda-forge
        use-only-tar-bz2: true
        channel-priority: strict
    - name: (MACOS,CONDA) Install old MacOSX SDK for compatibility with the conda
        llvm (7)
      if: matrix.os == 'macos-latest' && matrix.install-method == 'conda'
      run: ./utils/setup_old_mac_sdk.sh
    - name: (CONDA) Install dependencies & package from existing build
      id: conda_install
      continue-on-error: true
      if: matrix.install-method == 'conda'
      run: python utils/setup_test_env.py install ${{ matrix.install-method }} --without-build
    - name: (CONDA) Install dependencies & package from existing build (re-attempt)
      if: ${{ steps.conda_install.outcome == 'failure' && matrix.install-method ==
        'conda'}}
      run: python utils/setup_test_env.py install ${{ matrix.install-method }} --without-build
    - name: (MACOS,CONDA) Set allow_multiple_omp config
      if: matrix.install-method == 'conda' && matrix.os == 'macos-latest'
      run: yggconfig --allow-multiple-omp
    - name: Verify installation
      run: python utils/setup_test_env.py verify
    - name: Compile libraries
      run: yggcompile
    - name: Run cmake test in command prompt
      if: matrix.os == 'windows-latest'
      shell: cmd /C CALL {0}
      run: 'cmake -h

        yggtest --ci --nocapture drivers/tests/test_CMakeModelDriver.py

        '
    - name: Run tests (1st)
      id: test1
      run: 'yggtest --ci --cov-append ${{ matrix.test-flags1 }}

        '
      continue-on-error: true
    - name: Re-run test failures (1st)
      if: ${{ steps.test1.outcome == 'failure' }}
      run: 'yggtest --ci --cov-append ${{ matrix.test-flags1 }} --last-failed --last-failed-no-failures=none
        --debug

        '
    - name: Run tests (2nd)
      if: matrix.test-flags2 != ''
      id: test2
      run: yggtest --ci --cov-append ${{ matrix.test-flags2 }}
      continue-on-error: true
    - name: Re-run test failures (2nd)
      if: ${{ steps.test2.outcome == 'failure' }}
      run: yggtest --ci --cov-append ${{ matrix.test-flags2 }} --last-failed --last-failed-no-failures=none
        --debug
    - name: Run MPI tests (macos)
      if: env.INSTALLMPI == 1 && matrix.os == 'macos-latest'
      id: mpi
      run: 'yggtest --ci --cov-append --test-suite=mpi --write-script=run_mpi.sh

        ./run_mpi.sh

        '
    - name: Run MPI tests (ubuntu)
      if: env.INSTALLMPI == 1 && matrix.os == 'ubuntu-latest'
      id: mpi
      run: 'yggtest --ci --cov-append --with-mpi=2 yggdrasil/communication/tests/test_MPIComm.py::TestMPICommAsync::test_eof_no_close
        --write-script=run_mpi.sh --nocapture --debug

        ./run_mpi.sh

        '
    - name: Combine coverage reports
      continue-on-error: true
      run: '# ls .*

        coverage combine --append

        '
    - name: (CONDA) Generate XML version of coverage report
      if: matrix.install-method == 'conda'
      run: '# ls .*

        coverage xml

        '
    - name: Upload coverage report
      uses: codecov/codecov-action@v1
      with:
        name: ${{ env.YGG_GHA_JOB_ID }}
        token: ${{ secrets.CODECOV_TOKEN }}
    - name: Download the last successful workflow environment log
      if: ${{ always() }}
      continue-on-error: true
      uses: dawidd6/action-download-artifact@v2
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        workflow: test-install.yml
        name: environment-log-${{ env.YGG_GHA_JOB_ID }}
        path: .
    - name: Create a log of Python package versions
      if: ${{ always() }}
      run: python utils/setup_test_env.py log
    - uses: actions/upload-artifact@v2
      if: ${{ success() }}
      with:
        name: environment-log-${{ env.YGG_GHA_JOB_ID }}
        path: new_environment_log.txt
  docs:
    name: Build the Docs
    runs-on: ubuntu-latest
    env:
      BUILDDOCS: 1
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - name: Install dependencies
      run: python utils/setup_test_env.py install pip
    - name: Verify installation
      run: python utils/setup_test_env.py verify
    - name: Build the docs
      run: 'cd docs

        make autodoc

        cd ../

        '
    - name: Publish docs to Github pages
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
      uses: JamesIves/github-pages-deploy-action@3.7.1
      with:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        BRANCH: gh-pages
        FOLDER: docs/build/html/
  deploy:
    name: Publish package
    needs:
    - test_pip
    - test_conda
    - test_rmq_pip
    - test_rmq_conda
    - test_stripped
    - docs
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - name: Install dependencies
      run: python utils/setup_test_env.py install pip
    - name: Verify installation
      run: python utils/setup_test_env.py verify
    - name: Build the package
      run: 'python setup.py sdist

        python setup.py bdist_wheel

        '
    - name: Publish package to PyPI
      uses: pypa/gh-action-pypi-publish@master
      with:
        user: __token__
        password: ${{ secrets.pypi }}
        skip_existing: true
