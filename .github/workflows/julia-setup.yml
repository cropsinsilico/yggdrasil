name: Julia Testing
on: [push]
jobs:
  julia:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        install-method: [pip]
      fail-fast: false
      max-parallel: 20
    runs-on: ${{ matrix.os }}
    steps:

    # Mamba steps
    - name: Set up mamba
      uses: conda-incubator/setup-miniconda@v2
      if: matrix.install-method == 'mamba'
      with:
        auto-update-conda: true
        python-version: ${{ matrix.python-version }}
        channels: conda-forge
        use-only-tar-bz2: true
        channel-priority: strict
        miniforge-variant: Mambaforge
        use-mamba: true
    - name: Install mamba packages
      if: matrix.install-method == 'mamba'
      shell: bash -l {0}
      run: |
        mamba install -y python==3.7 juliaup r-base

    # Non-mamba steps
    - name: Install Python
      if: matrix.install-method == 'pip'
      uses: actions/setup-python@v4
      with:
        python-version: '3.7'
    - name: Install R
      if: matrix.install-method == 'pip'
      uses: r-lib/actions/setup-r@v2
      with:
        r-version: 4.2.3
    - name: Install Julia
      if: matrix.install-method == 'pip'
      uses: julia-actions/setup-julia@v1

    # Test julia installation
    - name: Check Julia version
      shell: bash -l {0}
      run: julia -v
    - name: Install PyCall (no mamba)
      if: matrix.install-method == 'pip'
      run: julia -e "using Pkg; Pkg.add(\"PyCall\")"
    - name: Install PyCall (mamba)
      if: matrix.install-method == 'mamba'
      shell: bash -l {0}
      run: julia -e "using Pkg; Pkg.add(\"PyCall\")"
