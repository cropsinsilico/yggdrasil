{
    "title": "Model YAML Schema",
    "description": "Schema for yggdrasil model YAML input files.",
    "type": "object",
    "definitions": {
        "comm": {
            "description": "Base schema for all subtypes of comm components.",
            "additionalProperties": false,
            "dependencies": {
                "driver": [
                    "args"
                ]
            },
            "properties": {
                "commtype": {
                    "default": "default",
                    "description": "Communication mechanism that should be used.",
                    "enum": [
                        "buffer",
                        "default",
                        "ipc",
                        "mpi",
                        "rest",
                        "rmq",
                        "rmq_async",
                        "value",
                        "zmq"
                    ],
                    "type": "string"
                },
                "datatype": {
                    "$ref": "#/definitions/schema"
                },
                "default_file": {
                    "$ref": "#/definitions/file"
                },
                "default_value": {
                    "description": "Value that should be returned in the event that a yaml does not pair the comm with another model comm or a file.",
                    "type": "any"
                },
                "filter": {
                    "$ref": "#/definitions/filter",
                    "description": "Filter that will be used to determine when messages should be sent/received. Ignored if not provided."
                },
                "format_str": {
                    "description": "String that should be used to format/parse messages. Default to None.",
                    "type": "string"
                },
                "name": {
                    "description": "Name used for component in log messages.",
                    "type": "string"
                },
                "outside_loop": {
                    "default": false,
                    "description": "If True, and the comm is an input/outputs to/from a model being wrapped. The receive/send calls for this comm will be outside the loop for the model. Defaults to False.",
                    "type": "boolean",
                    "format": "checkbox"
                },
                "transform": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/transform"
                    },
                    "description": "One or more transformations that will be applied to messages that are sent/received. Ignored if not provided."
                },
                "vars": {
                    "description": "Names of variables to be sent/received by this comm. Defaults to [].",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "count": {
                    "default": 1,
                    "type": "integer",
                    "options": {
                        "dependencies": {
                            "commtype": [
                                "value"
                            ]
                        }
                    }
                }
            },
            "required": [
                "datatype",
                "name",
                "commtype"
            ],
            "type": "object"
        },
        "file": {
            "description": "Base schema for all subtypes of file components.",
            "additionalProperties": false,
            "dependencies": {
                "driver": [
                    "args"
                ]
            },
            "properties": {
                "append": {
                    "default": false,
                    "description": "If True and writing, file is openned in append mode. If True and reading, file is kept open even if the end of the file is reached to allow for another process to write to the file in append mode. Defaults to False.",
                    "type": "boolean",
                    "format": "checkbox"
                },
                "filetype": {
                    "default": "binary",
                    "description": "The type of file that will be read from or written to.",
                    "enum": [
                        "ascii",
                        "binary",
                        "json",
                        "map",
                        "mat",
                        "netcdf",
                        "obj",
                        "pandas",
                        "pickle",
                        "ply",
                        "table",
                        "wofost",
                        "yaml"
                    ],
                    "type": "string"
                },
                "filter": {
                    "$ref": "#/definitions/filter",
                    "description": "Filter that will be used to determine when messages should be sent/received. Ignored if not provided."
                },
                "format_str": {
                    "description": "String that should be used to format/parse messages. Default to None.",
                    "type": "string"
                },
                "is_series": {
                    "default": false,
                    "description": "If True, input/output will be done to a series of files. If reading, each file will be processed until the end is reached. If writing, each output will be to a new file in the series. The addressed is assumed to contain a format for the index of the file. Defaults to False.",
                    "type": "boolean",
                    "format": "checkbox"
                },
                "name": {
                    "description": "Name used for component in log messages.",
                    "type": "string"
                },
                "transform": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/transform"
                        },
                        {
                            "type": "string"
                        },
                        {
                            "items": {
                                "anyOf": [
                                    {
                                        "$ref": "#/definitions/transform"
                                    },
                                    {
                                        "type": "string"
                                    }
                                ]
                            },
                            "type": "array"
                        }
                    ],
                    "description": "One or more transformations that will be applied to messages that are sent/received. Ignored if not provided."
                },
                "vars": {
                    "description": "Names of variables to be sent/received by this comm. Defaults to [].",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "comment": {
                    "default": "# ",
                    "description": "One or more characters indicating a comment. Defaults to '# '.",
                    "type": "string",
                    "options": {
                        "dependencies": {
                            "filetype": [
                                "map",
                                "ply",
                                "netcdf",
                                "wofost",
                                "table",
                                "mat",
                                "ascii",
                                "pandas",
                                "obj",
                                "yaml",
                                "json",
                                "pickle"
                            ]
                        }
                    }
                },
                "delimiter": {
                    "default": "\t",
                    "description": "Delimiter that should be used to separate name/value pairs in the map. Defaults to \\t.",
                    "type": "string",
                    "options": {
                        "dependencies": {
                            "filetype": [
                                "map",
                                "wofost",
                                "table",
                                "pandas"
                            ]
                        }
                    }
                },
                "newline": {
                    "default": "\n",
                    "description": "One or more characters indicating a newline. Defaults to '\\n'.",
                    "type": "string",
                    "options": {
                        "dependencies": {
                            "filetype": [
                                "map",
                                "ply",
                                "netcdf",
                                "wofost",
                                "table",
                                "mat",
                                "ascii",
                                "pandas",
                                "obj",
                                "yaml",
                                "json",
                                "pickle"
                            ]
                        }
                    }
                },
                "read_attributes": {
                    "default": false,
                    "description": "If True, the attributes are read in as well as the variables. Defaults to False.",
                    "type": "boolean",
                    "options": {
                        "dependencies": {
                            "filetype": [
                                "netcdf"
                            ]
                        }
                    },
                    "format": "checkbox"
                },
                "variables": {
                    "description": "List of variables to read in. If not provided, all variables will be read.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "options": {
                        "dependencies": {
                            "filetype": [
                                "netcdf"
                            ]
                        }
                    }
                },
                "version": {
                    "default": 1,
                    "description": "Version of netCDF format that should be used. Defaults to 1. Options are 1 (classic format) and 2 (64-bit offset format).",
                    "enum": [
                        1,
                        2
                    ],
                    "type": "integer",
                    "options": {
                        "dependencies": {
                            "filetype": [
                                "netcdf"
                            ]
                        }
                    }
                },
                "use_astropy": {
                    "default": false,
                    "description": "If True, the astropy package will be used to serialize/deserialize table. Defaults to False.",
                    "type": "boolean",
                    "options": {
                        "dependencies": {
                            "filetype": [
                                "table",
                                "pandas"
                            ]
                        }
                    },
                    "format": "checkbox"
                },
                "no_header": {
                    "default": false,
                    "description": "If True, headers will not be read or serialized from/to tables. Defaults to False.",
                    "type": "boolean",
                    "options": {
                        "dependencies": {
                            "filetype": [
                                "pandas"
                            ]
                        }
                    },
                    "format": "checkbox"
                },
                "str_as_bytes": {
                    "default": false,
                    "description": "If True, strings in columns are read as bytes. Defaults to False.",
                    "type": "boolean",
                    "options": {
                        "dependencies": {
                            "filetype": [
                                "pandas"
                            ]
                        }
                    },
                    "format": "checkbox"
                },
                "default_flow_style": {
                    "default": false,
                    "description": "If True, nested collections will be serialized in the block style. If False, they will always be serialized in the flow style. See `PyYAML Documentation <https://pyyaml.org/wiki/PyYAMLDocumentation>`_.",
                    "type": "boolean",
                    "options": {
                        "dependencies": {
                            "filetype": [
                                "yaml"
                            ]
                        }
                    },
                    "format": "checkbox"
                },
                "encoding": {
                    "default": "utf-8",
                    "description": "Encoding that should be used to serialize the object. Defaults to 'utf-8'.",
                    "type": "string",
                    "options": {
                        "dependencies": {
                            "filetype": [
                                "yaml"
                            ]
                        }
                    }
                },
                "indent": {
                    "default": "\t",
                    "description": "String or number of spaces that should be used to indent each level within the seiralized structure. Defaults to '\\t'.",
                    "type": [
                        "string",
                        "integer"
                    ],
                    "options": {
                        "dependencies": {
                            "filetype": [
                                "yaml",
                                "json"
                            ]
                        }
                    }
                },
                "sort_keys": {
                    "default": true,
                    "description": "If True, the serialization of dictionaries will be in key sorted order. Defaults to True.",
                    "type": "boolean",
                    "options": {
                        "dependencies": {
                            "filetype": [
                                "json"
                            ]
                        }
                    },
                    "format": "checkbox"
                }
            },
            "required": [
                "filetype",
                "name"
            ],
            "type": "object"
        },
        "filter": {
            "description": "Base schema for all subtypes of filter components.",
            "additionalProperties": false,
            "dependencies": {
                "driver": [
                    "args"
                ]
            },
            "properties": {
                "filtertype": {
                    "enum": [
                        "direct",
                        "function",
                        "statement"
                    ]
                },
                "initial_state": {
                    "description": "Dictionary of initial state variables that should be set when the filter is created.",
                    "type": "object"
                },
                "statement": {
                    "description": "Python statement in terms of the message as represented by the string \"%x%\" that should evaluate to a boolean, True if the message should pass through the filter, False if it should not. The statement should only use a limited set of builtins and the math library (See yggdrasil.tools.safe_eval). If more complex relationships are required, use the FunctionFilter class.",
                    "type": "string",
                    "options": {
                        "dependencies": {
                            "filtertype": [
                                "statement"
                            ]
                        }
                    }
                },
                "function": {
                    "description": "The handle for a callable Python object (e.g. function) that should be used to determine if a message should be filtered or a string of the form \"<function file>:<function name>\" identifying a function where \"<function file>\" is the module or Python file containing the function and \"<function name>\" is the name of the function. The function should take the message as input and return a boolean, True if the message should pass through the filter, False if it should not.",
                    "type": "string",
                    "options": {
                        "dependencies": {
                            "filtertype": [
                                "function"
                            ]
                        }
                    }
                }
            },
            "type": "object"
        },
        "serializer": {
            "description": "Base schema for all subtypes of serializer components.",
            "additionalProperties": false,
            "dependencies": {
                "driver": [
                    "args"
                ]
            },
            "properties": {
                "comment": {
                    "default": "# ",
                    "description": "One or more characters indicating a comment. Defaults to '# '.",
                    "type": "string"
                },
                "datatype": {
                    "$ref": "#/definitions/schema"
                },
                "newline": {
                    "default": "\n",
                    "description": "One or more characters indicating a newline. Defaults to '\\n'.",
                    "type": "string"
                },
                "seritype": {
                    "default": "default",
                    "description": "Serializer type.",
                    "enum": [
                        "default",
                        "direct",
                        "functional",
                        "json",
                        "map",
                        "mat",
                        "obj",
                        "pandas",
                        "pickle",
                        "ply",
                        "table",
                        "wofost",
                        "yaml"
                    ],
                    "type": "string"
                },
                "as_array": {
                    "default": false,
                    "description": "If True, each of the arguments being serialized/deserialized will be arrays that are converted to/from bytes in column major ('F') order. Otherwise, each argument should be a scalar. Defaults to False.",
                    "type": "boolean",
                    "options": {
                        "dependencies": {
                            "seritype": [
                                "table"
                            ]
                        }
                    },
                    "format": "checkbox"
                },
                "delimiter": {
                    "default": "\t",
                    "description": "Character(s) that should be used to separate columns. Defaults to '\\t'.",
                    "type": "string",
                    "options": {
                        "dependencies": {
                            "seritype": [
                                "table",
                                "pandas",
                                "map",
                                "wofost"
                            ]
                        }
                    }
                },
                "field_names": {
                    "description": "The names of fields in the format string. If not provided, names are set based on the order of the fields in the format string.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "options": {
                        "dependencies": {
                            "seritype": [
                                "table",
                                "pandas"
                            ]
                        }
                    }
                },
                "field_units": {
                    "description": "The units of fields in the format string. If not provided, all fields are assumed to be dimensionless.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "options": {
                        "dependencies": {
                            "seritype": [
                                "table",
                                "pandas"
                            ]
                        }
                    }
                },
                "format_str": {
                    "description": "If provided, this string will be used to format messages from a list of arguments and parse messages to get a list of arguments in C printf/scanf style. Defaults to None and messages are assumed to already be bytes.",
                    "type": "string",
                    "options": {
                        "dependencies": {
                            "seritype": [
                                "table",
                                "pandas"
                            ]
                        }
                    }
                },
                "use_astropy": {
                    "default": false,
                    "description": "If True, the astropy package will be used to serialize/deserialize table. Defaults to False.",
                    "type": "boolean",
                    "options": {
                        "dependencies": {
                            "seritype": [
                                "table",
                                "pandas"
                            ]
                        }
                    },
                    "format": "checkbox"
                },
                "no_header": {
                    "default": false,
                    "description": "If True, headers will not be read or serialized from/to tables. Defaults to False.",
                    "type": "boolean",
                    "options": {
                        "dependencies": {
                            "seritype": [
                                "pandas"
                            ]
                        }
                    },
                    "format": "checkbox"
                },
                "str_as_bytes": {
                    "default": false,
                    "description": "If True, strings in columns are read as bytes. Defaults to False.",
                    "type": "boolean",
                    "options": {
                        "dependencies": {
                            "seritype": [
                                "pandas"
                            ]
                        }
                    },
                    "format": "checkbox"
                },
                "encoded_datatype": {
                    "$ref": "#/definitions/schema"
                },
                "func_deserialize": {
                    "description": "Callable object that takes objects of a type that conforms to encoded_datatype and returns a deserialized Python object. Defaults to None and the default deserialization for encoded_datatype will be used.",
                    "type": "string",
                    "options": {
                        "dependencies": {
                            "seritype": [
                                "functional"
                            ]
                        }
                    }
                },
                "func_serialize": {
                    "description": "Callable object that takes Python objects as input and returns a representation that conforms to encoded_datatype. Defaults to None and the default serialization for encoded_datatype will be used.",
                    "type": "string",
                    "options": {
                        "dependencies": {
                            "seritype": [
                                "functional"
                            ]
                        }
                    }
                },
                "indent": {
                    "default": "\t",
                    "description": "String or number of spaces that should be used to indent each level within the seiralized structure. Defaults to '\\t'.",
                    "type": [
                        "string",
                        "integer"
                    ],
                    "options": {
                        "dependencies": {
                            "seritype": [
                                "json",
                                "yaml"
                            ]
                        }
                    }
                },
                "sort_keys": {
                    "default": true,
                    "description": "If True, the serialization of dictionaries will be in key sorted order. Defaults to True.",
                    "type": "boolean",
                    "options": {
                        "dependencies": {
                            "seritype": [
                                "json"
                            ]
                        }
                    },
                    "format": "checkbox"
                },
                "default_flow_style": {
                    "default": false,
                    "description": "If True, nested collections will be serialized in the block style. If False, they will always be serialized in the flow style. See `PyYAML Documentation <https://pyyaml.org/wiki/PyYAMLDocumentation>`_.",
                    "type": "boolean",
                    "options": {
                        "dependencies": {
                            "seritype": [
                                "yaml"
                            ]
                        }
                    },
                    "format": "checkbox"
                },
                "encoding": {
                    "default": "utf-8",
                    "description": "Encoding that should be used to serialize the object. Defaults to 'utf-8'.",
                    "type": "string",
                    "options": {
                        "dependencies": {
                            "seritype": [
                                "yaml"
                            ]
                        }
                    }
                }
            },
            "type": "object"
        },
        "transform": {
            "description": "Base schema for all subtypes of transform components.",
            "additionalProperties": false,
            "dependencies": {
                "driver": [
                    "args"
                ]
            },
            "properties": {
                "initial_state": {
                    "description": "Dictionary of initial state variables that should be set when the transform is created.",
                    "type": "object"
                },
                "original_datatype": {
                    "$ref": "#/definitions/schema"
                },
                "transformtype": {
                    "enum": [
                        "array",
                        "direct",
                        "filter",
                        "function",
                        "iterate",
                        "map_fields",
                        "pandas",
                        "select_fields",
                        "statement"
                    ]
                },
                "field_names": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "options": {
                        "dependencies": {
                            "transformtype": [
                                "array",
                                "pandas"
                            ]
                        }
                    }
                },
                "original_order": {
                    "description": "The original order of fields that should be used for selecting from lists/tuples.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "options": {
                        "dependencies": {
                            "transformtype": [
                                "select_fields"
                            ]
                        }
                    }
                },
                "selected": {
                    "description": "A list of fields that should be selected.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "options": {
                        "dependencies": {
                            "transformtype": [
                                "select_fields"
                            ]
                        }
                    }
                },
                "single_as_scalar": {
                    "description": "If True and only a single field is selected, the transformed messages will be scalars rather than arrays with single elements. Defaults to False.",
                    "type": "boolean",
                    "options": {
                        "dependencies": {
                            "transformtype": [
                                "select_fields"
                            ]
                        }
                    },
                    "format": "checkbox"
                },
                "function": {
                    "description": "The handle for a callable Python object (e.g. function) that should be used to transform messages or a string of the form \"<function file>:<function name>\" identifying a function where \"<function file>\" is the module or Python file containing the function and \"<function name>\" is the name of the function. The function should take the message as input and return the transformed message.",
                    "type": "string",
                    "options": {
                        "dependencies": {
                            "transformtype": [
                                "function"
                            ]
                        }
                    }
                },
                "statement": {
                    "description": "Python statement in terms of the message as represented by the string \"%x%\" that should evaluate to the transformed message. The statement should only use a limited set of builtins and the math library (See yggdrasil.tools.safe_eval). If more complex relationships are required, use the FunctionTransform class.",
                    "type": "string",
                    "options": {
                        "dependencies": {
                            "transformtype": [
                                "statement"
                            ]
                        }
                    }
                },
                "map": {
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A mapping from original field name to new field names.",
                    "type": "object",
                    "options": {
                        "dependencies": {
                            "transformtype": [
                                "map_fields"
                            ]
                        }
                    }
                },
                "filter": {
                    "$ref": "#/definitions/filter",
                    "options": {
                        "dependencies": {
                            "transformtype": [
                                "filter"
                            ]
                        }
                    }
                }
            },
            "type": "object"
        },
        "simpleTypes": {
            "enum": [
                "array",
                "boolean",
                "integer",
                "null",
                "number",
                "object",
                "string",
                "1darray",
                "any",
                "bytes",
                "class",
                "complex",
                "float",
                "function",
                "instance",
                "int",
                "ndarray",
                "obj",
                "ply",
                "schema",
                "uint",
                "unicode"
            ],
            "type": "string",
            "default": "bytes"
        },
        "schema": {
            "type": "object",
            "required": [
                "type"
            ],
            "properties": {
                "type": {
                    "$ref": "#/definitions/simpleTypes"
                },
                "subtype": {
                    "description": "The base type for each item.",
                    "enum": [
                        "bytes",
                        "complex",
                        "float",
                        "int",
                        "uint",
                        "unicode"
                    ],
                    "type": "string",
                    "options": {
                        "dependencies": {
                            "type": [
                                "1darray",
                                "ndarray"
                            ]
                        }
                    }
                },
                "units": {
                    "description": "Physical units.",
                    "type": "string",
                    "options": {
                        "dependencies": {
                            "type": [
                                "1darray",
                                "ndarray",
                                "int",
                                "uint",
                                "float",
                                "complex",
                                "bytes",
                                "unicode"
                            ]
                        }
                    }
                },
                "precision": {
                    "description": "The size (in bits) of each item.",
                    "minimum": 1,
                    "type": "number",
                    "options": {
                        "dependencies": {
                            "type": [
                                "1darray",
                                "ndarray",
                                "int",
                                "uint",
                                "float",
                                "complex",
                                "bytes",
                                "unicode"
                            ]
                        }
                    }
                },
                "length": {
                    "description": "Number of elements in the 1D array.",
                    "minimum": 1,
                    "type": "number",
                    "options": {
                        "dependencies": {
                            "type": [
                                "1darray"
                            ]
                        }
                    }
                },
                "shape": {
                    "description": "Shape of the ND array in each dimension.",
                    "items": {
                        "minimum": 1,
                        "type": "integer"
                    },
                    "type": "array",
                    "options": {
                        "dependencies": {
                            "type": [
                                "ndarray"
                            ]
                        }
                    }
                }
            }
        }
    },
    "required": [
        "args",
        "name",
        "language",
        "inputs",
        "outputs",
        "description",
        "repository_url"
    ],
    "additionalProperties": false,
    "properties": {
        "allow_threading": {
            "description": "If True, comm connections will be set up so that the model-side comms can be used by more than one thread. Defaults to False.",
            "type": "boolean",
            "format": "checkbox"
        },
        "args": {
            "description": "The path to the file containing the model program that will be run by the driver for the model's language and/or a list of arguments that should be passed as input to the model program or language executable (e.g. source code or configuration file for a domain specific language).",
            "items": {
                "type": "string"
            },
            "type": "array",
            "minItems": 1,
            "propertyOrder": 5
        },
        "contact_email": {
            "description": "Email address that should be used to contact the maintainer of the model. This parameter is only used in the model repository.",
            "type": "string",
            "propertyOrder": 2
        },
        "description": {
            "description": "Description of the model. This parameter is only used in the model repository or when providing the model as a service.",
            "type": "string",
            "propertyOrder": 4
        },
        "env": {
            "additional_properties": {
                "type": "string"
            },
            "default": {},
            "description": "Dictionary of environment variables that should be set when the driver starts. Defaults to {}.",
            "type": "object"
        },
        "function": {
            "description": "If provided, an integrated model is created by wrapping the function named here. The function must be located within the file specified by the source file listed in the first argument. If not provided, the model must contain it's own calls to the |yggdrasil| interface.",
            "type": "string"
        },
        "inputs": {
            "description": "Zero or more channels carrying input to the model.",
            "items": {
                "$ref": "#/definitions/comm"
            },
            "type": "array",
            "propertyOrder": 6
        },
        "iter_function_over": {
            "default": [],
            "description": "Variable(s) that should be received or sent as an array, but iterated over. Defaults to an empty array and is ignored.",
            "items": {
                "type": "string"
            },
            "type": "array"
        },
        "language": {
            "default": "executable",
            "description": "The programming language that the model is written in. A list of available languages can be found :ref:`here <schema_table_model_subtype_rst>`.",
            "enum": [
                "R",
                "c",
                "c++",
                "cmake",
                "cpp",
                "cxx",
                "dummy",
                "executable",
                "fortran",
                "lpy",
                "make",
                "matlab",
                "mpi",
                "osr",
                "python",
                "r",
                "sbml",
                "timesync"
            ],
            "type": "string",
            "propertyOrder": 3
        },
        "logging_level": {
            "default": "",
            "description": "The level of logging messages that should be displayed by the model. Defaults to the logging level as determined by the configuration file and environment variables.",
            "type": "string"
        },
        "name": {
            "description": "Name used for component in log messages.",
            "type": "string",
            "propertyOrder": 0
        },
        "outputs": {
            "description": "Zero or more channels carrying output from the model.",
            "items": {
                "$ref": "#/definitions/comm"
            },
            "type": "array",
            "propertyOrder": 7
        },
        "outputs_in_inputs": {
            "description": "If True, outputs from wrapped model functions are passed by pointer as inputs for modification and the return value will be a flag. If False, outputs are limited to return values. Defaults to the value of the class attribute outputs_in_inputs.",
            "type": "boolean",
            "format": "checkbox"
        },
        "repository_url": {
            "description": "URL for the git repository containing the model source code. If provided, relative paths in the model YAML definition will be considered relative to the repository root directory.",
            "type": "string",
            "propertyOrder": 1
        },
        "strace_flags": {
            "default": [
                "-e",
                "trace=memory"
            ],
            "description": "Flags to pass to strace (or dtrace). Defaults to [].",
            "items": {
                "type": "string"
            },
            "type": "array"
        },
        "builddir": {
            "type": "string",
            "options": {
                "dependencies": {
                    "language": [
                        "make",
                        "cmake"
                    ]
                }
            }
        },
        "buildfile": {
            "type": "string",
            "options": {
                "dependencies": {
                    "language": [
                        "make",
                        "cmake"
                    ]
                }
            }
        },
        "compiler": {
            "description": "Command or path to executable that should be used to compile the model. If not provided, the compiler will be determined based on configuration options for the language (if present) and the registered compilers that are available on the current operating system.",
            "type": "string",
            "options": {
                "dependencies": {
                    "language": [
                        "make",
                        "c",
                        "c++",
                        "cpp",
                        "cxx",
                        "cmake",
                        "fortran"
                    ]
                }
            }
        },
        "compiler_flags": {
            "default": [],
            "description": "Flags that should be passed to the compiler during compilation. If nto provided, the compiler flags will be determined based on configuration options for the language (if present), the compiler defaults, and the default_compiler_flags class attribute.",
            "items": {
                "type": "string"
            },
            "type": "array",
            "options": {
                "dependencies": {
                    "language": [
                        "make",
                        "c",
                        "c++",
                        "cpp",
                        "cxx",
                        "cmake",
                        "fortran"
                    ]
                }
            }
        },
        "env_compiler": {
            "description": "Environment variable where the compiler executable should be stored for use within the Makefile. If not provided, this will be determined by the target language driver.",
            "type": "string",
            "options": {
                "dependencies": {
                    "language": [
                        "make",
                        "cmake"
                    ]
                }
            }
        },
        "env_compiler_flags": {
            "description": "Environment variable where the compiler flags should be stored (including those required to compile against the |yggdrasil| interface). If not provided, this will be determined by the target language driver.",
            "type": "string",
            "options": {
                "dependencies": {
                    "language": [
                        "make",
                        "cmake"
                    ]
                }
            }
        },
        "env_linker": {
            "description": "Environment variable where the linker executable should be stored for use within the Makefile. If not provided, this will be determined by the target language driver.",
            "type": "string",
            "options": {
                "dependencies": {
                    "language": [
                        "make",
                        "cmake"
                    ]
                }
            }
        },
        "env_linker_flags": {
            "description": "Environment variable where the linker flags should be stored (including those required to link against the |yggdrasil| interface). If not provided, this will be determined by the target language driver.",
            "type": "string",
            "options": {
                "dependencies": {
                    "language": [
                        "make",
                        "cmake"
                    ]
                }
            }
        },
        "linker": {
            "description": "Command or path to executable that should be used to link the model. If not provided, the linker will be determined based on configuration options for the language (if present) and the registered linkers that are available on the current operating system",
            "type": "string",
            "options": {
                "dependencies": {
                    "language": [
                        "make",
                        "c",
                        "c++",
                        "cpp",
                        "cxx",
                        "cmake",
                        "fortran"
                    ]
                }
            }
        },
        "linker_flags": {
            "default": [],
            "description": "Flags that should be passed to the linker during compilation. If nto provided, the linker flags will be determined based on configuration options for the language (if present), the linker defaults, and the default_linker_flags class attribute.",
            "items": {
                "type": "string"
            },
            "type": "array",
            "options": {
                "dependencies": {
                    "language": [
                        "make",
                        "c",
                        "c++",
                        "cpp",
                        "cxx",
                        "cmake",
                        "fortran"
                    ]
                }
            }
        },
        "makedir": {
            "description": "Directory where make should be invoked from if it is not the same as the directory containing the makefile. Defaults to directory containing makefile if provided, otherwise working_dir.",
            "type": "string",
            "options": {
                "dependencies": {
                    "language": [
                        "make"
                    ]
                }
            }
        },
        "makefile": {
            "default": "Makefile",
            "description": "Path to make file either absolute, relative to makedir (if provided), or relative to working_dir. Defaults to Makefile.",
            "type": "string",
            "options": {
                "dependencies": {
                    "language": [
                        "make"
                    ]
                }
            }
        },
        "source_files": {
            "default": [],
            "description": "Source files that should be compiled into an executable. Defaults to an empty list and the driver will search for a source file based on the model executable (the first model argument).",
            "items": {
                "type": "string"
            },
            "type": "array",
            "options": {
                "dependencies": {
                    "language": [
                        "make",
                        "c",
                        "c++",
                        "cpp",
                        "cxx",
                        "cmake",
                        "fortran"
                    ]
                }
            }
        },
        "target": {
            "description": "Make target that should be built to create the model executable. Defaults to None.",
            "type": "string",
            "options": {
                "dependencies": {
                    "language": [
                        "make",
                        "cmake"
                    ]
                }
            }
        },
        "target_compiler": {
            "description": "Compilation tool that should be used to compile the target language. Defaults to None and will be set based on the selected language driver.",
            "type": "string",
            "options": {
                "dependencies": {
                    "language": [
                        "make",
                        "cmake"
                    ]
                }
            }
        },
        "target_compiler_flags": {
            "description": "Compilation flags that should be passed to the target language compiler. Defaults to [].",
            "items": {
                "type": "string"
            },
            "type": "array",
            "options": {
                "dependencies": {
                    "language": [
                        "make",
                        "cmake"
                    ]
                }
            }
        },
        "target_language": {
            "description": "Language that the target is written in. Defaults to None and will be set based on the source files provided.",
            "type": "string",
            "options": {
                "dependencies": {
                    "language": [
                        "make",
                        "cmake"
                    ]
                }
            }
        },
        "target_linker": {
            "description": "Compilation tool that should be used to link the target language. Defaults to None and will be set based on the selected language driver.",
            "type": "string",
            "options": {
                "dependencies": {
                    "language": [
                        "make",
                        "cmake"
                    ]
                }
            }
        },
        "target_linker_flags": {
            "description": "Linking flags that should be passed to the target language linker. Defaults to [].",
            "items": {
                "type": "string"
            },
            "type": "array",
            "options": {
                "dependencies": {
                    "language": [
                        "make",
                        "cmake"
                    ]
                }
            }
        },
        "interpreter": {
            "description": "Name or path of interpreter executable that should be used to run the model. If not provided, the interpreter will be determined based on configuration options for the language (if present) and the default_interpreter class attribute.",
            "type": "string",
            "options": {
                "dependencies": {
                    "language": [
                        "python",
                        "lpy",
                        "matlab",
                        "R",
                        "r",
                        "timesync",
                        "sbml",
                        "dummy"
                    ]
                }
            }
        },
        "interpreter_flags": {
            "default": [],
            "description": "Flags that should be passed to the interpreter when running the model. If not provided, the flags are determined based on configuration options for the language (if present) and the default_interpreter_flags class attribute.",
            "items": {
                "type": "string"
            },
            "type": "array",
            "options": {
                "dependencies": {
                    "language": [
                        "python",
                        "lpy",
                        "matlab",
                        "R",
                        "r",
                        "timesync",
                        "sbml",
                        "dummy"
                    ]
                }
            }
        },
        "copy_xml_to_osr": {
            "default": false,
            "description": "If True, the XML file(s) will be copied to the OSR repository InputFiles direcitory before running. This is necessary if the XML file(s) use any of the files located there since OSR always assumes the included file paths are relative. Defaults to False.",
            "type": "boolean",
            "options": {
                "dependencies": {
                    "language": [
                        "osr"
                    ]
                }
            },
            "format": "checkbox"
        },
        "sync_vars_in": {
            "default": [],
            "description": "Variables that should be synchronized from other models. Defaults to [].",
            "items": {
                "type": "string"
            },
            "type": "array",
            "options": {
                "dependencies": {
                    "language": [
                        "osr"
                    ]
                }
            }
        },
        "sync_vars_out": {
            "default": [],
            "description": "Variables that should be synchronized to other models. Defaults to [].",
            "items": {
                "type": "string"
            },
            "type": "array",
            "options": {
                "dependencies": {
                    "language": [
                        "osr"
                    ]
                }
            }
        },
        "update_interval": {
            "additionalProperties": {
                "type": "number"
            },
            "default": {
                "timesync": 1.0
            },
            "description": "Max simulation interval at which synchronization should occur (in days). Defaults to 1.0 if not provided. If the XML input file loads additional export modules that output at a shorter rate, the existing table of values will be extrapolated.",
            "type": "object",
            "options": {
                "dependencies": {
                    "language": [
                        "osr"
                    ]
                }
            }
        },
        "use_symunit": {
            "default": false,
            "description": "If True, input/output variables with units will be represented in Matlab using symunit. Defaults to False.",
            "type": "boolean",
            "options": {
                "dependencies": {
                    "language": [
                        "matlab"
                    ]
                }
            },
            "format": "checkbox"
        },
        "integrator": {
            "default": "cvode",
            "description": "Name of integrator that should be used. Valid options include ['cvode', 'gillespie', 'rk4', 'rk45']. Defaults to 'cvode'.",
            "enum": [
                "cvode",
                "gillespie",
                "rk4",
                "rk45"
            ],
            "type": "string",
            "options": {
                "dependencies": {
                    "language": [
                        "sbml"
                    ]
                }
            }
        },
        "integrator_settings": {
            "default": {},
            "description": "Settings for the integrator. Defaults to empty dict.",
            "type": "object",
            "options": {
                "dependencies": {
                    "language": [
                        "sbml"
                    ]
                }
            }
        },
        "only_output_final_step": {
            "default": false,
            "description": "If True, only the final timestep is output. Defaults to False.",
            "type": "boolean",
            "options": {
                "dependencies": {
                    "language": [
                        "sbml"
                    ]
                }
            },
            "format": "checkbox"
        },
        "reset": {
            "default": false,
            "description": "If True, the simulation will be reset to it's initial values before each call (including the start time). Defaults to False.",
            "type": "boolean",
            "options": {
                "dependencies": {
                    "language": [
                        "sbml"
                    ]
                }
            },
            "format": "checkbox"
        },
        "selections": {
            "default": [],
            "description": "Variables to include in the output. Defaults to None and the time/floating selections will be returned.",
            "items": {
                "type": "string"
            },
            "type": "array",
            "options": {
                "dependencies": {
                    "language": [
                        "sbml"
                    ]
                }
            }
        },
        "skip_start_time": {
            "default": false,
            "description": "If True, the results for the initial time step will not be output. Defaults to False. This option is ignored if only_output_final_step is True.",
            "type": "boolean",
            "options": {
                "dependencies": {
                    "language": [
                        "sbml"
                    ]
                }
            },
            "format": "checkbox"
        },
        "start_time": {
            "default": 0.0,
            "description": "Time that simulation should be started from. If 'reset' is True, the start time will always be the provided value, otherwise, the start time will be the end of the previous call after the first call. Defaults to 0.0.",
            "type": "number",
            "options": {
                "dependencies": {
                    "language": [
                        "sbml"
                    ]
                }
            }
        },
        "steps": {
            "default": 1,
            "description": "Number of steps that should be output. Defaults to None.",
            "type": "integer",
            "options": {
                "dependencies": {
                    "language": [
                        "sbml"
                    ]
                }
            }
        },
        "configuration": {
            "default": "Release",
            "description": "Build type/configuration that should be built. Defaults to 'Release'.",
            "type": "string",
            "options": {
                "dependencies": {
                    "language": [
                        "cmake"
                    ]
                }
            }
        },
        "sourcedir": {
            "description": "Source directory to call cmake on. If not provided it is set to working_dir. This should be the directory containing the CMakeLists.txt file. It can be relative to working_dir or absolute.",
            "type": "string",
            "options": {
                "dependencies": {
                    "language": [
                        "cmake"
                    ]
                }
            }
        },
        "standard": {
            "default": "f2003",
            "description": "Fortran standard that should be used. Defaults to 'f2003'.",
            "enum": [
                "f2003",
                "f2008"
            ],
            "type": "string",
            "options": {
                "dependencies": {
                    "language": [
                        "fortran"
                    ]
                }
            }
        }
    },
    "dependencies": {
        "driver": [
            "args"
        ]
    }
}