{
    "title": "Model YAML Schema",
    "description": "Schema for yggdrasil model YAML input files.",
    "type": "object",
    "definitions": {
        "comm": {
            "additionalProperties": false,
            "properties": {
                "datatype": {
                    "$ref": "#/definitions/schema"
                },
                "vars": {
                    "allowSingular": true,
                    "description": "Names of variables to be sent/received by this comm. Defaults to [].",
                    "items": {
                        "allowSingular": "name",
                        "properties": {
                            "datatype": {
                                "$ref": "#/definitions/schema"
                            },
                            "name": {
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "filter": {
                    "$ref": "#/definitions/filter",
                    "description": "Filter that will be used to determine when messages should be sent/received. Ignored if not provided."
                },
                "outside_loop": {
                    "default": false,
                    "description": "If True, and the comm is an input/outputs to/from a model being wrapped. The receive/send calls for this comm will be outside the loop for the model. Defaults to False.",
                    "type": "boolean",
                    "format": "checkbox"
                },
                "transform": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/transform"
                    },
                    "description": "One or more transformations that will be applied to messages that are sent/received. Ignored if not provided."
                },
                "default_file": {
                    "$ref": "#/definitions/file",
                    "description": "Comm information for a file that input should be drawn from (for input comms) or that output should be sent to (for output comms) in the event that a yaml does not pair the comm with another model comm or a file."
                },
                "default_value": {
                    "description": "Value that should be returned in the event that a yaml does not pair the comm with another model comm or a file.",
                    "type": [
                        "number",
                        "string",
                        "boolean",
                        "object",
                        "array",
                        "null"
                    ]
                },
                "name": {
                    "description": "Name used for component in log messages.",
                    "pattern": "^([A-Za-z0-9-_]+:)?[A-Za-z0-9-_]+(::[A-Za-z0-9-_]+)?$",
                    "type": "string",
                    "propertyOrder": 0
                },
                "format_str": {
                    "description": "String that should be used to format/parse messages. Default to None.",
                    "type": "string"
                },
                "working_dir": {
                    "description": "Working directory. If not provided, the current working directory is used.",
                    "type": "string"
                },
                "count": {
                    "default": 1,
                    "type": "integer",
                    "options": {
                        "dependencies": {
                            "commtype": [
                                "value"
                            ]
                        }
                    }
                }
            },
            "required": [
                "datatype",
                "name"
            ],
            "type": "object",
            "dependencies": {
                "driver": [
                    "args"
                ]
            }
        },
        "comm-subtype-base": {
            "additionalProperties": false,
            "allowSingular": "name",
            "description": "Base schema for all subtypes of comm components.",
            "properties": {
                "dont_copy": {
                    "default": false,
                    "description": "If True, the comm will not be duplicated in the even a model is duplicated via the 'copies' parameter. Defaults to False except for in the case that a model is wrapped and the comm is inside the loop or that a model is a RPC input to a model server.",
                    "type": "boolean",
                    "format": "checkbox"
                },
                "datatype": {
                    "$ref": "#/definitions/schema"
                },
                "is_default": {
                    "default": false,
                    "description": "If True, this comm was created to handle all input/output variables to/from a model. Defaults to False. This variable is used internally and should not be set explicitly in the YAML.",
                    "type": "boolean",
                    "format": "checkbox"
                },
                "for_service": {
                    "default": false,
                    "description": "If True, this comm bridges the gap to an integration running as a service, possibly on a remote machine. Defaults to False.",
                    "type": "boolean",
                    "format": "checkbox"
                },
                "vars": {
                    "allowSingular": true,
                    "description": "Names of variables to be sent/received by this comm. Defaults to [].",
                    "items": {
                        "allowSingular": "name",
                        "properties": {
                            "datatype": {
                                "$ref": "#/definitions/schema"
                            },
                            "name": {
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "length_map": {
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map from pointer variable names to the names of variables where their length will be stored. Defaults to {}.",
                    "type": "object"
                },
                "filter": {
                    "$ref": "#/definitions/filter",
                    "description": "Filter that will be used to determine when messages should be sent/received. Ignored if not provided."
                },
                "address": {
                    "description": "Communication info. Default to None and address is taken from the environment variable.",
                    "type": "string"
                },
                "outside_loop": {
                    "default": false,
                    "description": "If True, and the comm is an input/outputs to/from a model being wrapped. The receive/send calls for this comm will be outside the loop for the model. Defaults to False.",
                    "type": "boolean",
                    "format": "checkbox"
                },
                "transform": {
                    "aliases": [
                        "recv_converter",
                        "send_converter",
                        "transforms",
                        "translator",
                        "translators"
                    ],
                    "allowSingular": true,
                    "description": "One or more transformations that will be applied to messages that are sent/received. Ignored if not provided.",
                    "items": {
                        "anyOf": [
                            {
                                "$ref": "#/definitions/transform"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "type": "array"
                },
                "default_file": {
                    "$ref": "#/definitions/file",
                    "description": "Comm information for a file that input should be drawn from (for input comms) or that output should be sent to (for output comms) in the event that a yaml does not pair the comm with another model comm or a file."
                },
                "serializer": {
                    "$ref": "#/definitions/serializer",
                    "description": "Class with serialize and deserialize methods that should be used to process sent and received messages or a dictionary describing a serializer that obeys the serializer schema."
                },
                "default_value": {
                    "description": "Value that should be returned in the event that a yaml does not pair the comm with another model comm or a file.",
                    "type": [
                        "number",
                        "string",
                        "boolean",
                        "object",
                        "array",
                        "null"
                    ]
                },
                "commtype": {
                    "default": "default",
                    "description": "Communication mechanism that should be used.",
                    "enum": [
                        "buffer",
                        "default",
                        "ipc",
                        "mpi",
                        "rest",
                        "rmq",
                        "rmq_async",
                        "value",
                        "zmq"
                    ],
                    "type": "string"
                },
                "name": {
                    "description": "Name used for component in log messages.",
                    "pattern": "^([A-Za-z0-9-_]+:)?[A-Za-z0-9-_]+(::[A-Za-z0-9-_]+)?$",
                    "type": "string"
                },
                "format_str": {
                    "description": "String that should be used to format/parse messages. Default to None.",
                    "type": "string"
                },
                "working_dir": {
                    "description": "Working directory. If not provided, the current working directory is used.",
                    "type": "string"
                },
                "client_id": {
                    "type": "string"
                },
                "cookies": {
                    "description": "Cookies to send to the server. Defaults to None and is ignored.",
                    "type": "object"
                },
                "host": {
                    "default": "http://localhost:{port}",
                    "type": "string"
                },
                "params": {
                    "description": "Parameters that should be passed via URL. Defaults to None and is ignored.",
                    "type": "object"
                },
                "port": {
                    "type": "integer"
                },
                "count": {
                    "default": 1,
                    "type": "integer"
                }
            },
            "required": [
                "datatype",
                "name"
            ],
            "type": "object",
            "pushProperties": {
                "$properties/datatype": true,
                "$properties/serializer": true
            },
            "dependencies": {
                "driver": [
                    "args"
                ]
            }
        },
        "comm-subtype-default": {
            "additionalProperties": true,
            "allowSingular": "name",
            "description": "Schema for comm component ['default'] subtype.",
            "properties": {
                "commtype": {
                    "default": "default",
                    "description": "Communication mechanism selected based on the current platform.",
                    "enum": [
                        "default"
                    ],
                    "type": "string"
                },
                "name": {
                    "description": "Name used for component in log messages.",
                    "pattern": "^([A-Za-z0-9-_]+:)?[A-Za-z0-9-_]+(::[A-Za-z0-9-_]+)?$",
                    "type": "string"
                }
            },
            "required": [
                "commtype"
            ],
            "type": "object"
        },
        "comm-subtype-buffer": {
            "additionalProperties": true,
            "allowSingular": "name",
            "description": "Schema for comm component ['buffer'] subtype.",
            "properties": {
                "commtype": {
                    "default": "buffer",
                    "description": "Communication mechanism that should be used.",
                    "enum": [
                        "buffer"
                    ],
                    "type": "string"
                },
                "name": {
                    "description": "Name used for component in log messages.",
                    "pattern": "^([A-Za-z0-9-_]+:)?[A-Za-z0-9-_]+(::[A-Za-z0-9-_]+)?$",
                    "type": "string"
                }
            },
            "required": [
                "commtype"
            ],
            "type": "object"
        },
        "comm-subtype-ipc": {
            "additionalProperties": true,
            "allowSingular": "name",
            "description": "Schema for comm component ['ipc'] subtype.",
            "properties": {
                "commtype": {
                    "default": "ipc",
                    "description": "Interprocess communication (IPC) queue.",
                    "enum": [
                        "ipc"
                    ],
                    "type": "string"
                },
                "name": {
                    "description": "Name used for component in log messages.",
                    "pattern": "^([A-Za-z0-9-_]+:)?[A-Za-z0-9-_]+(::[A-Za-z0-9-_]+)?$",
                    "type": "string"
                }
            },
            "required": [
                "commtype"
            ],
            "type": "object"
        },
        "comm-subtype-mpi": {
            "additionalProperties": true,
            "allowSingular": "name",
            "description": "Schema for comm component ['mpi'] subtype.",
            "properties": {
                "commtype": {
                    "default": "mpi",
                    "description": "MPI communicator.",
                    "enum": [
                        "mpi"
                    ],
                    "type": "string"
                },
                "name": {
                    "description": "Name used for component in log messages.",
                    "pattern": "^([A-Za-z0-9-_]+:)?[A-Za-z0-9-_]+(::[A-Za-z0-9-_]+)?$",
                    "type": "string"
                }
            },
            "required": [
                "commtype"
            ],
            "type": "object"
        },
        "comm-subtype-rest": {
            "additionalProperties": true,
            "allowSingular": "name",
            "description": "Schema for comm component ['rest'] subtype.",
            "properties": {
                "commtype": {
                    "default": "rest",
                    "description": "RESTful API.",
                    "enum": [
                        "rest"
                    ],
                    "type": "string"
                },
                "client_id": {
                    "type": "string"
                },
                "cookies": {
                    "description": "Cookies to send to the server. Defaults to None and is ignored.",
                    "type": "object"
                },
                "host": {
                    "default": "http://localhost:{port}",
                    "type": "string"
                },
                "name": {
                    "description": "Name used for component in log messages.",
                    "pattern": "^([A-Za-z0-9-_]+:)?[A-Za-z0-9-_]+(::[A-Za-z0-9-_]+)?$",
                    "type": "string"
                },
                "params": {
                    "description": "Parameters that should be passed via URL. Defaults to None and is ignored.",
                    "type": "object"
                },
                "port": {
                    "type": "integer"
                }
            },
            "required": [
                "commtype"
            ],
            "type": "object"
        },
        "comm-subtype-rmq_async": {
            "additionalProperties": true,
            "allowSingular": "name",
            "description": "Schema for comm component ['rmq_async'] subtype.",
            "properties": {
                "commtype": {
                    "default": "rmq_async",
                    "description": "Asynchronous RabbitMQ connection.",
                    "enum": [
                        "rmq_async"
                    ],
                    "type": "string"
                },
                "name": {
                    "description": "Name used for component in log messages.",
                    "pattern": "^([A-Za-z0-9-_]+:)?[A-Za-z0-9-_]+(::[A-Za-z0-9-_]+)?$",
                    "type": "string"
                }
            },
            "required": [
                "commtype"
            ],
            "type": "object"
        },
        "comm-subtype-rmq": {
            "additionalProperties": true,
            "allowSingular": "name",
            "description": "Schema for comm component ['rmq'] subtype.",
            "properties": {
                "commtype": {
                    "default": "rmq",
                    "description": "RabbitMQ connection.",
                    "enum": [
                        "rmq"
                    ],
                    "type": "string"
                },
                "name": {
                    "description": "Name used for component in log messages.",
                    "pattern": "^([A-Za-z0-9-_]+:)?[A-Za-z0-9-_]+(::[A-Za-z0-9-_]+)?$",
                    "type": "string"
                }
            },
            "required": [
                "commtype"
            ],
            "type": "object"
        },
        "comm-subtype-value": {
            "additionalProperties": true,
            "allowSingular": "name",
            "description": "Schema for comm component ['value'] subtype.",
            "properties": {
                "commtype": {
                    "default": "value",
                    "description": "Constant value.",
                    "enum": [
                        "value"
                    ],
                    "type": "string"
                },
                "count": {
                    "default": 1,
                    "type": "integer"
                },
                "name": {
                    "description": "Name used for component in log messages.",
                    "pattern": "^([A-Za-z0-9-_]+:)?[A-Za-z0-9-_]+(::[A-Za-z0-9-_]+)?$",
                    "type": "string"
                }
            },
            "required": [
                "commtype"
            ],
            "type": "object"
        },
        "comm-subtype-zmq": {
            "additionalProperties": true,
            "allowSingular": "name",
            "description": "Schema for comm component ['zmq'] subtype.",
            "properties": {
                "commtype": {
                    "default": "zmq",
                    "description": "ZeroMQ socket.",
                    "enum": [
                        "zmq"
                    ],
                    "type": "string"
                },
                "name": {
                    "description": "Name used for component in log messages.",
                    "pattern": "^([A-Za-z0-9-_]+:)?[A-Za-z0-9-_]+(::[A-Za-z0-9-_]+)?$",
                    "type": "string"
                }
            },
            "required": [
                "commtype"
            ],
            "type": "object"
        },
        "connection-subtype-base": {
            "additionalProperties": false,
            "description": "Base schema for all subtypes of connection components.",
            "properties": {
                "input_pattern": {
                    "default": "cycle",
                    "description": "The communication pattern that should be used to handle incoming messages when there is more than one input communicators present. Defaults to 'cycle'. Options include: 'cycle': Receive from the next available input communicator. 'gather': Receive lists of messages with one element from each communicator where a message is only returned when there is a message from each.",
                    "enum": [
                        "cycle",
                        "gather"
                    ],
                    "type": "string"
                },
                "outputs": {
                    "aliases": [
                        "output",
                        "to",
                        "output_file",
                        "output_files"
                    ],
                    "allowSingular": true,
                    "description": "One or more name(s) of model input channel(s) and/or new channel/file objects that the connection should send messages to. A full description of file entries and the available options can be found :ref:`here<yaml_file_options>`.",
                    "items": {
                        "anyOf": [
                            {
                                "$ref": "#/definitions/comm"
                            },
                            {
                                "$ref": "#/definitions/file"
                            }
                        ]
                    },
                    "minItems": 1,
                    "type": "array"
                },
                "inputs": {
                    "aliases": [
                        "input",
                        "from",
                        "input_file",
                        "input_files"
                    ],
                    "allowSingular": true,
                    "description": "One or more name(s) of model output channel(s) and/or new channel/file objects that the connection should receive messages from. A full description of file entries and the available options can be found :ref:`here<yaml_file_options>`.",
                    "items": {
                        "anyOf": [
                            {
                                "$ref": "#/definitions/comm"
                            },
                            {
                                "$ref": "#/definitions/file"
                            }
                        ]
                    },
                    "minItems": 1,
                    "type": "array"
                },
                "working_dir": {
                    "description": "Working directory. If not provided, the current working directory is used.",
                    "type": "string"
                },
                "transform": {
                    "aliases": [
                        "transforms",
                        "translator",
                        "translators"
                    ],
                    "allowSingular": true,
                    "description": "Function or string specifying function that should be used to translate messages from the input communicator before passing them to the output communicator. If a string, the format should be \"<package.module>:<function>\" so that <function> can be imported from <package>. Defaults to None and messages are passed directly. This can also be a list of functions/strings that will be called on the messages in the order they are provided.",
                    "items": {
                        "anyOf": [
                            {
                                "$ref": "#/definitions/transform"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "type": "array"
                },
                "connection_type": {
                    "description": "Connection between one or more comms/files and one or more comms/files.",
                    "enum": [
                        "connection",
                        "file_input",
                        "file_output",
                        "input",
                        "output",
                        "rpc_request",
                        "rpc_response"
                    ],
                    "type": "string"
                },
                "write_meth": {
                    "deprecated": true,
                    "enum": [
                        "all",
                        "line",
                        "table_array",
                        "ascii",
                        "binary",
                        "json",
                        "map",
                        "mat",
                        "netcdf",
                        "obj",
                        "pandas",
                        "pickle",
                        "ply",
                        "table",
                        "wofost",
                        "yaml"
                    ],
                    "type": "string"
                },
                "onexit": {
                    "description": "Class method that should be called when a model that the connection interacts with exits, but before the connection driver is shut down. Defaults to None.",
                    "type": "string"
                },
                "output_pattern": {
                    "default": "broadcast",
                    "description": "The communication pattern that should be used to handling outgoing messages when there is more than one output communicator present. Defaults to 'broadcast'. Options include: 'cycle': Rotate through output comms, sending one message to each. 'broadcast': Send the same message to each comm. 'scatter': Send part of message (must be a list) to each comm.",
                    "enum": [
                        "cycle",
                        "broadcast",
                        "scatter"
                    ],
                    "type": "string"
                },
                "read_meth": {
                    "deprecated": true,
                    "enum": [
                        "all",
                        "line",
                        "table_array",
                        "ascii",
                        "binary",
                        "json",
                        "map",
                        "mat",
                        "netcdf",
                        "obj",
                        "pandas",
                        "pickle",
                        "ply",
                        "table",
                        "wofost",
                        "yaml"
                    ],
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "inputs",
                "outputs"
            ],
            "pushProperties": {
                "!$properties/inputs/items": [
                    "transform",
                    "onexit",
                    "read_meth",
                    "write_meth"
                ],
                "!$properties/outputs/items/anyOf/1": [
                    "transform",
                    "onexit",
                    "read_meth",
                    "write_meth"
                ],
                "$properties/inputs/items/anyOf/1/allOf/1/anyOf/0/properties/serializer": true,
                "$properties/outputs/items/anyOf/1/allOf/1/anyOf/0/properties/serializer": true
            },
            "dependencies": {
                "driver": [
                    "args"
                ]
            }
        },
        "connection-subtype-connection": {
            "additionalProperties": true,
            "description": "Schema for connection component ['connection'] subtype.",
            "properties": {
                "connection_type": {
                    "default": "connection",
                    "description": "Connection between one or more comms/files and one or more comms/files.",
                    "enum": [
                        "connection"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "connection-subtype-file_input": {
            "additionalProperties": true,
            "description": "Schema for connection component ['file_input'] subtype.",
            "properties": {
                "connection_type": {
                    "default": "file_input",
                    "description": "Connection between a file and a model.",
                    "enum": [
                        "file_input"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "connection-subtype-file_output": {
            "additionalProperties": true,
            "description": "Schema for connection component ['file_output'] subtype.",
            "properties": {
                "connection_type": {
                    "default": "file_output",
                    "description": "Connection between a model and a file.",
                    "enum": [
                        "file_output"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "connection-subtype-input": {
            "additionalProperties": true,
            "description": "Schema for connection component ['input'] subtype.",
            "properties": {
                "connection_type": {
                    "default": "input",
                    "description": "Connection between one or more comms/files and a model.",
                    "enum": [
                        "input"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "connection-subtype-output": {
            "additionalProperties": true,
            "description": "Schema for connection component ['output'] subtype.",
            "properties": {
                "connection_type": {
                    "default": "output",
                    "description": "Connection between a model and one or more comms/files.",
                    "enum": [
                        "output"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "connection-subtype-rpc_request": {
            "additionalProperties": true,
            "description": "Schema for connection component ['rpc_request'] subtype.",
            "properties": {
                "connection_type": {
                    "default": "rpc_request",
                    "description": "Connection between one or more comms/files and one or more comms/files.",
                    "enum": [
                        "rpc_request"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "connection-subtype-rpc_response": {
            "additionalProperties": true,
            "description": "Schema for connection component ['rpc_response'] subtype.",
            "properties": {
                "connection_type": {
                    "default": "rpc_response",
                    "description": "Connection between one or more comms/files and one or more comms/files.",
                    "enum": [
                        "rpc_response"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "file": {
            "additionalProperties": false,
            "properties": {
                "count": {
                    "default": 0,
                    "description": "When reading a file, read the file this many of times. Defaults to 0.",
                    "type": "integer"
                },
                "vars": {
                    "allowSingular": true,
                    "description": "Names of variables to be sent/received by this comm. Defaults to [].",
                    "items": {
                        "allowSingular": "name",
                        "properties": {
                            "datatype": {
                                "$ref": "#/definitions/schema"
                            },
                            "name": {
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "filter": {
                    "$ref": "#/definitions/filter",
                    "description": "Filter that will be used to determine when messages should be sent/received. Ignored if not provided."
                },
                "filetype": {
                    "default": "binary",
                    "description": "The type of file that will be read from or written to.",
                    "enum": [
                        "ascii",
                        "bam",
                        "bcf",
                        "binary",
                        "bmp",
                        "cabo",
                        "cram",
                        "eps",
                        "excel",
                        "fasta",
                        "fastq",
                        "gif",
                        "jpeg",
                        "json",
                        "map",
                        "mat",
                        "netcdf",
                        "obj",
                        "pandas",
                        "pickle",
                        "ply",
                        "png",
                        "sam",
                        "table",
                        "tiff",
                        "vcf",
                        "yaml"
                    ],
                    "type": "string"
                },
                "append": {
                    "default": false,
                    "description": "If True and writing, file is openned in append mode. If True and reading, file is kept open even if the end of the file is reached to allow for another process to write to the file in append mode. Defaults to False.",
                    "type": "boolean",
                    "format": "checkbox"
                },
                "transform": {
                    "aliases": [
                        "recv_converter",
                        "send_converter",
                        "transforms",
                        "translator",
                        "translators"
                    ],
                    "allowSingular": true,
                    "description": "One or more transformations that will be applied to messages that are sent/received. Ignored if not provided.",
                    "items": {
                        "anyOf": [
                            {
                                "$ref": "#/definitions/transform"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "type": "array"
                },
                "is_series": {
                    "default": false,
                    "description": "If True, input/output will be done to a series of files. If reading, each file will be processed until the end is reached. If writing, each output will be to a new file in the series. The addressed is assumed to contain a format for the index of the file. Defaults to False.",
                    "type": "boolean",
                    "format": "checkbox"
                },
                "name": {
                    "description": "Path to a file in the model repository",
                    "pattern": "^([A-Za-z0-9-_]+:)?\\.?[A-Za-z0-9-_\\\\\\/]+\\.[A-Za-z0-9-_]+(::[A-Za-z0-9-_]+)?$",
                    "type": "string"
                },
                "format_str": {
                    "description": "String that should be used to format/parse messages. Default to None.",
                    "type": "string"
                },
                "comment": {
                    "default": "# ",
                    "description": "One or more characters indicating a comment. Defaults to '# '.",
                    "type": "string",
                    "options": {
                        "dependencies": {
                            "filetype": [
                                "ascii",
                                "map",
                                "table",
                                "cabo",
                                "json",
                                "mat",
                                "obj",
                                "pandas",
                                "pickle",
                                "ply",
                                "yaml"
                            ]
                        }
                    }
                },
                "newline": {
                    "default": "\n",
                    "description": "One or more characters indicating a newline. Defaults to '\\n'.",
                    "type": "string",
                    "options": {
                        "dependencies": {
                            "filetype": [
                                "ascii",
                                "map",
                                "table",
                                "cabo",
                                "json",
                                "mat",
                                "obj",
                                "pandas",
                                "pickle",
                                "ply",
                                "yaml"
                            ]
                        }
                    }
                },
                "delimiter": {
                    "default": "\t",
                    "description": "Delimiter that should be used to separate name/value pairs in the map. Defaults to \\t.",
                    "type": "string",
                    "options": {
                        "dependencies": {
                            "filetype": [
                                "map",
                                "table",
                                "cabo",
                                "pandas"
                            ]
                        }
                    }
                },
                "use_astropy": {
                    "default": false,
                    "description": "If True, the astropy package will be used to serialize/deserialize table. Defaults to False.",
                    "type": "boolean",
                    "options": {
                        "dependencies": {
                            "filetype": [
                                "table",
                                "pandas"
                            ]
                        }
                    },
                    "format": "checkbox"
                },
                "flush_on_write": {
                    "default": false,
                    "description": "If true, the file will be flushed when written to.",
                    "type": "boolean",
                    "options": {
                        "dependencies": {
                            "filetype": [
                                "bam",
                                "bcf",
                                "cram",
                                "sam",
                                "vcf"
                            ]
                        }
                    },
                    "format": "checkbox"
                },
                "header": {
                    "description": "Header defining sequence identifiers. A header is required for writing SAM, BAM, and CRAM files.",
                    "type": "object",
                    "options": {
                        "dependencies": {
                            "filetype": [
                                "bam",
                                "bcf",
                                "cram",
                                "sam",
                                "vcf"
                            ]
                        }
                    }
                },
                "index": {
                    "description": "Path to file containing index if different from the standard naming convention for BAM and CRAM files.",
                    "type": "string",
                    "options": {
                        "dependencies": {
                            "filetype": [
                                "bam",
                                "bcf",
                                "cram",
                                "sam",
                                "vcf"
                            ]
                        }
                    }
                },
                "regions": {
                    "default": [],
                    "description": "Region parameters (reference name, start, and end) defining the regions that should be read. If not provided, all regions will be read.",
                    "items": {
                        "properties": {
                            "end": {
                                "type": "integer"
                            },
                            "name": {
                                "type": "string"
                            },
                            "start": {
                                "type": "integer"
                            }
                        },
                        "required": [
                            "name"
                        ],
                        "type": "object"
                    },
                    "type": "array",
                    "options": {
                        "dependencies": {
                            "filetype": [
                                "bam",
                                "bcf",
                                "cram",
                                "sam",
                                "vcf"
                            ]
                        }
                    }
                },
                "columns": {
                    "description": "Names of columns to read/write.",
                    "items": {
                        "type": [
                            "string",
                            "integer"
                        ]
                    },
                    "type": "array",
                    "options": {
                        "dependencies": {
                            "filetype": [
                                "excel"
                            ]
                        }
                    }
                },
                "endcol": {
                    "description": "Column to stop read at (non-inclusive).",
                    "type": "integer",
                    "options": {
                        "dependencies": {
                            "filetype": [
                                "excel"
                            ]
                        }
                    }
                },
                "endrow": {
                    "description": "Row to stop read at (non-inclusive).",
                    "type": "integer",
                    "options": {
                        "dependencies": {
                            "filetype": [
                                "excel"
                            ]
                        }
                    }
                },
                "sheet_template": {
                    "description": "Format string that can be completed with % operator to generate names for each subsequent sheet when writing.",
                    "type": "string",
                    "options": {
                        "dependencies": {
                            "filetype": [
                                "excel"
                            ]
                        }
                    }
                },
                "sheets": {
                    "allowSingular": true,
                    "default": [],
                    "description": "Name(s) of one more more sheets that should be read/written. If not provided during read, all sheets will be read.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "options": {
                        "dependencies": {
                            "filetype": [
                                "excel"
                            ]
                        }
                    }
                },
                "startcol": {
                    "default": 0,
                    "description": "Column to start read/write at.",
                    "type": "integer",
                    "options": {
                        "dependencies": {
                            "filetype": [
                                "excel"
                            ]
                        }
                    }
                },
                "startrow": {
                    "default": 0,
                    "description": "Row to start read/write at.",
                    "type": "integer",
                    "options": {
                        "dependencies": {
                            "filetype": [
                                "excel"
                            ]
                        }
                    }
                },
                "str_as_bytes": {
                    "default": false,
                    "description": "If true, strings in columns are read as bytes",
                    "type": "boolean",
                    "options": {
                        "dependencies": {
                            "filetype": [
                                "excel",
                                "pandas"
                            ]
                        }
                    },
                    "format": "checkbox"
                },
                "piecemeal": {
                    "default": false,
                    "description": "If possible read the the file incrementally in multiple messages. This should be used for large files that cannot be loaded into memory.",
                    "type": "boolean",
                    "options": {
                        "dependencies": {
                            "filetype": [
                                "fasta",
                                "fastq"
                            ]
                        }
                    },
                    "format": "checkbox"
                },
                "record_ids": {
                    "description": "IDs of records to read/write. Other records will be ignored.",
                    "type": "array",
                    "options": {
                        "dependencies": {
                            "filetype": [
                                "fasta",
                                "fastq"
                            ]
                        }
                    }
                },
                "indent": {
                    "default": "\t",
                    "description": "String or number of spaces that should be used to indent each level within the seiralized structure. Defaults to '\\t'.",
                    "type": [
                        "string",
                        "integer"
                    ],
                    "options": {
                        "dependencies": {
                            "filetype": [
                                "json",
                                "yaml"
                            ]
                        }
                    }
                },
                "sort_keys": {
                    "default": true,
                    "description": "If True, the serialization of dictionaries will be in key sorted order. Defaults to True.",
                    "type": "boolean",
                    "options": {
                        "dependencies": {
                            "filetype": [
                                "json"
                            ]
                        }
                    },
                    "format": "checkbox"
                },
                "read_attributes": {
                    "default": false,
                    "description": "If True, the attributes are read in as well as the variables. Defaults to False.",
                    "type": "boolean",
                    "options": {
                        "dependencies": {
                            "filetype": [
                                "netcdf"
                            ]
                        }
                    },
                    "format": "checkbox"
                },
                "variables": {
                    "description": "List of variables to read in. If not provided, all variables will be read.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "options": {
                        "dependencies": {
                            "filetype": [
                                "netcdf"
                            ]
                        }
                    }
                },
                "version": {
                    "default": 1,
                    "description": "Version of netCDF format that should be used. Defaults to 1. Options are 1 (classic format) and 2 (64-bit offset format).",
                    "enum": [
                        1,
                        2
                    ],
                    "type": "integer",
                    "options": {
                        "dependencies": {
                            "filetype": [
                                "netcdf"
                            ]
                        }
                    }
                },
                "prune_duplicates": {
                    "default": true,
                    "description": "If True, serialized meshes in array format will be pruned of duplicates when being normalized into a Ply object. If False, duplicates will not be pruned. Defaults to True.",
                    "type": "boolean",
                    "options": {
                        "dependencies": {
                            "filetype": [
                                "obj",
                                "ply"
                            ]
                        }
                    },
                    "format": "checkbox"
                },
                "no_header": {
                    "default": false,
                    "description": "If True, headers will not be read or serialized from/to tables. Defaults to False.",
                    "type": "boolean",
                    "options": {
                        "dependencies": {
                            "filetype": [
                                "pandas"
                            ]
                        }
                    },
                    "format": "checkbox"
                },
                "default_flow_style": {
                    "default": false,
                    "description": "If True, nested collections will be serialized in the block style. If False, they will always be serialized in the flow style. See `PyYAML Documentation <https://pyyaml.org/wiki/PyYAMLDocumentation>`_.",
                    "type": "boolean",
                    "options": {
                        "dependencies": {
                            "filetype": [
                                "yaml"
                            ]
                        }
                    },
                    "format": "checkbox"
                },
                "encoding": {
                    "default": "utf-8",
                    "description": "Encoding that should be used to serialize the object. Defaults to 'utf-8'.",
                    "type": "string",
                    "options": {
                        "dependencies": {
                            "filetype": [
                                "yaml"
                            ]
                        }
                    }
                },
                "serializer": {
                    "$ref": "#/definitions/serializer"
                }
            },
            "required": [
                "name",
                "filetype"
            ],
            "type": "object",
            "dependencies": {
                "driver": [
                    "args"
                ]
            }
        },
        "file-subtype-base": {
            "additionalProperties": false,
            "allowSingular": "name",
            "description": "Base schema for all subtypes of file components.",
            "properties": {
                "wait_for_creation": {
                    "default": 0.0,
                    "description": "Time (in seconds) that should be waited before opening for the file to be created if it dosn't exist. Defaults to 0 s and file will attempt to be opened immediately.",
                    "type": "number"
                },
                "count": {
                    "default": 0,
                    "description": "When reading a file, read the file this many of times. Defaults to 0.",
                    "type": "integer"
                },
                "for_service": {
                    "default": false,
                    "description": "If True, this comm bridges the gap to an integration running as a service, possibly on a remote machine. Defaults to False.",
                    "type": "boolean",
                    "format": "checkbox"
                },
                "vars": {
                    "allowSingular": true,
                    "description": "Names of variables to be sent/received by this comm. Defaults to [].",
                    "items": {
                        "allowSingular": "name",
                        "properties": {
                            "datatype": {
                                "$ref": "#/definitions/schema"
                            },
                            "name": {
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "length_map": {
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map from pointer variable names to the names of variables where their length will be stored. Defaults to {}.",
                    "type": "object"
                },
                "in_temp": {
                    "default": false,
                    "description": "If True, the path will be considered relative to the platform temporary directory. Defaults to False.",
                    "type": "boolean",
                    "format": "checkbox"
                },
                "filter": {
                    "$ref": "#/definitions/filter",
                    "description": "Filter that will be used to determine when messages should be sent/received. Ignored if not provided."
                },
                "filetype": {
                    "default": "binary",
                    "description": "The type of file that will be read from or written to.",
                    "enum": [
                        "ascii",
                        "bam",
                        "bcf",
                        "binary",
                        "bmp",
                        "cabo",
                        "cram",
                        "eps",
                        "excel",
                        "fasta",
                        "fastq",
                        "gif",
                        "jpeg",
                        "json",
                        "map",
                        "mat",
                        "netcdf",
                        "obj",
                        "pandas",
                        "pickle",
                        "ply",
                        "png",
                        "sam",
                        "table",
                        "tiff",
                        "vcf",
                        "yaml"
                    ],
                    "type": "string"
                },
                "append": {
                    "default": false,
                    "description": "If True and writing, file is openned in append mode. If True and reading, file is kept open even if the end of the file is reached to allow for another process to write to the file in append mode. Defaults to False.",
                    "type": "boolean",
                    "format": "checkbox"
                },
                "address": {
                    "description": "Communication info. Default to None and address is taken from the environment variable.",
                    "type": "string"
                },
                "transform": {
                    "aliases": [
                        "recv_converter",
                        "send_converter",
                        "transforms",
                        "translator",
                        "translators"
                    ],
                    "allowSingular": true,
                    "description": "One or more transformations that will be applied to messages that are sent/received. Ignored if not provided.",
                    "items": {
                        "anyOf": [
                            {
                                "$ref": "#/definitions/transform"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "type": "array"
                },
                "is_series": {
                    "default": false,
                    "description": "If True, input/output will be done to a series of files. If reading, each file will be processed until the end is reached. If writing, each output will be to a new file in the series. The addressed is assumed to contain a format for the index of the file. Defaults to False.",
                    "type": "boolean",
                    "format": "checkbox"
                },
                "name": {
                    "description": "Name used for component in log messages.",
                    "pattern": "^([A-Za-z0-9-_]+:)?\\.?[A-Za-z0-9-_\\\\\\/]+\\.[A-Za-z0-9-_]+(::[A-Za-z0-9-_]+)?$",
                    "type": "string"
                },
                "format_str": {
                    "description": "String that should be used to format/parse messages. Default to None.",
                    "type": "string"
                },
                "working_dir": {
                    "description": "Working directory. If not provided, the current working directory is used.",
                    "type": "string"
                },
                "read_meth": {
                    "deprecated": true,
                    "description": "Method that should be used to read data from the file. Defaults to 'read'. Ignored if direction is 'send'.",
                    "enum": [
                        "read",
                        "readline"
                    ],
                    "type": "string"
                },
                "serializer": {
                    "allOf": [
                        {
                            "default": {}
                        },
                        {
                            "$ref": "#/definitions/serializer"
                        }
                    ],
                    "description": "Class with serialize and deserialize methods that should be used to process sent and received messages or a dictionary describing a serializer that obeys the serializer schema."
                },
                "comment": {
                    "default": "# ",
                    "description": "One or more characters indicating a comment. Defaults to '# '.",
                    "type": "string"
                },
                "datatype": {
                    "$ref": "#/definitions/schema"
                },
                "newline": {
                    "default": "\n",
                    "description": "One or more characters indicating a newline. Defaults to '\\n'.",
                    "type": "string"
                },
                "delimiter": {
                    "default": "\t",
                    "description": "Delimiter that should be used to separate name/value pairs in the map. Defaults to \\t.",
                    "type": "string"
                },
                "use_astropy": {
                    "default": false,
                    "description": "If True, the astropy package will be used to serialize/deserialize table. Defaults to False.",
                    "type": "boolean",
                    "format": "checkbox"
                },
                "flush_on_write": {
                    "default": false,
                    "description": "If true, the file will be flushed when written to.",
                    "type": "boolean",
                    "format": "checkbox"
                },
                "header": {
                    "description": "Header defining sequence identifiers. A header is required for writing SAM, BAM, and CRAM files.",
                    "type": "object"
                },
                "index": {
                    "description": "Path to file containing index if different from the standard naming convention for BAM and CRAM files.",
                    "type": "string"
                },
                "regions": {
                    "default": [],
                    "description": "Region parameters (reference name, start, and end) defining the regions that should be read. If not provided, all regions will be read.",
                    "items": {
                        "properties": {
                            "end": {
                                "type": "integer"
                            },
                            "name": {
                                "type": "string"
                            },
                            "start": {
                                "type": "integer"
                            }
                        },
                        "required": [
                            "name"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "params": {
                    "default": {},
                    "description": "Parameters that should be based to the PIL.Image save/open command",
                    "type": "object"
                },
                "columns": {
                    "description": "Names of columns to read/write.",
                    "items": {
                        "type": [
                            "string",
                            "integer"
                        ]
                    },
                    "type": "array"
                },
                "endcol": {
                    "description": "Column to stop read at (non-inclusive).",
                    "type": "integer"
                },
                "endrow": {
                    "description": "Row to stop read at (non-inclusive).",
                    "type": "integer"
                },
                "sheet_template": {
                    "description": "Format string that can be completed with % operator to generate names for each subsequent sheet when writing.",
                    "type": "string"
                },
                "sheets": {
                    "allowSingular": true,
                    "default": [],
                    "description": "Name(s) of one more more sheets that should be read/written. If not provided during read, all sheets will be read.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "startcol": {
                    "default": 0,
                    "description": "Column to start read/write at.",
                    "type": "integer"
                },
                "startrow": {
                    "default": 0,
                    "description": "Row to start read/write at.",
                    "type": "integer"
                },
                "str_as_bytes": {
                    "default": false,
                    "description": "If true, strings in columns are read as bytes",
                    "type": "boolean",
                    "format": "checkbox"
                },
                "piecemeal": {
                    "default": false,
                    "description": "If possible read the the file incrementally in multiple messages. This should be used for large files that cannot be loaded into memory.",
                    "type": "boolean",
                    "format": "checkbox"
                },
                "record_ids": {
                    "description": "IDs of records to read/write. Other records will be ignored.",
                    "type": "array"
                },
                "indent": {
                    "default": "\t",
                    "description": "String or number of spaces that should be used to indent each level within the seiralized structure. Defaults to '\\t'.",
                    "type": [
                        "string",
                        "integer"
                    ]
                },
                "sort_keys": {
                    "default": true,
                    "description": "If True, the serialization of dictionaries will be in key sorted order. Defaults to True.",
                    "type": "boolean",
                    "format": "checkbox"
                },
                "read_attributes": {
                    "default": false,
                    "description": "If True, the attributes are read in as well as the variables. Defaults to False.",
                    "type": "boolean",
                    "format": "checkbox"
                },
                "variables": {
                    "description": "List of variables to read in. If not provided, all variables will be read.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "version": {
                    "default": 1,
                    "description": "Version of netCDF format that should be used. Defaults to 1. Options are 1 (classic format) and 2 (64-bit offset format).",
                    "enum": [
                        1,
                        2
                    ],
                    "type": "integer"
                },
                "prune_duplicates": {
                    "default": true,
                    "description": "If True, serialized meshes in array format will be pruned of duplicates when being normalized into a Ply object. If False, duplicates will not be pruned. Defaults to True.",
                    "type": "boolean",
                    "format": "checkbox"
                },
                "no_header": {
                    "default": false,
                    "description": "If True, headers will not be read or serialized from/to tables. Defaults to False.",
                    "type": "boolean",
                    "format": "checkbox"
                },
                "default_flow_style": {
                    "default": false,
                    "description": "If True, nested collections will be serialized in the block style. If False, they will always be serialized in the flow style. See `PyYAML Documentation <https://pyyaml.org/wiki/PyYAMLDocumentation>`_.",
                    "type": "boolean",
                    "format": "checkbox"
                },
                "encoding": {
                    "default": "utf-8",
                    "description": "Encoding that should be used to serialize the object. Defaults to 'utf-8'.",
                    "type": "string"
                }
            },
            "required": [
                "name"
            ],
            "type": "object",
            "dependencies": {
                "driver": [
                    "args"
                ]
            }
        },
        "file-subtype-binary": {
            "additionalProperties": true,
            "allowSingular": "name",
            "description": "Schema for file component ['binary'] subtype.",
            "properties": {
                "filetype": {
                    "default": "binary",
                    "description": "The entire file is read/written all at once as bytes.",
                    "enum": [
                        "binary"
                    ],
                    "type": "string"
                },
                "name": {
                    "description": "Name used for component in log messages.",
                    "pattern": "^([A-Za-z0-9-_]+:)?\\.?[A-Za-z0-9-_\\\\\\/]+\\.[A-Za-z0-9-_]+(::[A-Za-z0-9-_]+)?$",
                    "type": "string"
                },
                "read_meth": {
                    "deprecated": true,
                    "description": "Method that should be used to read data from the file. Defaults to 'read'. Ignored if direction is 'send'.",
                    "enum": [
                        "read",
                        "readline"
                    ],
                    "type": "string"
                },
                "serializer": {
                    "allOf": [
                        {
                            "default": {}
                        },
                        {
                            "$ref": "#/definitions/serializer"
                        }
                    ],
                    "description": "Class with serialize and deserialize methods that should be used to process sent and received messages or a dictionary describing a serializer that obeys the serializer schema."
                }
            },
            "required": [
                "filetype",
                "serializer"
            ],
            "type": "object",
            "pushProperties": {
                "$properties/serializer": true
            }
        },
        "file-subtype-ascii": {
            "additionalProperties": true,
            "allowSingular": "name",
            "description": "Schema for file component ['ascii'] subtype.",
            "properties": {
                "filetype": {
                    "default": "ascii",
                    "description": "This file is read/written as encoded text one line at a time.",
                    "enum": [
                        "ascii"
                    ],
                    "type": "string"
                },
                "comment": {
                    "default": "# ",
                    "description": "One or more characters indicating a comment. Defaults to '# '.",
                    "type": "string"
                },
                "datatype": {
                    "$ref": "#/definitions/schema"
                },
                "name": {
                    "description": "Name used for component in log messages.",
                    "pattern": "^([A-Za-z0-9-_]+:)?\\.?[A-Za-z0-9-_\\\\\\/]+\\.[A-Za-z0-9-_]+(::[A-Za-z0-9-_]+)?$",
                    "type": "string"
                },
                "newline": {
                    "default": "\n",
                    "description": "One or more characters indicating a newline. Defaults to '\\n'.",
                    "type": "string"
                }
            },
            "required": [
                "filetype"
            ],
            "type": "object"
        },
        "file-subtype-map": {
            "additionalProperties": true,
            "allowSingular": "name",
            "description": "Schema for file component ['map'] subtype.",
            "properties": {
                "filetype": {
                    "default": "map",
                    "description": "The file contains a key/value mapping with one key/value pair per line and separated by some delimiter.",
                    "enum": [
                        "map"
                    ],
                    "type": "string"
                },
                "comment": {
                    "default": "# ",
                    "description": "One or more characters indicating a comment. Defaults to '# '.",
                    "type": "string"
                },
                "datatype": {
                    "$ref": "#/definitions/schema"
                },
                "delimiter": {
                    "default": "\t",
                    "description": "Delimiter that should be used to separate name/value pairs in the map. Defaults to \\t.",
                    "type": "string"
                },
                "name": {
                    "description": "Name used for component in log messages.",
                    "pattern": "^([A-Za-z0-9-_]+:)?\\.?[A-Za-z0-9-_\\\\\\/]+\\.[A-Za-z0-9-_]+(::[A-Za-z0-9-_]+)?$",
                    "type": "string"
                },
                "newline": {
                    "default": "\n",
                    "description": "One or more characters indicating a newline. Defaults to '\\n'.",
                    "type": "string"
                }
            },
            "required": [
                "filetype"
            ],
            "type": "object"
        },
        "file-subtype-table": {
            "additionalProperties": true,
            "allowSingular": "name",
            "description": "Schema for file component ['table'] subtype.",
            "properties": {
                "filetype": {
                    "default": "table",
                    "description": "The file is an ASCII table that will be read/written one row at a time. If ``as_array`` is ``True``, the table will be read/written all at once.",
                    "enum": [
                        "table"
                    ],
                    "type": "string"
                },
                "comment": {
                    "default": "# ",
                    "description": "One or more characters indicating a comment. Defaults to '# '.",
                    "type": "string"
                },
                "datatype": {
                    "$ref": "#/definitions/schema"
                },
                "delimiter": {
                    "aliases": [
                        "column"
                    ],
                    "default": "\t",
                    "description": "Character(s) that should be used to separate columns. Defaults to '\\t'.",
                    "type": "string"
                },
                "name": {
                    "description": "Name used for component in log messages.",
                    "pattern": "^([A-Za-z0-9-_]+:)?\\.?[A-Za-z0-9-_\\\\\\/]+\\.[A-Za-z0-9-_]+(::[A-Za-z0-9-_]+)?$",
                    "type": "string"
                },
                "newline": {
                    "default": "\n",
                    "description": "One or more characters indicating a newline. Defaults to '\\n'.",
                    "type": "string"
                },
                "use_astropy": {
                    "default": false,
                    "description": "If True, the astropy package will be used to serialize/deserialize table. Defaults to False.",
                    "type": "boolean",
                    "format": "checkbox"
                }
            },
            "required": [
                "filetype"
            ],
            "type": "object"
        },
        "file-subtype-bam": {
            "additionalProperties": true,
            "allowSingular": "name",
            "description": "Schema for file component ['bam'] subtype.",
            "properties": {
                "filetype": {
                    "default": "bam",
                    "description": "bam sequence I/O",
                    "enum": [
                        "bam"
                    ],
                    "type": "string"
                },
                "flush_on_write": {
                    "default": false,
                    "description": "If true, the file will be flushed when written to.",
                    "type": "boolean",
                    "format": "checkbox"
                },
                "header": {
                    "description": "Header defining sequence identifiers. A header is required for writing SAM, BAM, and CRAM files.",
                    "type": "object"
                },
                "index": {
                    "description": "Path to file containing index if different from the standard naming convention for BAM and CRAM files.",
                    "type": "string"
                },
                "name": {
                    "description": "Name used for component in log messages.",
                    "pattern": "^([A-Za-z0-9-_]+:)?\\.?[A-Za-z0-9-_\\\\\\/]+\\.[A-Za-z0-9-_]+(::[A-Za-z0-9-_]+)?$",
                    "type": "string"
                },
                "regions": {
                    "default": [],
                    "description": "Region parameters (reference name, start, and end) defining the regions that should be read. If not provided, all regions will be read.",
                    "items": {
                        "properties": {
                            "end": {
                                "type": "integer"
                            },
                            "name": {
                                "type": "string"
                            },
                            "start": {
                                "type": "integer"
                            }
                        },
                        "required": [
                            "name"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "required": [
                "filetype"
            ],
            "type": "object"
        },
        "file-subtype-bcf": {
            "additionalProperties": true,
            "allowSingular": "name",
            "description": "Schema for file component ['bcf'] subtype.",
            "properties": {
                "filetype": {
                    "default": "bcf",
                    "description": "bcf sequence I/O",
                    "enum": [
                        "bcf"
                    ],
                    "type": "string"
                },
                "flush_on_write": {
                    "default": false,
                    "description": "If true, the file will be flushed when written to.",
                    "type": "boolean",
                    "format": "checkbox"
                },
                "header": {
                    "description": "Header defining sequence identifiers. A header is required for writing SAM, BAM, and CRAM files.",
                    "type": "object"
                },
                "index": {
                    "description": "Path to file containing index if different from the standard naming convention for BAM and CRAM files.",
                    "type": "string"
                },
                "name": {
                    "description": "Name used for component in log messages.",
                    "pattern": "^([A-Za-z0-9-_]+:)?\\.?[A-Za-z0-9-_\\\\\\/]+\\.[A-Za-z0-9-_]+(::[A-Za-z0-9-_]+)?$",
                    "type": "string"
                },
                "regions": {
                    "default": [],
                    "description": "Region parameters (reference name, start, and end) defining the regions that should be read. If not provided, all regions will be read.",
                    "items": {
                        "properties": {
                            "end": {
                                "type": "integer"
                            },
                            "name": {
                                "type": "string"
                            },
                            "start": {
                                "type": "integer"
                            }
                        },
                        "required": [
                            "name"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "required": [
                "filetype"
            ],
            "type": "object"
        },
        "file-subtype-bmp": {
            "additionalProperties": true,
            "allowSingular": "name",
            "description": "Schema for file component ['bmp'] subtype.",
            "properties": {
                "filetype": {
                    "default": "bmp",
                    "description": "bmp image I/O",
                    "enum": [
                        "bmp"
                    ],
                    "type": "string"
                },
                "name": {
                    "description": "Name used for component in log messages.",
                    "pattern": "^([A-Za-z0-9-_]+:)?\\.?[A-Za-z0-9-_\\\\\\/]+\\.[A-Za-z0-9-_]+(::[A-Za-z0-9-_]+)?$",
                    "type": "string"
                },
                "params": {
                    "default": {},
                    "description": "Parameters that should be based to the PIL.Image save/open command",
                    "type": "object"
                }
            },
            "required": [
                "filetype"
            ],
            "type": "object"
        },
        "file-subtype-cabo": {
            "additionalProperties": true,
            "allowSingular": "name",
            "description": "Schema for file component ['cabo'] subtype.",
            "properties": {
                "filetype": {
                    "default": "cabo",
                    "description": "The file is a CABO parameter file.",
                    "enum": [
                        "cabo"
                    ],
                    "type": "string"
                },
                "comment": {
                    "default": "# ",
                    "description": "One or more characters indicating a comment. Defaults to '# '.",
                    "type": "string"
                },
                "datatype": {
                    "$ref": "#/definitions/schema"
                },
                "delimiter": {
                    "default": " = ",
                    "description": "Delimiter that should be used to separate name/value pairs in the map. Defaults to \\t.",
                    "type": "string"
                },
                "name": {
                    "description": "Name used for component in log messages.",
                    "pattern": "^([A-Za-z0-9-_]+:)?\\.?[A-Za-z0-9-_\\\\\\/]+\\.[A-Za-z0-9-_]+(::[A-Za-z0-9-_]+)?$",
                    "type": "string"
                },
                "newline": {
                    "default": "\n",
                    "description": "One or more characters indicating a newline. Defaults to '\\n'.",
                    "type": "string"
                }
            },
            "required": [
                "filetype"
            ],
            "type": "object"
        },
        "file-subtype-cram": {
            "additionalProperties": true,
            "allowSingular": "name",
            "description": "Schema for file component ['cram'] subtype.",
            "properties": {
                "filetype": {
                    "default": "cram",
                    "description": "cram sequence I/O",
                    "enum": [
                        "cram"
                    ],
                    "type": "string"
                },
                "flush_on_write": {
                    "default": false,
                    "description": "If true, the file will be flushed when written to.",
                    "type": "boolean",
                    "format": "checkbox"
                },
                "header": {
                    "description": "Header defining sequence identifiers. A header is required for writing SAM, BAM, and CRAM files.",
                    "type": "object"
                },
                "index": {
                    "description": "Path to file containing index if different from the standard naming convention for BAM and CRAM files.",
                    "type": "string"
                },
                "name": {
                    "description": "Name used for component in log messages.",
                    "pattern": "^([A-Za-z0-9-_]+:)?\\.?[A-Za-z0-9-_\\\\\\/]+\\.[A-Za-z0-9-_]+(::[A-Za-z0-9-_]+)?$",
                    "type": "string"
                },
                "regions": {
                    "default": [],
                    "description": "Region parameters (reference name, start, and end) defining the regions that should be read. If not provided, all regions will be read.",
                    "items": {
                        "properties": {
                            "end": {
                                "type": "integer"
                            },
                            "name": {
                                "type": "string"
                            },
                            "start": {
                                "type": "integer"
                            }
                        },
                        "required": [
                            "name"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "required": [
                "filetype"
            ],
            "type": "object"
        },
        "file-subtype-eps": {
            "additionalProperties": true,
            "allowSingular": "name",
            "description": "Schema for file component ['eps'] subtype.",
            "properties": {
                "filetype": {
                    "default": "eps",
                    "description": "eps image I/O",
                    "enum": [
                        "eps"
                    ],
                    "type": "string"
                },
                "name": {
                    "description": "Name used for component in log messages.",
                    "pattern": "^([A-Za-z0-9-_]+:)?\\.?[A-Za-z0-9-_\\\\\\/]+\\.[A-Za-z0-9-_]+(::[A-Za-z0-9-_]+)?$",
                    "type": "string"
                },
                "params": {
                    "default": {},
                    "description": "Parameters that should be based to the PIL.Image save/open command",
                    "type": "object"
                }
            },
            "required": [
                "filetype"
            ],
            "type": "object"
        },
        "file-subtype-excel": {
            "additionalProperties": true,
            "allowSingular": "name",
            "description": "Schema for file component ['excel'] subtype.",
            "properties": {
                "filetype": {
                    "default": "excel",
                    "description": "The file is read/written as Excel",
                    "enum": [
                        "excel"
                    ],
                    "type": "string"
                },
                "columns": {
                    "description": "Names of columns to read/write.",
                    "items": {
                        "type": [
                            "string",
                            "integer"
                        ]
                    },
                    "type": "array"
                },
                "endcol": {
                    "description": "Column to stop read at (non-inclusive).",
                    "type": "integer"
                },
                "endrow": {
                    "description": "Row to stop read at (non-inclusive).",
                    "type": "integer"
                },
                "name": {
                    "description": "Name used for component in log messages.",
                    "pattern": "^([A-Za-z0-9-_]+:)?\\.?[A-Za-z0-9-_\\\\\\/]+\\.[A-Za-z0-9-_]+(::[A-Za-z0-9-_]+)?$",
                    "type": "string"
                },
                "sheet_template": {
                    "description": "Format string that can be completed with % operator to generate names for each subsequent sheet when writing.",
                    "type": "string"
                },
                "sheets": {
                    "allowSingular": true,
                    "default": [],
                    "description": "Name(s) of one more more sheets that should be read/written. If not provided during read, all sheets will be read.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "startcol": {
                    "default": 0,
                    "description": "Column to start read/write at.",
                    "type": "integer"
                },
                "startrow": {
                    "default": 0,
                    "description": "Row to start read/write at.",
                    "type": "integer"
                },
                "str_as_bytes": {
                    "default": false,
                    "description": "If true, strings in columns are read as bytes",
                    "type": "boolean",
                    "format": "checkbox"
                }
            },
            "required": [
                "filetype"
            ],
            "type": "object"
        },
        "file-subtype-fasta": {
            "additionalProperties": true,
            "allowSingular": "name",
            "description": "Schema for file component ['fasta'] subtype.",
            "properties": {
                "filetype": {
                    "default": "fasta",
                    "description": "fasta sequence I/O",
                    "enum": [
                        "fasta"
                    ],
                    "type": "string"
                },
                "name": {
                    "description": "Name used for component in log messages.",
                    "pattern": "^([A-Za-z0-9-_]+:)?\\.?[A-Za-z0-9-_\\\\\\/]+\\.[A-Za-z0-9-_]+(::[A-Za-z0-9-_]+)?$",
                    "type": "string"
                },
                "piecemeal": {
                    "default": false,
                    "description": "If possible read the the file incrementally in multiple messages. This should be used for large files that cannot be loaded into memory.",
                    "type": "boolean",
                    "format": "checkbox"
                },
                "record_ids": {
                    "description": "IDs of records to read/write. Other records will be ignored.",
                    "type": "array"
                }
            },
            "required": [
                "filetype"
            ],
            "type": "object"
        },
        "file-subtype-fastq": {
            "additionalProperties": true,
            "allowSingular": "name",
            "description": "Schema for file component ['fastq'] subtype.",
            "properties": {
                "filetype": {
                    "default": "fastq",
                    "description": "fastq sequence I/O",
                    "enum": [
                        "fastq"
                    ],
                    "type": "string"
                },
                "name": {
                    "description": "Name used for component in log messages.",
                    "pattern": "^([A-Za-z0-9-_]+:)?\\.?[A-Za-z0-9-_\\\\\\/]+\\.[A-Za-z0-9-_]+(::[A-Za-z0-9-_]+)?$",
                    "type": "string"
                },
                "piecemeal": {
                    "default": false,
                    "description": "If possible read the the file incrementally in multiple messages. This should be used for large files that cannot be loaded into memory.",
                    "type": "boolean",
                    "format": "checkbox"
                },
                "record_ids": {
                    "description": "IDs of records to read/write. Other records will be ignored.",
                    "type": "array"
                }
            },
            "required": [
                "filetype"
            ],
            "type": "object"
        },
        "file-subtype-gif": {
            "additionalProperties": true,
            "allowSingular": "name",
            "description": "Schema for file component ['gif'] subtype.",
            "properties": {
                "filetype": {
                    "default": "gif",
                    "description": "gif image I/O",
                    "enum": [
                        "gif"
                    ],
                    "type": "string"
                },
                "name": {
                    "description": "Name used for component in log messages.",
                    "pattern": "^([A-Za-z0-9-_]+:)?\\.?[A-Za-z0-9-_\\\\\\/]+\\.[A-Za-z0-9-_]+(::[A-Za-z0-9-_]+)?$",
                    "type": "string"
                },
                "params": {
                    "default": {},
                    "description": "Parameters that should be based to the PIL.Image save/open command",
                    "type": "object"
                }
            },
            "required": [
                "filetype"
            ],
            "type": "object"
        },
        "file-subtype-jpeg": {
            "additionalProperties": true,
            "allowSingular": "name",
            "description": "Schema for file component ['jpeg'] subtype.",
            "properties": {
                "filetype": {
                    "default": "jpeg",
                    "description": "jpeg image I/O",
                    "enum": [
                        "jpeg"
                    ],
                    "type": "string"
                },
                "name": {
                    "description": "Name used for component in log messages.",
                    "pattern": "^([A-Za-z0-9-_]+:)?\\.?[A-Za-z0-9-_\\\\\\/]+\\.[A-Za-z0-9-_]+(::[A-Za-z0-9-_]+)?$",
                    "type": "string"
                },
                "params": {
                    "default": {},
                    "description": "Parameters that should be based to the PIL.Image save/open command",
                    "type": "object"
                }
            },
            "required": [
                "filetype"
            ],
            "type": "object"
        },
        "file-subtype-json": {
            "additionalProperties": true,
            "allowSingular": "name",
            "description": "Schema for file component ['json'] subtype.",
            "properties": {
                "filetype": {
                    "default": "json",
                    "description": "The file contains a JSON serialized object.",
                    "enum": [
                        "json"
                    ],
                    "type": "string"
                },
                "comment": {
                    "default": "# ",
                    "description": "One or more characters indicating a comment. Defaults to '# '.",
                    "type": "string"
                },
                "datatype": {
                    "$ref": "#/definitions/schema"
                },
                "indent": {
                    "default": "\t",
                    "description": "String or number of spaces that should be used to indent each level within the seiralized structure. Defaults to '\\t'.",
                    "type": [
                        "string",
                        "integer"
                    ]
                },
                "name": {
                    "description": "Name used for component in log messages.",
                    "pattern": "^([A-Za-z0-9-_]+:)?\\.?[A-Za-z0-9-_\\\\\\/]+\\.[A-Za-z0-9-_]+(::[A-Za-z0-9-_]+)?$",
                    "type": "string"
                },
                "newline": {
                    "default": "\n",
                    "description": "One or more characters indicating a newline. Defaults to '\\n'.",
                    "type": "string"
                },
                "sort_keys": {
                    "default": true,
                    "description": "If True, the serialization of dictionaries will be in key sorted order. Defaults to True.",
                    "type": "boolean",
                    "format": "checkbox"
                }
            },
            "required": [
                "filetype"
            ],
            "type": "object"
        },
        "file-subtype-mat": {
            "additionalProperties": true,
            "allowSingular": "name",
            "description": "Schema for file component ['mat'] subtype.",
            "properties": {
                "filetype": {
                    "default": "mat",
                    "description": "The file is a Matlab .mat file containing one or more serialized Matlab variables.",
                    "enum": [
                        "mat"
                    ],
                    "type": "string"
                },
                "comment": {
                    "default": "# ",
                    "description": "One or more characters indicating a comment. Defaults to '# '.",
                    "type": "string"
                },
                "datatype": {
                    "$ref": "#/definitions/schema"
                },
                "name": {
                    "description": "Name used for component in log messages.",
                    "pattern": "^([A-Za-z0-9-_]+:)?\\.?[A-Za-z0-9-_\\\\\\/]+\\.[A-Za-z0-9-_]+(::[A-Za-z0-9-_]+)?$",
                    "type": "string"
                },
                "newline": {
                    "default": "\n",
                    "description": "One or more characters indicating a newline. Defaults to '\\n'.",
                    "type": "string"
                }
            },
            "required": [
                "filetype"
            ],
            "type": "object"
        },
        "file-subtype-netcdf": {
            "additionalProperties": true,
            "allowSingular": "name",
            "description": "Schema for file component ['netcdf'] subtype.",
            "properties": {
                "filetype": {
                    "default": "netcdf",
                    "description": "The file is read/written as netCDF.",
                    "enum": [
                        "netcdf"
                    ],
                    "type": "string"
                },
                "name": {
                    "description": "Name used for component in log messages.",
                    "pattern": "^([A-Za-z0-9-_]+:)?\\.?[A-Za-z0-9-_\\\\\\/]+\\.[A-Za-z0-9-_]+(::[A-Za-z0-9-_]+)?$",
                    "type": "string"
                },
                "read_attributes": {
                    "default": false,
                    "description": "If True, the attributes are read in as well as the variables. Defaults to False.",
                    "type": "boolean",
                    "format": "checkbox"
                },
                "variables": {
                    "description": "List of variables to read in. If not provided, all variables will be read.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "version": {
                    "default": 1,
                    "description": "Version of netCDF format that should be used. Defaults to 1. Options are 1 (classic format) and 2 (64-bit offset format).",
                    "enum": [
                        1,
                        2
                    ],
                    "type": "integer"
                }
            },
            "required": [
                "filetype"
            ],
            "type": "object"
        },
        "file-subtype-obj": {
            "additionalProperties": true,
            "allowSingular": "name",
            "description": "Schema for file component ['obj'] subtype.",
            "properties": {
                "filetype": {
                    "default": "obj",
                    "description": "The file is in the `Obj <http://paulbourke.net/dataformats/obj/>`_ data format for 3D structures.",
                    "enum": [
                        "obj"
                    ],
                    "type": "string"
                },
                "comment": {
                    "default": "# ",
                    "description": "One or more characters indicating a comment. Defaults to '# '.",
                    "type": "string"
                },
                "datatype": {
                    "$ref": "#/definitions/schema"
                },
                "name": {
                    "description": "Name used for component in log messages.",
                    "pattern": "^([A-Za-z0-9-_]+:)?\\.?[A-Za-z0-9-_\\\\\\/]+\\.[A-Za-z0-9-_]+(::[A-Za-z0-9-_]+)?$",
                    "type": "string"
                },
                "newline": {
                    "default": "\n",
                    "description": "One or more characters indicating a newline. Defaults to '\\n'.",
                    "type": "string"
                },
                "prune_duplicates": {
                    "default": true,
                    "description": "If True, serialized meshes in array format will be pruned of duplicates when being normalized into a Ply object. If False, duplicates will not be pruned. Defaults to True.",
                    "type": "boolean",
                    "format": "checkbox"
                }
            },
            "required": [
                "filetype"
            ],
            "type": "object"
        },
        "file-subtype-png": {
            "additionalProperties": true,
            "allowSingular": "name",
            "description": "Schema for file component ['png'] subtype.",
            "properties": {
                "filetype": {
                    "default": "png",
                    "description": "png image I/O",
                    "enum": [
                        "png"
                    ],
                    "type": "string"
                },
                "name": {
                    "description": "Name used for component in log messages.",
                    "pattern": "^([A-Za-z0-9-_]+:)?\\.?[A-Za-z0-9-_\\\\\\/]+\\.[A-Za-z0-9-_]+(::[A-Za-z0-9-_]+)?$",
                    "type": "string"
                },
                "params": {
                    "default": {},
                    "description": "Parameters that should be based to the PIL.Image save/open command",
                    "type": "object"
                }
            },
            "required": [
                "filetype"
            ],
            "type": "object"
        },
        "file-subtype-pandas": {
            "additionalProperties": true,
            "allowSingular": "name",
            "description": "Schema for file component ['pandas'] subtype.",
            "properties": {
                "filetype": {
                    "default": "pandas",
                    "description": "The file is a Pandas frame output as a table.",
                    "enum": [
                        "pandas"
                    ],
                    "type": "string"
                },
                "comment": {
                    "default": "# ",
                    "description": "One or more characters indicating a comment. Defaults to '# '.",
                    "type": "string"
                },
                "datatype": {
                    "$ref": "#/definitions/schema"
                },
                "delimiter": {
                    "aliases": [
                        "column"
                    ],
                    "default": "\t",
                    "description": "Character(s) that should be used to separate columns. Defaults to '\\t'.",
                    "type": "string"
                },
                "name": {
                    "description": "Name used for component in log messages.",
                    "pattern": "^([A-Za-z0-9-_]+:)?\\.?[A-Za-z0-9-_\\\\\\/]+\\.[A-Za-z0-9-_]+(::[A-Za-z0-9-_]+)?$",
                    "type": "string"
                },
                "newline": {
                    "default": "\n",
                    "description": "One or more characters indicating a newline. Defaults to '\\n'.",
                    "type": "string"
                },
                "no_header": {
                    "default": false,
                    "description": "If True, headers will not be read or serialized from/to tables. Defaults to False.",
                    "type": "boolean",
                    "format": "checkbox"
                },
                "str_as_bytes": {
                    "default": false,
                    "description": "If True, strings in columns are read as bytes. Defaults to False.",
                    "type": "boolean",
                    "format": "checkbox"
                },
                "use_astropy": {
                    "default": false,
                    "description": "If True, the astropy package will be used to serialize/deserialize table. Defaults to False.",
                    "type": "boolean",
                    "format": "checkbox"
                }
            },
            "required": [
                "filetype"
            ],
            "type": "object"
        },
        "file-subtype-pickle": {
            "additionalProperties": true,
            "allowSingular": "name",
            "description": "Schema for file component ['pickle'] subtype.",
            "properties": {
                "filetype": {
                    "default": "pickle",
                    "description": "The file contains one or more pickled Python objects.",
                    "enum": [
                        "pickle"
                    ],
                    "type": "string"
                },
                "comment": {
                    "default": "# ",
                    "description": "One or more characters indicating a comment. Defaults to '# '.",
                    "type": "string"
                },
                "datatype": {
                    "$ref": "#/definitions/schema"
                },
                "name": {
                    "description": "Name used for component in log messages.",
                    "pattern": "^([A-Za-z0-9-_]+:)?\\.?[A-Za-z0-9-_\\\\\\/]+\\.[A-Za-z0-9-_]+(::[A-Za-z0-9-_]+)?$",
                    "type": "string"
                },
                "newline": {
                    "default": "\n",
                    "description": "One or more characters indicating a newline. Defaults to '\\n'.",
                    "type": "string"
                }
            },
            "required": [
                "filetype"
            ],
            "type": "object"
        },
        "file-subtype-ply": {
            "additionalProperties": true,
            "allowSingular": "name",
            "description": "Schema for file component ['ply'] subtype.",
            "properties": {
                "filetype": {
                    "default": "ply",
                    "description": "The file is in the `Ply <http://paulbourke.net/dataformats/ply/>`_ data format for 3D structures.",
                    "enum": [
                        "ply"
                    ],
                    "type": "string"
                },
                "comment": {
                    "default": "# ",
                    "description": "One or more characters indicating a comment. Defaults to '# '.",
                    "type": "string"
                },
                "datatype": {
                    "$ref": "#/definitions/schema"
                },
                "name": {
                    "description": "Name used for component in log messages.",
                    "pattern": "^([A-Za-z0-9-_]+:)?\\.?[A-Za-z0-9-_\\\\\\/]+\\.[A-Za-z0-9-_]+(::[A-Za-z0-9-_]+)?$",
                    "type": "string"
                },
                "newline": {
                    "default": "\n",
                    "description": "One or more characters indicating a newline. Defaults to '\\n'.",
                    "type": "string"
                },
                "prune_duplicates": {
                    "default": true,
                    "description": "If True, serialized meshes in array format will be pruned of duplicates when being normalized into a Ply object. If False, duplicates will not be pruned. Defaults to True.",
                    "type": "boolean",
                    "format": "checkbox"
                }
            },
            "required": [
                "filetype"
            ],
            "type": "object"
        },
        "file-subtype-sam": {
            "additionalProperties": true,
            "allowSingular": "name",
            "description": "Schema for file component ['sam'] subtype.",
            "properties": {
                "filetype": {
                    "default": "sam",
                    "description": "sam sequence I/O",
                    "enum": [
                        "sam"
                    ],
                    "type": "string"
                },
                "flush_on_write": {
                    "default": false,
                    "description": "If true, the file will be flushed when written to.",
                    "type": "boolean",
                    "format": "checkbox"
                },
                "header": {
                    "description": "Header defining sequence identifiers. A header is required for writing SAM, BAM, and CRAM files.",
                    "type": "object"
                },
                "index": {
                    "description": "Path to file containing index if different from the standard naming convention for BAM and CRAM files.",
                    "type": "string"
                },
                "name": {
                    "description": "Name used for component in log messages.",
                    "pattern": "^([A-Za-z0-9-_]+:)?\\.?[A-Za-z0-9-_\\\\\\/]+\\.[A-Za-z0-9-_]+(::[A-Za-z0-9-_]+)?$",
                    "type": "string"
                },
                "regions": {
                    "default": [],
                    "description": "Region parameters (reference name, start, and end) defining the regions that should be read. If not provided, all regions will be read.",
                    "items": {
                        "properties": {
                            "end": {
                                "type": "integer"
                            },
                            "name": {
                                "type": "string"
                            },
                            "start": {
                                "type": "integer"
                            }
                        },
                        "required": [
                            "name"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "required": [
                "filetype"
            ],
            "type": "object"
        },
        "file-subtype-tiff": {
            "additionalProperties": true,
            "allowSingular": "name",
            "description": "Schema for file component ['tiff'] subtype.",
            "properties": {
                "filetype": {
                    "default": "tiff",
                    "description": "tiff image I/O",
                    "enum": [
                        "tiff"
                    ],
                    "type": "string"
                },
                "name": {
                    "description": "Name used for component in log messages.",
                    "pattern": "^([A-Za-z0-9-_]+:)?\\.?[A-Za-z0-9-_\\\\\\/]+\\.[A-Za-z0-9-_]+(::[A-Za-z0-9-_]+)?$",
                    "type": "string"
                },
                "params": {
                    "default": {},
                    "description": "Parameters that should be based to the PIL.Image save/open command",
                    "type": "object"
                }
            },
            "required": [
                "filetype"
            ],
            "type": "object"
        },
        "file-subtype-vcf": {
            "additionalProperties": true,
            "allowSingular": "name",
            "description": "Schema for file component ['vcf'] subtype.",
            "properties": {
                "filetype": {
                    "default": "vcf",
                    "description": "vcf sequence I/O",
                    "enum": [
                        "vcf"
                    ],
                    "type": "string"
                },
                "flush_on_write": {
                    "default": false,
                    "description": "If true, the file will be flushed when written to.",
                    "type": "boolean",
                    "format": "checkbox"
                },
                "header": {
                    "description": "Header defining sequence identifiers. A header is required for writing SAM, BAM, and CRAM files.",
                    "type": "object"
                },
                "index": {
                    "description": "Path to file containing index if different from the standard naming convention for BAM and CRAM files.",
                    "type": "string"
                },
                "name": {
                    "description": "Name used for component in log messages.",
                    "pattern": "^([A-Za-z0-9-_]+:)?\\.?[A-Za-z0-9-_\\\\\\/]+\\.[A-Za-z0-9-_]+(::[A-Za-z0-9-_]+)?$",
                    "type": "string"
                },
                "regions": {
                    "default": [],
                    "description": "Region parameters (reference name, start, and end) defining the regions that should be read. If not provided, all regions will be read.",
                    "items": {
                        "properties": {
                            "end": {
                                "type": "integer"
                            },
                            "name": {
                                "type": "string"
                            },
                            "start": {
                                "type": "integer"
                            }
                        },
                        "required": [
                            "name"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "required": [
                "filetype"
            ],
            "type": "object"
        },
        "file-subtype-yaml": {
            "additionalProperties": true,
            "allowSingular": "name",
            "description": "Schema for file component ['yaml'] subtype.",
            "properties": {
                "filetype": {
                    "default": "yaml",
                    "description": "The file contains a YAML serialized object.",
                    "enum": [
                        "yaml"
                    ],
                    "type": "string"
                },
                "comment": {
                    "default": "# ",
                    "description": "One or more characters indicating a comment. Defaults to '# '.",
                    "type": "string"
                },
                "datatype": {
                    "$ref": "#/definitions/schema"
                },
                "default_flow_style": {
                    "default": false,
                    "description": "If True, nested collections will be serialized in the block style. If False, they will always be serialized in the flow style. See `PyYAML Documentation <https://pyyaml.org/wiki/PyYAMLDocumentation>`_.",
                    "type": "boolean",
                    "format": "checkbox"
                },
                "encoding": {
                    "default": "utf-8",
                    "description": "Encoding that should be used to serialize the object. Defaults to 'utf-8'.",
                    "type": "string"
                },
                "indent": {
                    "default": "\t",
                    "description": "String or number of spaces that should be used to indent each level within the seiralized structure. Defaults to '\\t'.",
                    "type": [
                        "string",
                        "integer"
                    ]
                },
                "name": {
                    "description": "Name used for component in log messages.",
                    "pattern": "^([A-Za-z0-9-_]+:)?\\.?[A-Za-z0-9-_\\\\\\/]+\\.[A-Za-z0-9-_]+(::[A-Za-z0-9-_]+)?$",
                    "type": "string"
                },
                "newline": {
                    "default": "\n",
                    "description": "One or more characters indicating a newline. Defaults to '\\n'.",
                    "type": "string"
                }
            },
            "required": [
                "filetype"
            ],
            "type": "object"
        },
        "filter": {
            "description": "Base schema for all subtypes of filter components.",
            "additionalProperties": false,
            "properties": {
                "filtertype": {
                    "description": "Pass every message",
                    "enum": [
                        "direct",
                        "function",
                        "statement"
                    ],
                    "type": "string"
                },
                "function": {
                    "description": "The handle for a callable Python object (e.g. function) that should be used to determine if a message should be filtered or a string of the form \"<function file>:<function name>\" identifying a function where \"<function file>\" is the module or Python file containing the function and \"<function name>\" is the name of the function. The function should take the message as input and return a boolean, True if the message should pass through the filter, False if it should not.",
                    "type": "string",
                    "options": {
                        "dependencies": {
                            "filtertype": [
                                "function"
                            ]
                        }
                    }
                },
                "statement": {
                    "description": "Python statement in terms of the message as represented by the string \"%x%\" that should evaluate to a boolean, True if the message should pass through the filter, False if it should not. The statement should only use a limited set of builtins and the math library (See yggdrasil.tools.safe_eval). If more complex relationships are required, use the FunctionFilter class.",
                    "type": "string",
                    "options": {
                        "dependencies": {
                            "filtertype": [
                                "statement"
                            ]
                        }
                    }
                }
            },
            "type": "object"
        },
        "filter-subtype-base": {
            "additionalProperties": false,
            "description": "Base schema for all subtypes of filter components.",
            "properties": {
                "filtertype": {
                    "description": "Pass every message",
                    "enum": [
                        "direct",
                        "function",
                        "statement"
                    ],
                    "type": "string"
                },
                "function": {
                    "description": "The handle for a callable Python object (e.g. function) that should be used to determine if a message should be filtered or a string of the form \"<function file>:<function name>\" identifying a function where \"<function file>\" is the module or Python file containing the function and \"<function name>\" is the name of the function. The function should take the message as input and return a boolean, True if the message should pass through the filter, False if it should not.",
                    "type": "string"
                },
                "statement": {
                    "description": "Python statement in terms of the message as represented by the string \"%x%\" that should evaluate to a boolean, True if the message should pass through the filter, False if it should not. The statement should only use a limited set of builtins and the math library (See yggdrasil.tools.safe_eval). If more complex relationships are required, use the FunctionFilter class.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "filter-subtype-direct": {
            "additionalProperties": true,
            "description": "Schema for filter component ['direct'] subtype.",
            "properties": {
                "filtertype": {
                    "default": "direct",
                    "description": "Pass every message",
                    "enum": [
                        "direct"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "filter-subtype-function": {
            "additionalProperties": true,
            "description": "Schema for filter component ['function'] subtype.",
            "properties": {
                "filtertype": {
                    "default": "function",
                    "description": "Filter messages based on a function",
                    "enum": [
                        "function"
                    ],
                    "type": "string"
                },
                "function": {
                    "description": "The handle for a callable Python object (e.g. function) that should be used to determine if a message should be filtered or a string of the form \"<function file>:<function name>\" identifying a function where \"<function file>\" is the module or Python file containing the function and \"<function name>\" is the name of the function. The function should take the message as input and return a boolean, True if the message should pass through the filter, False if it should not.",
                    "type": "string"
                }
            },
            "required": [
                "function"
            ],
            "type": "object"
        },
        "filter-subtype-statement": {
            "additionalProperties": true,
            "description": "Schema for filter component ['statement'] subtype.",
            "properties": {
                "filtertype": {
                    "default": "statement",
                    "description": "Filter messages based on a statement",
                    "enum": [
                        "statement"
                    ],
                    "type": "string"
                },
                "statement": {
                    "description": "Python statement in terms of the message as represented by the string \"%x%\" that should evaluate to a boolean, True if the message should pass through the filter, False if it should not. The statement should only use a limited set of builtins and the math library (See yggdrasil.tools.safe_eval). If more complex relationships are required, use the FunctionFilter class.",
                    "type": "string"
                }
            },
            "required": [
                "statement"
            ],
            "type": "object"
        },
        "model-subtype-base": {
            "additionalProperties": false,
            "description": "Base schema for all subtypes of model components.",
            "properties": {
                "dependencies": {
                    "description": "A list of packages required by the model that are written in the same language as the model. If the package requires dependencies outside the language of the model. use the additional_dependencies parameter to provide them. If you need a version of the package from a specific package manager, a mapping with 'package' and 'package_manager' fields can be provided instead of just the name of the package.",
                    "items": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "additionalProperties": false,
                                "properties": {
                                    "arguments": {
                                        "type": "string"
                                    },
                                    "package": {
                                        "type": "string"
                                    },
                                    "package_manager": {
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "package"
                                ],
                                "type": "object"
                            }
                        ]
                    },
                    "type": "array"
                },
                "with_debugger": {
                    "description": "Debugger tool that should be used to run models. This string should include the tool executable and any flags that should be passed to it.",
                    "type": "string"
                },
                "valgrind_flags": {
                    "default": [
                        "--leak-check=full",
                        "--show-leak-kinds=all"
                    ],
                    "description": "Flags to pass to valgrind. Defaults to [].",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "args": {
                    "allowSingular": true,
                    "description": "The path to the file containing the model program that will be run by the driver for the model's language and/or a list of arguments that should be passed as input to the model program or language executable (e.g. source code or configuration file for a domain specific language).",
                    "items": {
                        "type": [
                            "string",
                            "number"
                        ]
                    },
                    "type": "array"
                },
                "preserve_cache": {
                    "default": false,
                    "description": "If True model products will be kept following the run, otherwise all products will be cleaned up. Defaults to False. This keyword is superceeded by overwrite.",
                    "type": "boolean",
                    "format": "checkbox"
                },
                "additional_dependencies": {
                    "additionalProperties": {
                        "items": {
                            "oneOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "additionalProperties": false,
                                    "properties": {
                                        "arguments": {
                                            "type": "string"
                                        },
                                        "package": {
                                            "type": "string"
                                        },
                                        "package_manager": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "package"
                                    ],
                                    "type": "object"
                                }
                            ]
                        },
                        "type": "array"
                    },
                    "description": "A mapping between languages and lists of packages in those languages that are required by the model.",
                    "type": "object"
                },
                "products": {
                    "default": [],
                    "description": "Paths to files created by the model that should be cleaned up when the model exits. Entries can be absolute paths or paths relative to the working directory. Defaults to [].",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "iter_function_over": {
                    "default": [],
                    "description": "Variable(s) that should be received or sent as an array, but iterated over. Defaults to an empty array and is ignored.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "with_valgrind": {
                    "default": false,
                    "description": "If True, the command is run with valgrind. Defaults to False.",
                    "type": "boolean",
                    "format": "checkbox"
                },
                "env": {
                    "additional_properties": {
                        "type": "string"
                    },
                    "default": {},
                    "description": "Dictionary of environment variables that should be set when the driver starts. Defaults to {}.",
                    "type": "object"
                },
                "copies": {
                    "default": 1,
                    "description": "The number of copies of the model that should be created. Defaults to 1.",
                    "minimum": 1,
                    "type": "integer"
                },
                "with_strace": {
                    "default": false,
                    "description": "If True, the command is run with strace (on Linux) or dtrace (on MacOS). Defaults to False.",
                    "type": "boolean",
                    "format": "checkbox"
                },
                "logging_level": {
                    "default": "",
                    "description": "The level of logging messages that should be displayed by the model. Defaults to the logging level as determined by the configuration file and environment variables.",
                    "type": "string"
                },
                "is_server": {
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "additionalProperties": false,
                            "properties": {
                                "input": {
                                    "type": "string"
                                },
                                "output": {
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        }
                    ],
                    "default": false,
                    "description": "If `True`, the model is assumed to be a server for one or more client models and an instance of :class:`yggdrasil.drivers.ServerDriver` is started. The corresponding channel that should be passed to the yggdrasil API will be the name of the model. If is_server is a dictionary, it should contain an 'input' key and an 'output' key. These are required to be the names of existing input and output channels in the model that will be co-opted by the server. (Note: This requires that the co-opted output channel's send method is called once for each time the co-opted input channel's recv method is called. If used with the `function` parameter, `is_server` must be a dictionary. Defaults to False."
                },
                "repository_commit": {
                    "description": "Commit that should be checked out in the model repository specified by repository_url. If not provided, the most recent commit on the default branch will be used.",
                    "type": "string"
                },
                "inputs": {
                    "aliases": [
                        "input",
                        "input_file",
                        "input_files"
                    ],
                    "allowSingular": true,
                    "default": [
                        {
                            "commtype": "default",
                            "datatype": {
                                "type": "string"
                            },
                            "is_default": true,
                            "name": "input"
                        }
                    ],
                    "description": "Zero or more channels carrying input to the model. A full description of channel entries and the options available for channels can be found :ref:`here<yaml_comm_options>`.",
                    "items": {
                        "anyOf": [
                            {
                                "$ref": "#/definitions/comm"
                            },
                            {
                                "$ref": "#/definitions/comm_driver"
                            },
                            {
                                "$ref": "#/definitions/file_driver"
                            }
                        ]
                    },
                    "type": "array"
                },
                "source_products": {
                    "default": [],
                    "description": "Files created by running the model that are source files. These files will be removed without checking their extension so users should avoid adding files to this list unless they are sure they should be deleted. Defaults to [].",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "overwrite": {
                    "description": "If True, any existing model products (compilation products, wrapper scripts, etc.) are removed prior to the run. If False, the products are not removed. Defaults to True. Setting this to False can improve the performance, particularly for models that take a long time to compile, but this should only be done once the model has been fully debugged to ensure that each run is tested on a clean copy of the model. The value of this keyword also determines whether or not products are removed after a run.",
                    "type": "boolean",
                    "format": "checkbox"
                },
                "language": {
                    "default": "executable",
                    "description": "The programming language that the model is written in. A list of available languages can be found :ref:`here <schema_table_model_subtype_rst>`.",
                    "enum": [
                        "R",
                        "c",
                        "c++",
                        "cmake",
                        "cpp",
                        "cxx",
                        "dummy",
                        "executable",
                        "fortran",
                        "julia",
                        "lpy",
                        "make",
                        "matlab",
                        "mpi",
                        "osr",
                        "python",
                        "pytorch",
                        "r",
                        "sbml",
                        "timesync"
                    ],
                    "type": "string"
                },
                "function": {
                    "description": "If provided, an integrated model is created by wrapping the function named here. The function must be located within the file specified by the source file listed in the first argument. If not provided, the model must contain it's own calls to the |yggdrasil| interface.",
                    "type": "string"
                },
                "client_of": {
                    "allowSingular": true,
                    "default": [],
                    "description": "The names of one or more models that this model will call as a server. If there are more than one, this should be specified as a sequence collection (list). The corresponding channel(s) that should be passed to the yggdrasil API will be the name of the server model joined with the name of the client model with an underscore `<server_model>_<client_model>`. There will be one channel created for each server the model is a client of. Defaults to empty list. Use of `client_of` with `function` is not currently supported.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "outputs_in_inputs": {
                    "description": "If True, outputs from wrapped model functions are passed by pointer as inputs for modification and the return value will be a flag. If False, outputs are limited to return values. Defaults to the value of the class attribute outputs_in_inputs.",
                    "type": "boolean",
                    "format": "checkbox"
                },
                "name": {
                    "description": "Name used for component in log messages.",
                    "type": "string"
                },
                "outputs": {
                    "aliases": [
                        "output",
                        "output_file",
                        "output_files"
                    ],
                    "allowSingular": true,
                    "default": [
                        {
                            "commtype": "default",
                            "datatype": {
                                "type": "string"
                            },
                            "is_default": true,
                            "name": "output"
                        }
                    ],
                    "description": "Zero or more channels carrying output from the model. A full description of channel entries and the options available for channels can be found :ref:`here<yaml_comm_options>`.",
                    "items": {
                        "anyOf": [
                            {
                                "$ref": "#/definitions/comm"
                            },
                            {
                                "$ref": "#/definitions/comm_driver"
                            },
                            {
                                "$ref": "#/definitions/file_driver"
                            }
                        ]
                    },
                    "type": "array"
                },
                "repository_url": {
                    "description": "URL for the git repository containing the model source code. If provided, relative paths in the model YAML definition will be considered relative to the repository root directory.",
                    "type": "string"
                },
                "timesync": {
                    "allowSingular": true,
                    "default": [
                        false
                    ],
                    "description": "If set, the model is assumed to call a send then receive of the state at each timestep for syncronization with other models that are also integrating in time. If a string is provided, it is assumed to be the name of the server that will handle timestep synchronization. If a boolean is provided, the name of the server will be assumed to be 'timestep'. Defaults to False.",
                    "items": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "boolean"
                            },
                            {
                                "properties": {
                                    "inputs": {
                                        "aliases": [
                                            "input"
                                        ],
                                        "allowSingular": true,
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "name": {
                                        "default": "timesync",
                                        "type": "string"
                                    },
                                    "outputs": {
                                        "aliases": [
                                            "output"
                                        ],
                                        "allowSingular": true,
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    }
                                },
                                "required": [
                                    "name"
                                ],
                                "type": "object"
                            }
                        ]
                    },
                    "type": "array"
                },
                "working_dir": {
                    "description": "Working directory. If not provided, the current working directory is used.",
                    "type": "string"
                },
                "description": {
                    "description": "Description of the model. This parameter is only used in the model repository or when providing the model as a service.",
                    "type": "string"
                },
                "allow_threading": {
                    "description": "If True, comm connections will be set up so that the model-side comms can be used by more than one thread. Defaults to False.",
                    "type": "boolean",
                    "format": "checkbox"
                },
                "validation_command": {
                    "description": "Path to a validation command that can be used to verify that the model ran as expected. A non-zero return code is taken to indicate failure.",
                    "type": "string"
                },
                "strace_flags": {
                    "default": [
                        "-e",
                        "trace=memory"
                    ],
                    "description": "Flags to pass to strace (or dtrace). Defaults to [].",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "contact_email": {
                    "description": "Email address that should be used to contact the maintainer of the model. This parameter is only used in the model repository.",
                    "type": "string"
                },
                "builddir": {
                    "description": "Directory where the build should be saved. Defaults to <sourcedir>/build. It can be relative to working_dir or absolute.",
                    "type": "string"
                },
                "buildfile": {
                    "type": "string"
                },
                "compiler": {
                    "description": "Command or path to executable that should be used to compile the model. If not provided, the compiler will be determined based on configuration options for the language (if present) and the registered compilers that are available on the current operating system.",
                    "type": "string"
                },
                "compiler_flags": {
                    "default": [],
                    "description": "Flags that should be passed to the compiler during compilation. If nto provided, the compiler flags will be determined based on configuration options for the language (if present), the compiler defaults, and the default_compiler_flags class attribute.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "configuration": {
                    "default": "Release",
                    "description": "Build type/configuration that should be built. Defaults to 'Release'.",
                    "type": "string"
                },
                "disable_python_c_api": {
                    "description": "If True, the Python C API will be disabled. Defaults to False.",
                    "type": "boolean",
                    "format": "checkbox"
                },
                "env_compiler": {
                    "description": "Environment variable where the compiler executable should be stored for use within the Makefile. If not provided, this will be determined by the target language driver.",
                    "type": "string"
                },
                "env_compiler_flags": {
                    "description": "Environment variable where the compiler flags should be stored (including those required to compile against the |yggdrasil| interface). If not provided, this will be determined by the target language driver.",
                    "type": "string"
                },
                "env_linker": {
                    "description": "Environment variable where the linker executable should be stored for use within the Makefile. If not provided, this will be determined by the target language driver.",
                    "type": "string"
                },
                "env_linker_flags": {
                    "description": "Environment variable where the linker flags should be stored (including those required to link against the |yggdrasil| interface). If not provided, this will be determined by the target language driver.",
                    "type": "string"
                },
                "linker": {
                    "description": "Command or path to executable that should be used to link the model. If not provided, the linker will be determined based on configuration options for the language (if present) and the registered linkers that are available on the current operating system",
                    "type": "string"
                },
                "linker_flags": {
                    "default": [],
                    "description": "Flags that should be passed to the linker during compilation. If not provided, the linker flags will be determined based on configuration options for the language (if present), the linker defaults, and the default_linker_flags class attribute.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "source_files": {
                    "default": [],
                    "description": "Source files that should be compiled into an executable. Defaults to an empty list and the driver will search for a source file based on the model executable (the first model argument).",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "sourcedir": {
                    "description": "Source directory to call cmake on. If not provided it is set to working_dir. This should be the directory containing the CMakeLists.txt file. It can be relative to working_dir or absolute.",
                    "type": "string"
                },
                "target": {
                    "description": "Make target that should be built to create the model executable. Defaults to None.",
                    "type": "string"
                },
                "target_compiler": {
                    "description": "Compilation tool that should be used to compile the target language. Defaults to None and will be set based on the selected language driver.",
                    "type": "string"
                },
                "target_compiler_flags": {
                    "description": "Compilation flags that should be passed to the target language compiler. Defaults to [].",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "target_language": {
                    "description": "Language that the target is written in. Defaults to None and will be set based on the source files provided.",
                    "type": "string"
                },
                "target_linker": {
                    "description": "Compilation tool that should be used to link the target language. Defaults to None and will be set based on the selected language driver.",
                    "type": "string"
                },
                "target_linker_flags": {
                    "description": "Linking flags that should be passed to the target language linker. Defaults to [].",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "with_asan": {
                    "description": "If True, the model will be compiled and linked with the address sanitizer enabled (if there is one available for the selected compiler).",
                    "type": "boolean",
                    "format": "checkbox"
                },
                "interpreter": {
                    "description": "Name or path of interpreter executable that should be used to run the model. If not provided, the interpreter will be determined based on configuration options for the language (if present) and the default_interpreter class attribute.",
                    "type": "string"
                },
                "interpreter_flags": {
                    "default": [],
                    "description": "Flags that should be passed to the interpreter when running the model. If not provided, the flags are determined based on configuration options for the language (if present) and the default_interpreter_flags class attribute.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "skip_interpreter": {
                    "default": false,
                    "description": "If True, no interpreter will be added to the arguments. This should only be used for subclasses that will not be invoking the model via the command line. Defaults to False.",
                    "type": "boolean",
                    "format": "checkbox"
                },
                "standard": {
                    "default": "f2003",
                    "description": "Fortran standard that should be used. Defaults to 'f2003'.",
                    "enum": [
                        "f2003",
                        "f2008"
                    ],
                    "type": "string"
                },
                "makedir": {
                    "description": "Directory where make should be invoked from if it is not the same as the directory containing the makefile. Defaults to directory containing makefile if provided, otherwise working_dir.",
                    "type": "string"
                },
                "makefile": {
                    "default": "Makefile",
                    "description": "Path to make file either absolute, relative to makedir (if provided), or relative to working_dir. Defaults to Makefile.",
                    "type": "string"
                },
                "use_symunit": {
                    "default": false,
                    "description": "If True, input/output variables with units will be represented in Matlab using symunit. Defaults to False.",
                    "type": "boolean",
                    "format": "checkbox"
                },
                "copy_xml_to_osr": {
                    "default": false,
                    "description": "If True, the XML file(s) will be copied to the OSR repository InputFiles direcitory before running. This is necessary if the XML file(s) use any of the files located there since OSR always assumes the included file paths are relative. Defaults to False.",
                    "type": "boolean",
                    "format": "checkbox"
                },
                "sync_vars_in": {
                    "default": [],
                    "description": "Variables that should be synchronized from other models. Defaults to [].",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "sync_vars_out": {
                    "default": [],
                    "description": "Variables that should be synchronized to other models. Defaults to [].",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "update_interval": {
                    "additionalProperties": {
                        "type": "number"
                    },
                    "default": {
                        "timesync": 1.0
                    },
                    "description": "Max simulation interval at which synchronization should occur (in days). Defaults to 1.0 if not provided. If the XML input file loads additional export modules that output at a shorter rate, the existing table of values will be extrapolated.",
                    "type": "object"
                },
                "input_transform": {
                    "description": "Transformation that should be applied to input to get it into the format expected by the model (including transformation to pytorch tensors as necessary). This function should return a tuple of arguments for the model.",
                    "type": "string"
                },
                "output_transform": {
                    "description": "Transformation that should be applied to model output to get it into a format that can be serialized by yggdrasil (i.e. not a pytorch Tensor or model sepecific type).",
                    "type": "string"
                },
                "weights": {
                    "description": "Path to file where model weights are saved",
                    "type": "string"
                },
                "integrator": {
                    "default": "cvode",
                    "description": "Name of integrator that should be used. Valid options include ['cvode', 'gillespie', 'rk4', 'rk45']. Defaults to 'cvode'.",
                    "enum": [
                        "cvode",
                        "gillespie",
                        "rk4",
                        "rk45"
                    ],
                    "type": "string"
                },
                "integrator_settings": {
                    "default": {},
                    "description": "Settings for the integrator. Defaults to empty dict.",
                    "type": "object"
                },
                "only_output_final_step": {
                    "default": false,
                    "description": "If True, only the final timestep is output. Defaults to False.",
                    "type": "boolean",
                    "format": "checkbox"
                },
                "reset": {
                    "default": false,
                    "description": "If True, the simulation will be reset to it's initial values before each call (including the start time). Defaults to False.",
                    "type": "boolean",
                    "format": "checkbox"
                },
                "selections": {
                    "default": [],
                    "description": "Variables to include in the output. Defaults to None and the time/floating selections will be returned.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "skip_start_time": {
                    "default": false,
                    "description": "If True, the results for the initial time step will not be output. Defaults to False. This option is ignored if only_output_final_step is True.",
                    "type": "boolean",
                    "format": "checkbox"
                },
                "start_time": {
                    "default": 0.0,
                    "description": "Time that simulation should be started from. If 'reset' is True, the start time will always be the provided value, otherwise, the start time will be the end of the previous call after the first call. Defaults to 0.0.",
                    "type": "number"
                },
                "steps": {
                    "default": 1,
                    "description": "Number of steps that should be output. Defaults to None.",
                    "type": "integer"
                },
                "additional_variables": {
                    "additionalProperties": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "default": {},
                    "type": "object"
                },
                "aggregation": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "string"
                        },
                        {
                            "additionalProperties": {
                                "anyOf": [
                                    {
                                        "type": "string"
                                    },
                                    {
                                        "type": "string"
                                    }
                                ]
                            },
                            "type": "object"
                        }
                    ],
                    "default": "mean"
                },
                "interpolation": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "additionalProperties": {
                                "oneOf": [
                                    {
                                        "type": "string"
                                    },
                                    {
                                        "properties": {
                                            "method": {
                                                "type": "string"
                                            }
                                        },
                                        "required": [
                                            "method"
                                        ],
                                        "type": "object"
                                    }
                                ]
                            },
                            "type": "object"
                        },
                        {
                            "properties": {
                                "method": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "method"
                            ],
                            "type": "object"
                        }
                    ],
                    "default": "index"
                },
                "synonyms": {
                    "additionalProperties": {
                        "additionalProperties": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "properties": {
                                        "alt": {
                                            "anyOf": [
                                                {
                                                    "type": "string"
                                                },
                                                {
                                                    "items": {
                                                        "type": "string"
                                                    },
                                                    "type": "array"
                                                }
                                            ]
                                        },
                                        "alt2base": {
                                            "type": "string"
                                        },
                                        "base2alt": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "alt",
                                        "alt2base",
                                        "base2alt"
                                    ],
                                    "type": "object"
                                }
                            ]
                        },
                        "type": "object"
                    },
                    "default": {},
                    "description": "Mapping from model names to mappings from base variables names to information about one or more alternate variable names used by the named model that should be converted to the base variable. Values for providing information about alternate variables can either be strings (implies equivalence with the base variable in everything but name and units) or mappings with the keys:",
                    "type": "object"
                }
            },
            "required": [
                "inputs",
                "name",
                "outputs"
            ],
            "type": "object",
            "pushProperties": {
                "$properties/inputs/items/anyOf/0/allOf/0/properties/default_file": [
                    "working_dir"
                ],
                "$properties/inputs/items/anyOf/2": [
                    "working_dir"
                ],
                "$properties/outputs/items/anyOf/0/allOf/0/properties/default_file": [
                    "working_dir"
                ],
                "$properties/outputs/items/anyOf/2": [
                    "working_dir"
                ]
            },
            "dependencies": {
                "driver": [
                    "args"
                ]
            }
        },
        "model-subtype-executable": {
            "additionalProperties": true,
            "description": "Schema for model component ['executable'] subtype.",
            "properties": {
                "language": {
                    "default": "executable",
                    "description": "Model is an executable.",
                    "enum": [
                        "executable"
                    ],
                    "type": "string"
                },
                "args": {
                    "allowSingular": true,
                    "description": "The path to the file containing the model program that will be run by the driver for the model's language and/or a list of arguments that should be passed as input to the model program or language executable (e.g. source code or configuration file for a domain specific language).",
                    "items": {
                        "type": [
                            "string",
                            "number"
                        ]
                    },
                    "type": "array"
                }
            },
            "required": [
                "args",
                "language"
            ],
            "type": "object"
        },
        "model-subtype-cmake": {
            "additionalProperties": true,
            "description": "Schema for model component ['cmake'] subtype.",
            "properties": {
                "language": {
                    "default": "cmake",
                    "description": "Model is written in C/C++ and has a CMake build system.",
                    "enum": [
                        "cmake"
                    ],
                    "type": "string"
                },
                "args": {
                    "allowSingular": true,
                    "description": "The path to the file containing the model program that will be run by the driver for the model's language and/or a list of arguments that should be passed as input to the model program or language executable (e.g. source code or configuration file for a domain specific language).",
                    "items": {
                        "type": [
                            "string",
                            "number"
                        ]
                    },
                    "type": "array"
                },
                "builddir": {
                    "description": "Directory where the build should be saved. Defaults to <sourcedir>/build. It can be relative to working_dir or absolute.",
                    "type": "string"
                },
                "buildfile": {
                    "type": "string"
                },
                "compiler": {
                    "description": "Command or path to executable that should be used to compile the model. If not provided, the compiler will be determined based on configuration options for the language (if present) and the registered compilers that are available on the current operating system.",
                    "type": "string"
                },
                "compiler_flags": {
                    "default": [],
                    "description": "Flags that should be passed to the compiler during compilation. If nto provided, the compiler flags will be determined based on configuration options for the language (if present), the compiler defaults, and the default_compiler_flags class attribute.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "configuration": {
                    "default": "Release",
                    "description": "Build type/configuration that should be built. Defaults to 'Release'.",
                    "type": "string"
                },
                "disable_python_c_api": {
                    "description": "If True, the Python C API will be disabled. Defaults to False.",
                    "type": "boolean",
                    "format": "checkbox"
                },
                "env_compiler": {
                    "description": "Environment variable where the compiler executable should be stored for use within the Makefile. If not provided, this will be determined by the target language driver.",
                    "type": "string"
                },
                "env_compiler_flags": {
                    "description": "Environment variable where the compiler flags should be stored (including those required to compile against the |yggdrasil| interface). If not provided, this will be determined by the target language driver.",
                    "type": "string"
                },
                "env_linker": {
                    "description": "Environment variable where the linker executable should be stored for use within the Makefile. If not provided, this will be determined by the target language driver.",
                    "type": "string"
                },
                "env_linker_flags": {
                    "description": "Environment variable where the linker flags should be stored (including those required to link against the |yggdrasil| interface). If not provided, this will be determined by the target language driver.",
                    "type": "string"
                },
                "linker": {
                    "description": "Command or path to executable that should be used to link the model. If not provided, the linker will be determined based on configuration options for the language (if present) and the registered linkers that are available on the current operating system",
                    "type": "string"
                },
                "linker_flags": {
                    "default": [],
                    "description": "Flags that should be passed to the linker during compilation. If not provided, the linker flags will be determined based on configuration options for the language (if present), the linker defaults, and the default_linker_flags class attribute.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "source_files": {
                    "default": [],
                    "description": "Source files that should be compiled into an executable. Defaults to an empty list and the driver will search for a source file based on the model executable (the first model argument).",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "sourcedir": {
                    "description": "Source directory to call cmake on. If not provided it is set to working_dir. This should be the directory containing the CMakeLists.txt file. It can be relative to working_dir or absolute.",
                    "type": "string"
                },
                "target": {
                    "description": "Make target that should be built to create the model executable. Defaults to None.",
                    "type": "string"
                },
                "target_compiler": {
                    "description": "Compilation tool that should be used to compile the target language. Defaults to None and will be set based on the selected language driver.",
                    "type": "string"
                },
                "target_compiler_flags": {
                    "description": "Compilation flags that should be passed to the target language compiler. Defaults to [].",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "target_language": {
                    "description": "Language that the target is written in. Defaults to None and will be set based on the source files provided.",
                    "type": "string"
                },
                "target_linker": {
                    "description": "Compilation tool that should be used to link the target language. Defaults to None and will be set based on the selected language driver.",
                    "type": "string"
                },
                "target_linker_flags": {
                    "description": "Linking flags that should be passed to the target language linker. Defaults to [].",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "with_asan": {
                    "description": "If True, the model will be compiled and linked with the address sanitizer enabled (if there is one available for the selected compiler).",
                    "type": "boolean",
                    "format": "checkbox"
                }
            },
            "required": [
                "args",
                "language"
            ],
            "type": "object"
        },
        "model-subtype-c": {
            "additionalProperties": true,
            "description": "Schema for model component ['c'] subtype.",
            "properties": {
                "language": {
                    "default": "c",
                    "description": "Model is written in C.",
                    "enum": [
                        "c"
                    ],
                    "type": "string"
                },
                "args": {
                    "allowSingular": true,
                    "description": "The path to the file containing the model program that will be run by the driver for the model's language and/or a list of arguments that should be passed as input to the model program or language executable (e.g. source code or configuration file for a domain specific language).",
                    "items": {
                        "type": [
                            "string",
                            "number"
                        ]
                    },
                    "type": "array"
                },
                "compiler": {
                    "description": "Command or path to executable that should be used to compile the model. If not provided, the compiler will be determined based on configuration options for the language (if present) and the registered compilers that are available on the current operating system.",
                    "type": "string"
                },
                "compiler_flags": {
                    "default": [],
                    "description": "Flags that should be passed to the compiler during compilation. If nto provided, the compiler flags will be determined based on configuration options for the language (if present), the compiler defaults, and the default_compiler_flags class attribute.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "disable_python_c_api": {
                    "description": "If True, the Python C API will be disabled. Defaults to False.",
                    "type": "boolean",
                    "format": "checkbox"
                },
                "linker": {
                    "description": "Command or path to executable that should be used to link the model. If not provided, the linker will be determined based on configuration options for the language (if present) and the registered linkers that are available on the current operating system",
                    "type": "string"
                },
                "linker_flags": {
                    "default": [],
                    "description": "Flags that should be passed to the linker during compilation. If not provided, the linker flags will be determined based on configuration options for the language (if present), the linker defaults, and the default_linker_flags class attribute.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "source_files": {
                    "default": [],
                    "description": "Source files that should be compiled into an executable. Defaults to an empty list and the driver will search for a source file based on the model executable (the first model argument).",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "with_asan": {
                    "description": "If True, the model will be compiled and linked with the address sanitizer enabled (if there is one available for the selected compiler).",
                    "type": "boolean",
                    "format": "checkbox"
                }
            },
            "required": [
                "args",
                "language"
            ],
            "type": "object"
        },
        "model-subtype-cpp": {
            "additionalProperties": true,
            "description": "Schema for model component ['c++', 'cpp', 'cxx'] subtype.",
            "properties": {
                "language": {
                    "default": "c++",
                    "description": "Model is written in C++.",
                    "enum": [
                        "c++",
                        "cpp",
                        "cxx"
                    ],
                    "type": "string"
                },
                "args": {
                    "allowSingular": true,
                    "description": "The path to the file containing the model program that will be run by the driver for the model's language and/or a list of arguments that should be passed as input to the model program or language executable (e.g. source code or configuration file for a domain specific language).",
                    "items": {
                        "type": [
                            "string",
                            "number"
                        ]
                    },
                    "type": "array"
                },
                "compiler": {
                    "description": "Command or path to executable that should be used to compile the model. If not provided, the compiler will be determined based on configuration options for the language (if present) and the registered compilers that are available on the current operating system.",
                    "type": "string"
                },
                "compiler_flags": {
                    "default": [],
                    "description": "Flags that should be passed to the compiler during compilation. If nto provided, the compiler flags will be determined based on configuration options for the language (if present), the compiler defaults, and the default_compiler_flags class attribute.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "disable_python_c_api": {
                    "description": "If True, the Python C API will be disabled. Defaults to False.",
                    "type": "boolean",
                    "format": "checkbox"
                },
                "linker": {
                    "description": "Command or path to executable that should be used to link the model. If not provided, the linker will be determined based on configuration options for the language (if present) and the registered linkers that are available on the current operating system",
                    "type": "string"
                },
                "linker_flags": {
                    "default": [],
                    "description": "Flags that should be passed to the linker during compilation. If not provided, the linker flags will be determined based on configuration options for the language (if present), the linker defaults, and the default_linker_flags class attribute.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "source_files": {
                    "default": [],
                    "description": "Source files that should be compiled into an executable. Defaults to an empty list and the driver will search for a source file based on the model executable (the first model argument).",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "with_asan": {
                    "description": "If True, the model will be compiled and linked with the address sanitizer enabled (if there is one available for the selected compiler).",
                    "type": "boolean",
                    "format": "checkbox"
                }
            },
            "required": [
                "args",
                "language"
            ],
            "type": "object"
        },
        "model-subtype-dummy": {
            "additionalProperties": true,
            "description": "Schema for model component ['dummy'] subtype.",
            "properties": {
                "language": {
                    "default": "dummy",
                    "description": "The programming language that the model is written in. A list of available languages can be found :ref:`here <schema_table_model_subtype_rst>`.",
                    "enum": [
                        "dummy"
                    ],
                    "type": "string"
                },
                "args": {
                    "allowSingular": true,
                    "description": "The path to the file containing the model program that will be run by the driver for the model's language and/or a list of arguments that should be passed as input to the model program or language executable (e.g. source code or configuration file for a domain specific language).",
                    "items": {
                        "type": [
                            "string",
                            "number"
                        ]
                    },
                    "type": "array"
                },
                "interpreter": {
                    "description": "Name or path of interpreter executable that should be used to run the model. If not provided, the interpreter will be determined based on configuration options for the language (if present) and the default_interpreter class attribute.",
                    "type": "string"
                },
                "interpreter_flags": {
                    "default": [],
                    "description": "Flags that should be passed to the interpreter when running the model. If not provided, the flags are determined based on configuration options for the language (if present) and the default_interpreter_flags class attribute.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "skip_interpreter": {
                    "default": false,
                    "description": "If True, no interpreter will be added to the arguments. This should only be used for subclasses that will not be invoking the model via the command line. Defaults to False.",
                    "type": "boolean",
                    "format": "checkbox"
                }
            },
            "required": [
                "args",
                "language"
            ],
            "type": "object"
        },
        "model-subtype-fortran": {
            "additionalProperties": true,
            "description": "Schema for model component ['fortran'] subtype.",
            "properties": {
                "language": {
                    "default": "fortran",
                    "description": "Model is written in Fortran.",
                    "enum": [
                        "fortran"
                    ],
                    "type": "string"
                },
                "args": {
                    "allowSingular": true,
                    "description": "The path to the file containing the model program that will be run by the driver for the model's language and/or a list of arguments that should be passed as input to the model program or language executable (e.g. source code or configuration file for a domain specific language).",
                    "items": {
                        "type": [
                            "string",
                            "number"
                        ]
                    },
                    "type": "array"
                },
                "compiler": {
                    "description": "Command or path to executable that should be used to compile the model. If not provided, the compiler will be determined based on configuration options for the language (if present) and the registered compilers that are available on the current operating system.",
                    "type": "string"
                },
                "compiler_flags": {
                    "default": [],
                    "description": "Flags that should be passed to the compiler during compilation. If nto provided, the compiler flags will be determined based on configuration options for the language (if present), the compiler defaults, and the default_compiler_flags class attribute.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "disable_python_c_api": {
                    "description": "If True, the Python C API will be disabled. Defaults to False.",
                    "type": "boolean",
                    "format": "checkbox"
                },
                "linker": {
                    "description": "Command or path to executable that should be used to link the model. If not provided, the linker will be determined based on configuration options for the language (if present) and the registered linkers that are available on the current operating system",
                    "type": "string"
                },
                "linker_flags": {
                    "default": [],
                    "description": "Flags that should be passed to the linker during compilation. If not provided, the linker flags will be determined based on configuration options for the language (if present), the linker defaults, and the default_linker_flags class attribute.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "source_files": {
                    "default": [],
                    "description": "Source files that should be compiled into an executable. Defaults to an empty list and the driver will search for a source file based on the model executable (the first model argument).",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "standard": {
                    "default": "f2003",
                    "description": "Fortran standard that should be used. Defaults to 'f2003'.",
                    "enum": [
                        "f2003",
                        "f2008"
                    ],
                    "type": "string"
                },
                "with_asan": {
                    "description": "If True, the model will be compiled and linked with the address sanitizer enabled (if there is one available for the selected compiler).",
                    "type": "boolean",
                    "format": "checkbox"
                }
            },
            "required": [
                "args",
                "language"
            ],
            "type": "object"
        },
        "model-subtype-julia": {
            "additionalProperties": true,
            "description": "Schema for model component ['julia'] subtype.",
            "properties": {
                "language": {
                    "default": "julia",
                    "description": "Model is written in Julia.",
                    "enum": [
                        "julia"
                    ],
                    "type": "string"
                },
                "args": {
                    "allowSingular": true,
                    "description": "The path to the file containing the model program that will be run by the driver for the model's language and/or a list of arguments that should be passed as input to the model program or language executable (e.g. source code or configuration file for a domain specific language).",
                    "items": {
                        "type": [
                            "string",
                            "number"
                        ]
                    },
                    "type": "array"
                },
                "interpreter": {
                    "description": "Name or path of interpreter executable that should be used to run the model. If not provided, the interpreter will be determined based on configuration options for the language (if present) and the default_interpreter class attribute.",
                    "type": "string"
                },
                "interpreter_flags": {
                    "default": [],
                    "description": "Flags that should be passed to the interpreter when running the model. If not provided, the flags are determined based on configuration options for the language (if present) and the default_interpreter_flags class attribute.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "skip_interpreter": {
                    "default": false,
                    "description": "If True, no interpreter will be added to the arguments. This should only be used for subclasses that will not be invoking the model via the command line. Defaults to False.",
                    "type": "boolean",
                    "format": "checkbox"
                }
            },
            "required": [
                "args",
                "language"
            ],
            "type": "object"
        },
        "model-subtype-lpy": {
            "additionalProperties": true,
            "description": "Schema for model component ['lpy'] subtype.",
            "properties": {
                "language": {
                    "default": "lpy",
                    "description": "Model is an LPy system.",
                    "enum": [
                        "lpy"
                    ],
                    "type": "string"
                },
                "args": {
                    "allowSingular": true,
                    "description": "The path to the file containing the model program that will be run by the driver for the model's language and/or a list of arguments that should be passed as input to the model program or language executable (e.g. source code or configuration file for a domain specific language).",
                    "items": {
                        "type": [
                            "string",
                            "number"
                        ]
                    },
                    "type": "array"
                },
                "interpreter": {
                    "description": "Name or path of interpreter executable that should be used to run the model. If not provided, the interpreter will be determined based on configuration options for the language (if present) and the default_interpreter class attribute.",
                    "type": "string"
                },
                "interpreter_flags": {
                    "default": [],
                    "description": "Flags that should be passed to the interpreter when running the model. If not provided, the flags are determined based on configuration options for the language (if present) and the default_interpreter_flags class attribute.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "skip_interpreter": {
                    "default": false,
                    "description": "If True, no interpreter will be added to the arguments. This should only be used for subclasses that will not be invoking the model via the command line. Defaults to False.",
                    "type": "boolean",
                    "format": "checkbox"
                }
            },
            "required": [
                "args",
                "language"
            ],
            "type": "object"
        },
        "model-subtype-mpi": {
            "additionalProperties": true,
            "description": "Schema for model component ['mpi'] subtype.",
            "properties": {
                "language": {
                    "default": "mpi",
                    "description": "Model is being run on another MPI process and this driver is used as as stand-in to monitor it on the root process.",
                    "enum": [
                        "mpi"
                    ],
                    "type": "string"
                },
                "args": {
                    "allowSingular": true,
                    "description": "The path to the file containing the model program that will be run by the driver for the model's language and/or a list of arguments that should be passed as input to the model program or language executable (e.g. source code or configuration file for a domain specific language).",
                    "items": {
                        "type": [
                            "string",
                            "number"
                        ]
                    },
                    "type": "array"
                }
            },
            "required": [
                "args",
                "language"
            ],
            "type": "object"
        },
        "model-subtype-make": {
            "additionalProperties": true,
            "description": "Schema for model component ['make'] subtype.",
            "properties": {
                "language": {
                    "default": "make",
                    "description": "Model is written in C/C++ and has a Makefile for compilation.",
                    "enum": [
                        "make"
                    ],
                    "type": "string"
                },
                "args": {
                    "allowSingular": true,
                    "description": "The path to the file containing the model program that will be run by the driver for the model's language and/or a list of arguments that should be passed as input to the model program or language executable (e.g. source code or configuration file for a domain specific language).",
                    "items": {
                        "type": [
                            "string",
                            "number"
                        ]
                    },
                    "type": "array"
                },
                "builddir": {
                    "type": "string"
                },
                "buildfile": {
                    "type": "string"
                },
                "compiler": {
                    "description": "Command or path to executable that should be used to compile the model. If not provided, the compiler will be determined based on configuration options for the language (if present) and the registered compilers that are available on the current operating system.",
                    "type": "string"
                },
                "compiler_flags": {
                    "default": [],
                    "description": "Flags that should be passed to the compiler during compilation. If nto provided, the compiler flags will be determined based on configuration options for the language (if present), the compiler defaults, and the default_compiler_flags class attribute.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "disable_python_c_api": {
                    "description": "If True, the Python C API will be disabled. Defaults to False.",
                    "type": "boolean",
                    "format": "checkbox"
                },
                "env_compiler": {
                    "description": "Environment variable where the compiler executable should be stored for use within the Makefile. If not provided, this will be determined by the target language driver.",
                    "type": "string"
                },
                "env_compiler_flags": {
                    "description": "Environment variable where the compiler flags should be stored (including those required to compile against the |yggdrasil| interface). If not provided, this will be determined by the target language driver.",
                    "type": "string"
                },
                "env_linker": {
                    "description": "Environment variable where the linker executable should be stored for use within the Makefile. If not provided, this will be determined by the target language driver.",
                    "type": "string"
                },
                "env_linker_flags": {
                    "description": "Environment variable where the linker flags should be stored (including those required to link against the |yggdrasil| interface). If not provided, this will be determined by the target language driver.",
                    "type": "string"
                },
                "linker": {
                    "description": "Command or path to executable that should be used to link the model. If not provided, the linker will be determined based on configuration options for the language (if present) and the registered linkers that are available on the current operating system",
                    "type": "string"
                },
                "linker_flags": {
                    "default": [],
                    "description": "Flags that should be passed to the linker during compilation. If not provided, the linker flags will be determined based on configuration options for the language (if present), the linker defaults, and the default_linker_flags class attribute.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "makedir": {
                    "description": "Directory where make should be invoked from if it is not the same as the directory containing the makefile. Defaults to directory containing makefile if provided, otherwise working_dir.",
                    "type": "string"
                },
                "makefile": {
                    "default": "Makefile",
                    "description": "Path to make file either absolute, relative to makedir (if provided), or relative to working_dir. Defaults to Makefile.",
                    "type": "string"
                },
                "source_files": {
                    "default": [],
                    "description": "Source files that should be compiled into an executable. Defaults to an empty list and the driver will search for a source file based on the model executable (the first model argument).",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "target": {
                    "description": "Make target that should be built to create the model executable. Defaults to None.",
                    "type": "string"
                },
                "target_compiler": {
                    "description": "Compilation tool that should be used to compile the target language. Defaults to None and will be set based on the selected language driver.",
                    "type": "string"
                },
                "target_compiler_flags": {
                    "description": "Compilation flags that should be passed to the target language compiler. Defaults to [].",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "target_language": {
                    "description": "Language that the target is written in. Defaults to None and will be set based on the source files provided.",
                    "type": "string"
                },
                "target_linker": {
                    "description": "Compilation tool that should be used to link the target language. Defaults to None and will be set based on the selected language driver.",
                    "type": "string"
                },
                "target_linker_flags": {
                    "description": "Linking flags that should be passed to the target language linker. Defaults to [].",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "with_asan": {
                    "description": "If True, the model will be compiled and linked with the address sanitizer enabled (if there is one available for the selected compiler).",
                    "type": "boolean",
                    "format": "checkbox"
                }
            },
            "required": [
                "args",
                "language"
            ],
            "type": "object"
        },
        "model-subtype-matlab": {
            "additionalProperties": true,
            "description": "Schema for model component ['matlab'] subtype.",
            "properties": {
                "language": {
                    "default": "matlab",
                    "description": "Model is written in Matlab.",
                    "enum": [
                        "matlab"
                    ],
                    "type": "string"
                },
                "args": {
                    "allowSingular": true,
                    "description": "The path to the file containing the model program that will be run by the driver for the model's language and/or a list of arguments that should be passed as input to the model program or language executable (e.g. source code or configuration file for a domain specific language).",
                    "items": {
                        "type": [
                            "string",
                            "number"
                        ]
                    },
                    "type": "array"
                },
                "interpreter": {
                    "description": "Name or path of interpreter executable that should be used to run the model. If not provided, the interpreter will be determined based on configuration options for the language (if present) and the default_interpreter class attribute.",
                    "type": "string"
                },
                "interpreter_flags": {
                    "default": [],
                    "description": "Flags that should be passed to the interpreter when running the model. If not provided, the flags are determined based on configuration options for the language (if present) and the default_interpreter_flags class attribute.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "skip_interpreter": {
                    "default": false,
                    "description": "If True, no interpreter will be added to the arguments. This should only be used for subclasses that will not be invoking the model via the command line. Defaults to False.",
                    "type": "boolean",
                    "format": "checkbox"
                },
                "use_symunit": {
                    "default": false,
                    "description": "If True, input/output variables with units will be represented in Matlab using symunit. Defaults to False.",
                    "type": "boolean",
                    "format": "checkbox"
                }
            },
            "required": [
                "args",
                "language"
            ],
            "type": "object"
        },
        "model-subtype-osr": {
            "additionalProperties": true,
            "description": "Schema for model component ['osr'] subtype.",
            "properties": {
                "language": {
                    "default": "osr",
                    "description": "Model is an OSR model.",
                    "enum": [
                        "osr"
                    ],
                    "type": "string"
                },
                "args": {
                    "allowSingular": true,
                    "description": "The path to the file containing the model program that will be run by the driver for the model's language and/or a list of arguments that should be passed as input to the model program or language executable (e.g. source code or configuration file for a domain specific language).",
                    "items": {
                        "type": [
                            "string",
                            "number"
                        ]
                    },
                    "type": "array"
                },
                "copy_xml_to_osr": {
                    "default": false,
                    "description": "If True, the XML file(s) will be copied to the OSR repository InputFiles direcitory before running. This is necessary if the XML file(s) use any of the files located there since OSR always assumes the included file paths are relative. Defaults to False.",
                    "type": "boolean",
                    "format": "checkbox"
                },
                "disable_python_c_api": {
                    "type": "boolean",
                    "format": "checkbox"
                },
                "sync_vars_in": {
                    "default": [],
                    "description": "Variables that should be synchronized from other models. Defaults to [].",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "sync_vars_out": {
                    "default": [],
                    "description": "Variables that should be synchronized to other models. Defaults to [].",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "update_interval": {
                    "additionalProperties": {
                        "type": "number"
                    },
                    "default": {
                        "timesync": 1.0
                    },
                    "description": "Max simulation interval at which synchronization should occur (in days). Defaults to 1.0 if not provided. If the XML input file loads additional export modules that output at a shorter rate, the existing table of values will be extrapolated.",
                    "type": "object"
                },
                "with_asan": {
                    "type": "boolean",
                    "format": "checkbox"
                }
            },
            "required": [
                "args",
                "language"
            ],
            "type": "object"
        },
        "model-subtype-pytorch": {
            "additionalProperties": true,
            "description": "Schema for model component ['pytorch'] subtype.",
            "properties": {
                "language": {
                    "default": "pytorch",
                    "description": "Model is a PyTorch model",
                    "enum": [
                        "pytorch"
                    ],
                    "type": "string"
                },
                "args": {
                    "allowSingular": true,
                    "description": "The path to the file containing the model program that will be run by the driver for the model's language and/or a list of arguments that should be passed as input to the model program or language executable (e.g. source code or configuration file for a domain specific language).",
                    "items": {
                        "type": [
                            "string",
                            "number"
                        ]
                    },
                    "type": "array"
                },
                "input_transform": {
                    "description": "Transformation that should be applied to input to get it into the format expected by the model (including transformation to pytorch tensors as necessary). This function should return a tuple of arguments for the model.",
                    "type": "string"
                },
                "interpreter": {
                    "description": "Name or path of interpreter executable that should be used to run the model. If not provided, the interpreter will be determined based on configuration options for the language (if present) and the default_interpreter class attribute.",
                    "type": "string"
                },
                "interpreter_flags": {
                    "default": [],
                    "description": "Flags that should be passed to the interpreter when running the model. If not provided, the flags are determined based on configuration options for the language (if present) and the default_interpreter_flags class attribute.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "output_transform": {
                    "description": "Transformation that should be applied to model output to get it into a format that can be serialized by yggdrasil (i.e. not a pytorch Tensor or model sepecific type).",
                    "type": "string"
                },
                "skip_interpreter": {
                    "default": false,
                    "description": "If True, no interpreter will be added to the arguments. This should only be used for subclasses that will not be invoking the model via the command line. Defaults to False.",
                    "type": "boolean",
                    "format": "checkbox"
                },
                "weights": {
                    "description": "Path to file where model weights are saved",
                    "type": "string"
                }
            },
            "required": [
                "args",
                "language",
                "weights"
            ],
            "type": "object"
        },
        "model-subtype-python": {
            "additionalProperties": true,
            "description": "Schema for model component ['python'] subtype.",
            "properties": {
                "language": {
                    "default": "python",
                    "description": "Model is written in Python.",
                    "enum": [
                        "python"
                    ],
                    "type": "string"
                },
                "args": {
                    "allowSingular": true,
                    "description": "The path to the file containing the model program that will be run by the driver for the model's language and/or a list of arguments that should be passed as input to the model program or language executable (e.g. source code or configuration file for a domain specific language).",
                    "items": {
                        "type": [
                            "string",
                            "number"
                        ]
                    },
                    "type": "array"
                },
                "interpreter": {
                    "description": "Name or path of interpreter executable that should be used to run the model. If not provided, the interpreter will be determined based on configuration options for the language (if present) and the default_interpreter class attribute.",
                    "type": "string"
                },
                "interpreter_flags": {
                    "default": [],
                    "description": "Flags that should be passed to the interpreter when running the model. If not provided, the flags are determined based on configuration options for the language (if present) and the default_interpreter_flags class attribute.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "skip_interpreter": {
                    "default": false,
                    "description": "If True, no interpreter will be added to the arguments. This should only be used for subclasses that will not be invoking the model via the command line. Defaults to False.",
                    "type": "boolean",
                    "format": "checkbox"
                }
            },
            "required": [
                "args",
                "language"
            ],
            "type": "object"
        },
        "model-subtype-R": {
            "additionalProperties": true,
            "description": "Schema for model component ['R', 'r'] subtype.",
            "properties": {
                "language": {
                    "default": "R",
                    "description": "Model is written in R.",
                    "enum": [
                        "R",
                        "r"
                    ],
                    "type": "string"
                },
                "args": {
                    "allowSingular": true,
                    "description": "The path to the file containing the model program that will be run by the driver for the model's language and/or a list of arguments that should be passed as input to the model program or language executable (e.g. source code or configuration file for a domain specific language).",
                    "items": {
                        "type": [
                            "string",
                            "number"
                        ]
                    },
                    "type": "array"
                },
                "interpreter": {
                    "description": "Name or path of interpreter executable that should be used to run the model. If not provided, the interpreter will be determined based on configuration options for the language (if present) and the default_interpreter class attribute.",
                    "type": "string"
                },
                "interpreter_flags": {
                    "default": [],
                    "description": "Flags that should be passed to the interpreter when running the model. If not provided, the flags are determined based on configuration options for the language (if present) and the default_interpreter_flags class attribute.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "skip_interpreter": {
                    "default": false,
                    "description": "If True, no interpreter will be added to the arguments. This should only be used for subclasses that will not be invoking the model via the command line. Defaults to False.",
                    "type": "boolean",
                    "format": "checkbox"
                }
            },
            "required": [
                "args",
                "language"
            ],
            "type": "object"
        },
        "model-subtype-sbml": {
            "additionalProperties": true,
            "description": "Schema for model component ['sbml'] subtype.",
            "properties": {
                "language": {
                    "default": "sbml",
                    "description": "Model is an SBML model.",
                    "enum": [
                        "sbml"
                    ],
                    "type": "string"
                },
                "args": {
                    "allowSingular": true,
                    "description": "The path to the file containing the model program that will be run by the driver for the model's language and/or a list of arguments that should be passed as input to the model program or language executable (e.g. source code or configuration file for a domain specific language).",
                    "items": {
                        "type": [
                            "string",
                            "number"
                        ]
                    },
                    "type": "array"
                },
                "integrator": {
                    "default": "cvode",
                    "description": "Name of integrator that should be used. Valid options include ['cvode', 'gillespie', 'rk4', 'rk45']. Defaults to 'cvode'.",
                    "enum": [
                        "cvode",
                        "gillespie",
                        "rk4",
                        "rk45"
                    ],
                    "type": "string"
                },
                "integrator_settings": {
                    "default": {},
                    "description": "Settings for the integrator. Defaults to empty dict.",
                    "type": "object"
                },
                "interpreter": {
                    "description": "Name or path of interpreter executable that should be used to run the model. If not provided, the interpreter will be determined based on configuration options for the language (if present) and the default_interpreter class attribute.",
                    "type": "string"
                },
                "interpreter_flags": {
                    "default": [],
                    "description": "Flags that should be passed to the interpreter when running the model. If not provided, the flags are determined based on configuration options for the language (if present) and the default_interpreter_flags class attribute.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "only_output_final_step": {
                    "default": false,
                    "description": "If True, only the final timestep is output. Defaults to False.",
                    "type": "boolean",
                    "format": "checkbox"
                },
                "reset": {
                    "default": false,
                    "description": "If True, the simulation will be reset to it's initial values before each call (including the start time). Defaults to False.",
                    "type": "boolean",
                    "format": "checkbox"
                },
                "selections": {
                    "default": [],
                    "description": "Variables to include in the output. Defaults to None and the time/floating selections will be returned.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "skip_interpreter": {
                    "default": false,
                    "description": "If True, no interpreter will be added to the arguments. This should only be used for subclasses that will not be invoking the model via the command line. Defaults to False.",
                    "type": "boolean",
                    "format": "checkbox"
                },
                "skip_start_time": {
                    "default": false,
                    "description": "If True, the results for the initial time step will not be output. Defaults to False. This option is ignored if only_output_final_step is True.",
                    "type": "boolean",
                    "format": "checkbox"
                },
                "start_time": {
                    "default": 0.0,
                    "description": "Time that simulation should be started from. If 'reset' is True, the start time will always be the provided value, otherwise, the start time will be the end of the previous call after the first call. Defaults to 0.0.",
                    "type": "number"
                },
                "steps": {
                    "default": 1,
                    "description": "Number of steps that should be output. Defaults to None.",
                    "type": "integer"
                }
            },
            "required": [
                "args",
                "language"
            ],
            "type": "object"
        },
        "model-subtype-timesync": {
            "additionalProperties": true,
            "description": "Schema for model component ['timesync'] subtype.",
            "properties": {
                "language": {
                    "description": "Model is dedicated to synchronizing timesteps between other models.",
                    "enum": [
                        "timesync"
                    ],
                    "type": "string"
                },
                "additional_variables": {
                    "additionalProperties": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "default": {},
                    "type": "object"
                },
                "aggregation": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "string"
                        },
                        {
                            "additionalProperties": {
                                "anyOf": [
                                    {
                                        "type": "string"
                                    },
                                    {
                                        "type": "string"
                                    }
                                ]
                            },
                            "type": "object"
                        }
                    ],
                    "default": "mean"
                },
                "args": {
                    "allowSingular": true,
                    "default": [],
                    "description": "The path to the file containing the model program that will be run by the driver for the model's language and/or a list of arguments that should be passed as input to the model program or language executable (e.g. source code or configuration file for a domain specific language).",
                    "items": {
                        "type": [
                            "string",
                            "number"
                        ]
                    },
                    "type": "array"
                },
                "interpolation": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "additionalProperties": {
                                "oneOf": [
                                    {
                                        "type": "string"
                                    },
                                    {
                                        "properties": {
                                            "method": {
                                                "type": "string"
                                            }
                                        },
                                        "required": [
                                            "method"
                                        ],
                                        "type": "object"
                                    }
                                ]
                            },
                            "type": "object"
                        },
                        {
                            "properties": {
                                "method": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "method"
                            ],
                            "type": "object"
                        }
                    ],
                    "default": "index"
                },
                "interpreter": {
                    "description": "Name or path of interpreter executable that should be used to run the model. If not provided, the interpreter will be determined based on configuration options for the language (if present) and the default_interpreter class attribute.",
                    "type": "string"
                },
                "interpreter_flags": {
                    "default": [],
                    "description": "Flags that should be passed to the interpreter when running the model. If not provided, the flags are determined based on configuration options for the language (if present) and the default_interpreter_flags class attribute.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "skip_interpreter": {
                    "default": false,
                    "description": "If True, no interpreter will be added to the arguments. This should only be used for subclasses that will not be invoking the model via the command line. Defaults to False.",
                    "type": "boolean",
                    "format": "checkbox"
                },
                "synonyms": {
                    "additionalProperties": {
                        "additionalProperties": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "properties": {
                                        "alt": {
                                            "anyOf": [
                                                {
                                                    "type": "string"
                                                },
                                                {
                                                    "items": {
                                                        "type": "string"
                                                    },
                                                    "type": "array"
                                                }
                                            ]
                                        },
                                        "alt2base": {
                                            "type": "string"
                                        },
                                        "base2alt": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "alt",
                                        "alt2base",
                                        "base2alt"
                                    ],
                                    "type": "object"
                                }
                            ]
                        },
                        "type": "object"
                    },
                    "default": {},
                    "description": "Mapping from model names to mappings from base variables names to information about one or more alternate variable names used by the named model that should be converted to the base variable. Values for providing information about alternate variables can either be strings (implies equivalence with the base variable in everything but name and units) or mappings with the keys:",
                    "type": "object"
                }
            },
            "required": [
                "args",
                "language"
            ],
            "type": "object"
        },
        "serializer": {
            "description": "Base schema for all subtypes of serializer components.",
            "additionalProperties": false,
            "properties": {
                "newline": {
                    "default": "\n",
                    "description": "One or more characters indicating a newline. Defaults to '\\n'.",
                    "type": "string"
                },
                "datatype": {
                    "$ref": "#/definitions/schema"
                },
                "comment": {
                    "default": "# ",
                    "description": "One or more characters indicating a comment. Defaults to '# '.",
                    "type": "string"
                },
                "seritype": {
                    "default": "default",
                    "description": "Serializer type.",
                    "enum": [
                        "cabo",
                        "default",
                        "direct",
                        "functional",
                        "json",
                        "map",
                        "mat",
                        "obj",
                        "pandas",
                        "pickle",
                        "ply",
                        "table",
                        "yaml"
                    ],
                    "type": "string"
                },
                "delimiter": {
                    "default": "\t",
                    "description": "Delimiter that should be used to separate name/value pairs in the map. Defaults to \\t.",
                    "type": "string",
                    "options": {
                        "dependencies": {
                            "seritype": [
                                "map",
                                "table",
                                "cabo",
                                "pandas"
                            ]
                        }
                    }
                },
                "as_array": {
                    "default": false,
                    "description": "If True, each of the arguments being serialized/deserialized will be arrays that are converted to/from bytes in column major ('F') order. Otherwise, each argument should be a scalar. Defaults to False.",
                    "type": "boolean",
                    "options": {
                        "dependencies": {
                            "seritype": [
                                "table"
                            ]
                        }
                    },
                    "format": "checkbox"
                },
                "field_names": {
                    "aliases": [
                        "column_names"
                    ],
                    "allowSingular": true,
                    "description": "The names of fields in the format string. If not provided, names are set based on the order of the fields in the format string.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "options": {
                        "dependencies": {
                            "seritype": [
                                "table",
                                "pandas"
                            ]
                        }
                    }
                },
                "field_units": {
                    "aliases": [
                        "column_units"
                    ],
                    "allowSingular": true,
                    "description": "The units of fields in the format string. If not provided, all fields are assumed to be dimensionless.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "options": {
                        "dependencies": {
                            "seritype": [
                                "table",
                                "pandas"
                            ]
                        }
                    }
                },
                "format_str": {
                    "description": "If provided, this string will be used to format messages from a list of arguments and parse messages to get a list of arguments in C printf/scanf style. Defaults to None and messages are assumed to already be bytes.",
                    "type": "string",
                    "options": {
                        "dependencies": {
                            "seritype": [
                                "table",
                                "pandas"
                            ]
                        }
                    }
                },
                "use_astropy": {
                    "default": false,
                    "description": "If True, the astropy package will be used to serialize/deserialize table. Defaults to False.",
                    "type": "boolean",
                    "options": {
                        "dependencies": {
                            "seritype": [
                                "table",
                                "pandas"
                            ]
                        }
                    },
                    "format": "checkbox"
                },
                "encoded_datatype": {
                    "$ref": "#/definitions/schema"
                },
                "func_deserialize": {
                    "description": "Callable object that takes objects of a type that conforms to encoded_datatype and returns a deserialized Python object. Defaults to None and the default deserialization for encoded_datatype will be used.",
                    "type": "string",
                    "options": {
                        "dependencies": {
                            "seritype": [
                                "functional"
                            ]
                        }
                    }
                },
                "func_serialize": {
                    "description": "Callable object that takes Python objects as input and returns a representation that conforms to encoded_datatype. Defaults to None and the default serialization for encoded_datatype will be used.",
                    "type": "string",
                    "options": {
                        "dependencies": {
                            "seritype": [
                                "functional"
                            ]
                        }
                    }
                },
                "indent": {
                    "default": "\t",
                    "description": "String or number of spaces that should be used to indent each level within the seiralized structure. Defaults to '\\t'.",
                    "type": [
                        "string",
                        "integer"
                    ],
                    "options": {
                        "dependencies": {
                            "seritype": [
                                "json",
                                "yaml"
                            ]
                        }
                    }
                },
                "sort_keys": {
                    "default": true,
                    "description": "If True, the serialization of dictionaries will be in key sorted order. Defaults to True.",
                    "type": "boolean",
                    "options": {
                        "dependencies": {
                            "seritype": [
                                "json"
                            ]
                        }
                    },
                    "format": "checkbox"
                },
                "prune_duplicates": {
                    "default": true,
                    "description": "If True, serialized meshes in array format will be pruned of duplicates when being normalized into a Ply object. If False, duplicates will not be pruned. Defaults to True.",
                    "type": "boolean",
                    "options": {
                        "dependencies": {
                            "seritype": [
                                "obj",
                                "ply"
                            ]
                        }
                    },
                    "format": "checkbox"
                },
                "no_header": {
                    "default": false,
                    "description": "If True, headers will not be read or serialized from/to tables. Defaults to False.",
                    "type": "boolean",
                    "options": {
                        "dependencies": {
                            "seritype": [
                                "pandas"
                            ]
                        }
                    },
                    "format": "checkbox"
                },
                "str_as_bytes": {
                    "default": false,
                    "description": "If True, strings in columns are read as bytes. Defaults to False.",
                    "type": "boolean",
                    "options": {
                        "dependencies": {
                            "seritype": [
                                "pandas"
                            ]
                        }
                    },
                    "format": "checkbox"
                },
                "default_flow_style": {
                    "default": false,
                    "description": "If True, nested collections will be serialized in the block style. If False, they will always be serialized in the flow style. See `PyYAML Documentation <https://pyyaml.org/wiki/PyYAMLDocumentation>`_.",
                    "type": "boolean",
                    "options": {
                        "dependencies": {
                            "seritype": [
                                "yaml"
                            ]
                        }
                    },
                    "format": "checkbox"
                },
                "encoding": {
                    "default": "utf-8",
                    "description": "Encoding that should be used to serialize the object. Defaults to 'utf-8'.",
                    "type": "string",
                    "options": {
                        "dependencies": {
                            "seritype": [
                                "yaml"
                            ]
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "seritype"
            ]
        },
        "serializer-subtype-base": {
            "additionalProperties": false,
            "description": "Base schema for all subtypes of serializer components.",
            "properties": {
                "newline": {
                    "default": "\n",
                    "description": "One or more characters indicating a newline. Defaults to '\\n'.",
                    "type": "string"
                },
                "datatype": {
                    "$ref": "#/definitions/schema"
                },
                "comment": {
                    "default": "# ",
                    "description": "One or more characters indicating a comment. Defaults to '# '.",
                    "type": "string"
                },
                "seritype": {
                    "default": "default",
                    "description": "Serializer type.",
                    "enum": [
                        "cabo",
                        "default",
                        "direct",
                        "functional",
                        "json",
                        "map",
                        "mat",
                        "obj",
                        "pandas",
                        "pickle",
                        "ply",
                        "table",
                        "yaml"
                    ],
                    "type": "string"
                },
                "delimiter": {
                    "default": "\t",
                    "description": "Delimiter that should be used to separate name/value pairs in the map. Defaults to \\t.",
                    "type": "string"
                },
                "as_array": {
                    "default": false,
                    "description": "If True, each of the arguments being serialized/deserialized will be arrays that are converted to/from bytes in column major ('F') order. Otherwise, each argument should be a scalar. Defaults to False.",
                    "type": "boolean",
                    "format": "checkbox"
                },
                "field_names": {
                    "aliases": [
                        "column_names"
                    ],
                    "allowSingular": true,
                    "description": "The names of fields in the format string. If not provided, names are set based on the order of the fields in the format string.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "field_units": {
                    "aliases": [
                        "column_units"
                    ],
                    "allowSingular": true,
                    "description": "The units of fields in the format string. If not provided, all fields are assumed to be dimensionless.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "format_str": {
                    "description": "If provided, this string will be used to format messages from a list of arguments and parse messages to get a list of arguments in C printf/scanf style. Defaults to None and messages are assumed to already be bytes.",
                    "type": "string"
                },
                "use_astropy": {
                    "default": false,
                    "description": "If True, the astropy package will be used to serialize/deserialize table. Defaults to False.",
                    "type": "boolean",
                    "format": "checkbox"
                },
                "encoded_datatype": {
                    "$ref": "#/definitions/schema"
                },
                "func_deserialize": {
                    "description": "Callable object that takes objects of a type that conforms to encoded_datatype and returns a deserialized Python object. Defaults to None and the default deserialization for encoded_datatype will be used.",
                    "type": "string"
                },
                "func_serialize": {
                    "description": "Callable object that takes Python objects as input and returns a representation that conforms to encoded_datatype. Defaults to None and the default serialization for encoded_datatype will be used.",
                    "type": "string"
                },
                "indent": {
                    "default": "\t",
                    "description": "String or number of spaces that should be used to indent each level within the seiralized structure. Defaults to '\\t'.",
                    "type": [
                        "string",
                        "integer"
                    ]
                },
                "sort_keys": {
                    "default": true,
                    "description": "If True, the serialization of dictionaries will be in key sorted order. Defaults to True.",
                    "type": "boolean",
                    "format": "checkbox"
                },
                "prune_duplicates": {
                    "default": true,
                    "description": "If True, serialized meshes in array format will be pruned of duplicates when being normalized into a Ply object. If False, duplicates will not be pruned. Defaults to True.",
                    "type": "boolean",
                    "format": "checkbox"
                },
                "no_header": {
                    "default": false,
                    "description": "If True, headers will not be read or serialized from/to tables. Defaults to False.",
                    "type": "boolean",
                    "format": "checkbox"
                },
                "str_as_bytes": {
                    "default": false,
                    "description": "If True, strings in columns are read as bytes. Defaults to False.",
                    "type": "boolean",
                    "format": "checkbox"
                },
                "default_flow_style": {
                    "default": false,
                    "description": "If True, nested collections will be serialized in the block style. If False, they will always be serialized in the flow style. See `PyYAML Documentation <https://pyyaml.org/wiki/PyYAMLDocumentation>`_.",
                    "type": "boolean",
                    "format": "checkbox"
                },
                "encoding": {
                    "default": "utf-8",
                    "description": "Encoding that should be used to serialize the object. Defaults to 'utf-8'.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "serializer-subtype-default": {
            "additionalProperties": true,
            "description": "Schema for serializer component ['default'] subtype.",
            "properties": {
                "seritype": {
                    "default": "default",
                    "description": "Default serializer that uses |yggdrasil|'s extended JSON serialization based on a provided type definition (See discussion :ref:`here <serialization_rst>`).",
                    "enum": [
                        "default"
                    ],
                    "type": "string"
                }
            },
            "required": [
                "seritype"
            ],
            "type": "object"
        },
        "serializer-subtype-map": {
            "additionalProperties": true,
            "description": "Schema for serializer component ['map'] subtype.",
            "properties": {
                "seritype": {
                    "default": "map",
                    "description": "Serialzation of mapping between key/value pairs with one pair per line and using a character delimiter to separate keys and values.",
                    "enum": [
                        "map"
                    ],
                    "type": "string"
                },
                "delimiter": {
                    "default": "\t",
                    "description": "Delimiter that should be used to separate name/value pairs in the map. Defaults to \\t.",
                    "type": "string"
                }
            },
            "required": [
                "seritype"
            ],
            "type": "object"
        },
        "serializer-subtype-table": {
            "additionalProperties": true,
            "description": "Schema for serializer component ['table'] subtype.",
            "properties": {
                "seritype": {
                    "default": "table",
                    "description": "ASCII tab (or otherwise) delimited table.",
                    "enum": [
                        "table"
                    ],
                    "type": "string"
                },
                "as_array": {
                    "default": false,
                    "description": "If True, each of the arguments being serialized/deserialized will be arrays that are converted to/from bytes in column major ('F') order. Otherwise, each argument should be a scalar. Defaults to False.",
                    "type": "boolean",
                    "format": "checkbox"
                },
                "delimiter": {
                    "aliases": [
                        "column"
                    ],
                    "default": "\t",
                    "description": "Character(s) that should be used to separate columns. Defaults to '\\t'.",
                    "type": "string"
                },
                "field_names": {
                    "aliases": [
                        "column_names"
                    ],
                    "allowSingular": true,
                    "description": "The names of fields in the format string. If not provided, names are set based on the order of the fields in the format string.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "field_units": {
                    "aliases": [
                        "column_units"
                    ],
                    "allowSingular": true,
                    "description": "The units of fields in the format string. If not provided, all fields are assumed to be dimensionless.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "format_str": {
                    "description": "If provided, this string will be used to format messages from a list of arguments and parse messages to get a list of arguments in C printf/scanf style. Defaults to None and messages are assumed to already be bytes.",
                    "type": "string"
                },
                "use_astropy": {
                    "default": false,
                    "description": "If True, the astropy package will be used to serialize/deserialize table. Defaults to False.",
                    "type": "boolean",
                    "format": "checkbox"
                }
            },
            "required": [
                "seritype"
            ],
            "type": "object"
        },
        "serializer-subtype-cabo": {
            "additionalProperties": true,
            "description": "Schema for serializer component ['cabo'] subtype.",
            "properties": {
                "seritype": {
                    "default": "cabo",
                    "description": "Serialization of mapping between keys and scalar or array values as used in the CABO parameter files.",
                    "enum": [
                        "cabo"
                    ],
                    "type": "string"
                },
                "delimiter": {
                    "default": " = ",
                    "description": "Delimiter that should be used to separate name/value pairs in the map. Defaults to \\t.",
                    "type": "string"
                }
            },
            "required": [
                "seritype"
            ],
            "type": "object"
        },
        "serializer-subtype-direct": {
            "additionalProperties": true,
            "description": "Schema for serializer component ['direct'] subtype.",
            "properties": {
                "seritype": {
                    "default": "direct",
                    "description": "Direct serialization of bytes.",
                    "enum": [
                        "direct"
                    ],
                    "type": "string"
                }
            },
            "required": [
                "seritype"
            ],
            "type": "object"
        },
        "serializer-subtype-functional": {
            "additionalProperties": true,
            "description": "Schema for serializer component ['functional'] subtype.",
            "properties": {
                "seritype": {
                    "default": "functional",
                    "description": "Serializer that uses provied function to serialize messages.",
                    "enum": [
                        "functional"
                    ],
                    "type": "string"
                },
                "encoded_datatype": {
                    "$ref": "#/definitions/schema"
                },
                "func_deserialize": {
                    "description": "Callable object that takes objects of a type that conforms to encoded_datatype and returns a deserialized Python object. Defaults to None and the default deserialization for encoded_datatype will be used.",
                    "type": "string"
                },
                "func_serialize": {
                    "description": "Callable object that takes Python objects as input and returns a representation that conforms to encoded_datatype. Defaults to None and the default serialization for encoded_datatype will be used.",
                    "type": "string"
                }
            },
            "required": [
                "seritype"
            ],
            "type": "object"
        },
        "serializer-subtype-json": {
            "additionalProperties": true,
            "description": "Schema for serializer component ['json'] subtype.",
            "properties": {
                "seritype": {
                    "default": "json",
                    "description": "Serializes Python objects using the JSON standard.",
                    "enum": [
                        "json"
                    ],
                    "type": "string"
                },
                "indent": {
                    "default": "\t",
                    "description": "String or number of spaces that should be used to indent each level within the seiralized structure. Defaults to '\\t'.",
                    "type": [
                        "string",
                        "integer"
                    ]
                },
                "sort_keys": {
                    "default": true,
                    "description": "If True, the serialization of dictionaries will be in key sorted order. Defaults to True.",
                    "type": "boolean",
                    "format": "checkbox"
                }
            },
            "required": [
                "seritype"
            ],
            "type": "object"
        },
        "serializer-subtype-mat": {
            "additionalProperties": true,
            "description": "Schema for serializer component ['mat'] subtype.",
            "properties": {
                "seritype": {
                    "default": "mat",
                    "description": "Serializes objects using the Matlab .mat format.",
                    "enum": [
                        "mat"
                    ],
                    "type": "string"
                }
            },
            "required": [
                "seritype"
            ],
            "type": "object"
        },
        "serializer-subtype-obj": {
            "additionalProperties": true,
            "description": "Schema for serializer component ['obj'] subtype.",
            "properties": {
                "seritype": {
                    "default": "obj",
                    "description": "Serialize 3D structures using Obj format.",
                    "enum": [
                        "obj"
                    ],
                    "type": "string"
                },
                "prune_duplicates": {
                    "default": true,
                    "description": "If True, serialized meshes in array format will be pruned of duplicates when being normalized into a Ply object. If False, duplicates will not be pruned. Defaults to True.",
                    "type": "boolean",
                    "format": "checkbox"
                }
            },
            "required": [
                "seritype"
            ],
            "type": "object"
        },
        "serializer-subtype-pandas": {
            "additionalProperties": true,
            "description": "Schema for serializer component ['pandas'] subtype.",
            "properties": {
                "seritype": {
                    "default": "pandas",
                    "description": "Serializes tables using the pandas package.",
                    "enum": [
                        "pandas"
                    ],
                    "type": "string"
                },
                "delimiter": {
                    "aliases": [
                        "column"
                    ],
                    "default": "\t",
                    "description": "Character(s) that should be used to separate columns. Defaults to '\\t'.",
                    "type": "string"
                },
                "field_names": {
                    "aliases": [
                        "column_names"
                    ],
                    "allowSingular": true,
                    "description": "The names of fields in the format string. If not provided, names are set based on the order of the fields in the format string.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "field_units": {
                    "aliases": [
                        "column_units"
                    ],
                    "allowSingular": true,
                    "description": "The units of fields in the format string. If not provided, all fields are assumed to be dimensionless.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "format_str": {
                    "description": "If provided, this string will be used to format messages from a list of arguments and parse messages to get a list of arguments in C printf/scanf style. Defaults to None and messages are assumed to already be bytes.",
                    "type": "string"
                },
                "no_header": {
                    "default": false,
                    "description": "If True, headers will not be read or serialized from/to tables. Defaults to False.",
                    "type": "boolean",
                    "format": "checkbox"
                },
                "str_as_bytes": {
                    "default": false,
                    "description": "If True, strings in columns are read as bytes. Defaults to False.",
                    "type": "boolean",
                    "format": "checkbox"
                },
                "use_astropy": {
                    "default": false,
                    "description": "If True, the astropy package will be used to serialize/deserialize table. Defaults to False.",
                    "type": "boolean",
                    "format": "checkbox"
                }
            },
            "required": [
                "seritype"
            ],
            "type": "object"
        },
        "serializer-subtype-pickle": {
            "additionalProperties": true,
            "description": "Schema for serializer component ['pickle'] subtype.",
            "properties": {
                "seritype": {
                    "default": "pickle",
                    "description": "Serialize any Python object using a Python pickle.",
                    "enum": [
                        "pickle"
                    ],
                    "type": "string"
                }
            },
            "required": [
                "seritype"
            ],
            "type": "object"
        },
        "serializer-subtype-ply": {
            "additionalProperties": true,
            "description": "Schema for serializer component ['ply'] subtype.",
            "properties": {
                "seritype": {
                    "default": "ply",
                    "description": "Serialize 3D structures using `Ply format <http://paulbourke.net/dataformats/ply/>`_.",
                    "enum": [
                        "ply"
                    ],
                    "type": "string"
                },
                "prune_duplicates": {
                    "default": true,
                    "description": "If True, serialized meshes in array format will be pruned of duplicates when being normalized into a Ply object. If False, duplicates will not be pruned. Defaults to True.",
                    "type": "boolean",
                    "format": "checkbox"
                }
            },
            "required": [
                "seritype"
            ],
            "type": "object"
        },
        "serializer-subtype-yaml": {
            "additionalProperties": true,
            "description": "Schema for serializer component ['yaml'] subtype.",
            "properties": {
                "seritype": {
                    "default": "yaml",
                    "description": "Serializes Python objects using the YAML standard.",
                    "enum": [
                        "yaml"
                    ],
                    "type": "string"
                },
                "default_flow_style": {
                    "default": false,
                    "description": "If True, nested collections will be serialized in the block style. If False, they will always be serialized in the flow style. See `PyYAML Documentation <https://pyyaml.org/wiki/PyYAMLDocumentation>`_.",
                    "type": "boolean",
                    "format": "checkbox"
                },
                "encoding": {
                    "default": "utf-8",
                    "description": "Encoding that should be used to serialize the object. Defaults to 'utf-8'.",
                    "type": "string"
                },
                "indent": {
                    "default": "\t",
                    "description": "String or number of spaces that should be used to indent each level within the seiralized structure. Defaults to '\\t'.",
                    "type": [
                        "string",
                        "integer"
                    ]
                }
            },
            "required": [
                "seritype"
            ],
            "type": "object"
        },
        "transform": {
            "description": "Base schema for all subtypes of transform components.",
            "additionalProperties": false,
            "allowSingular": "transformtype",
            "properties": {
                "transformtype": {
                    "description": "Consolidate values into an array",
                    "enum": [
                        "array",
                        "direct",
                        "filter",
                        "function",
                        "iterate",
                        "map",
                        "map_fields",
                        "pandas",
                        "select_fields",
                        "select_scalar",
                        "statement"
                    ],
                    "type": "string"
                },
                "original_datatype": {
                    "$ref": "#/definitions/schema"
                },
                "field_names": {
                    "description": "Names of fields in the array.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "options": {
                        "dependencies": {
                            "transformtype": [
                                "array",
                                "map",
                                "pandas"
                            ]
                        }
                    }
                },
                "filter": {
                    "$ref": "#/definitions/filter",
                    "description": "Filter used to exclude some messages based on their contents.",
                    "options": {
                        "dependencies": {
                            "transformtype": [
                                "filter"
                            ]
                        }
                    }
                },
                "function": {
                    "description": "The handle for a callable Python object (e.g. function) that should be used to transform messages or a string of the form \"<function file>:<function name>\" identifying a function where \"<function file>\" is the module or Python file containing the function and \"<function name>\" is the name of the function. The function should take the message as input and return the transformed message.",
                    "type": "string",
                    "options": {
                        "dependencies": {
                            "transformtype": [
                                "function"
                            ]
                        }
                    }
                },
                "map": {
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A mapping from original field name to new field names.",
                    "type": "object",
                    "options": {
                        "dependencies": {
                            "transformtype": [
                                "map_fields"
                            ]
                        }
                    }
                },
                "original_order": {
                    "description": "The original order of fields that should be used for selecting from lists/tuples.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "options": {
                        "dependencies": {
                            "transformtype": [
                                "select_fields",
                                "select_scalar"
                            ]
                        }
                    }
                },
                "selected": {
                    "description": "A list of fields that should be selected.",
                    "items": {
                        "type": [
                            "string",
                            "integer"
                        ]
                    },
                    "type": "array",
                    "options": {
                        "dependencies": {
                            "transformtype": [
                                "select_fields"
                            ]
                        }
                    }
                },
                "single_as_scalar": {
                    "description": "If True and only a single field is selected, the transformed messages will be scalars rather than arrays with single elements. Defaults to False.",
                    "type": "boolean",
                    "options": {
                        "dependencies": {
                            "transformtype": [
                                "select_fields"
                            ]
                        }
                    },
                    "format": "checkbox"
                },
                "index": {
                    "default": 0,
                    "description": "Array index or dictionary key to select. Defaults to selecting the first element in an array or the first key alphabetically.",
                    "type": [
                        "integer",
                        "string"
                    ],
                    "options": {
                        "dependencies": {
                            "transformtype": [
                                "select_scalar"
                            ]
                        }
                    }
                },
                "statement": {
                    "description": "Python statement in terms of the message as represented by the string \"%x%\" that should evaluate to the transformed message. The statement should only use a limited set of builtins and the math library (See yggdrasil.tools.safe_eval). If more complex relationships are required, use the FunctionTransform class.",
                    "type": "string",
                    "options": {
                        "dependencies": {
                            "transformtype": [
                                "statement"
                            ]
                        }
                    }
                }
            },
            "type": "object"
        },
        "transform-subtype-base": {
            "additionalProperties": false,
            "allowSingular": "transformtype",
            "description": "Base schema for all subtypes of transform components.",
            "properties": {
                "transformtype": {
                    "description": "Consolidate values into an array",
                    "enum": [
                        "array",
                        "direct",
                        "filter",
                        "function",
                        "iterate",
                        "map",
                        "map_fields",
                        "pandas",
                        "select_fields",
                        "select_scalar",
                        "statement"
                    ],
                    "type": "string"
                },
                "original_datatype": {
                    "$ref": "#/definitions/schema"
                },
                "field_names": {
                    "description": "Names of fields in the array.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "filter": {
                    "$ref": "#/definitions/filter",
                    "description": "Filter used to exclude some messages based on their contents."
                },
                "function": {
                    "description": "The handle for a callable Python object (e.g. function) that should be used to transform messages or a string of the form \"<function file>:<function name>\" identifying a function where \"<function file>\" is the module or Python file containing the function and \"<function name>\" is the name of the function. The function should take the message as input and return the transformed message.",
                    "type": "string"
                },
                "map": {
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A mapping from original field name to new field names.",
                    "type": "object"
                },
                "original_order": {
                    "description": "The original order of fields that should be used for selecting from lists/tuples.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "selected": {
                    "description": "A list of fields that should be selected.",
                    "items": {
                        "type": [
                            "string",
                            "integer"
                        ]
                    },
                    "type": "array"
                },
                "single_as_scalar": {
                    "description": "If True and only a single field is selected, the transformed messages will be scalars rather than arrays with single elements. Defaults to False.",
                    "type": "boolean",
                    "format": "checkbox"
                },
                "index": {
                    "default": 0,
                    "description": "Array index or dictionary key to select. Defaults to selecting the first element in an array or the first key alphabetically.",
                    "type": [
                        "integer",
                        "string"
                    ]
                },
                "statement": {
                    "description": "Python statement in terms of the message as represented by the string \"%x%\" that should evaluate to the transformed message. The statement should only use a limited set of builtins and the math library (See yggdrasil.tools.safe_eval). If more complex relationships are required, use the FunctionTransform class.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "transform-subtype-array": {
            "additionalProperties": true,
            "allowSingular": "transformtype",
            "description": "Schema for transform component ['array'] subtype.",
            "properties": {
                "transformtype": {
                    "default": "array",
                    "description": "Consolidate values into an array",
                    "enum": [
                        "array"
                    ],
                    "type": "string"
                },
                "field_names": {
                    "description": "Names of fields in the array.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "transform-subtype-direct": {
            "additionalProperties": true,
            "allowSingular": "transformtype",
            "description": "Schema for transform component ['direct'] subtype.",
            "properties": {
                "transformtype": {
                    "default": "direct",
                    "description": "Pass the message through unchanged",
                    "enum": [
                        "direct"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "transform-subtype-filter": {
            "additionalProperties": true,
            "allowSingular": "transformtype",
            "description": "Schema for transform component ['filter'] subtype.",
            "properties": {
                "transformtype": {
                    "default": "filter",
                    "description": "Pass only some messages based on a filter",
                    "enum": [
                        "filter"
                    ],
                    "type": "string"
                },
                "filter": {
                    "$ref": "#/definitions/filter",
                    "description": "Filter used to exclude some messages based on their contents."
                }
            },
            "required": [
                "filter"
            ],
            "type": "object"
        },
        "transform-subtype-function": {
            "additionalProperties": true,
            "allowSingular": "transformtype",
            "description": "Schema for transform component ['function'] subtype.",
            "properties": {
                "transformtype": {
                    "default": "function",
                    "description": "Transform messages using a function.",
                    "enum": [
                        "function"
                    ],
                    "type": "string"
                },
                "function": {
                    "description": "The handle for a callable Python object (e.g. function) that should be used to transform messages or a string of the form \"<function file>:<function name>\" identifying a function where \"<function file>\" is the module or Python file containing the function and \"<function name>\" is the name of the function. The function should take the message as input and return the transformed message.",
                    "type": "string"
                }
            },
            "required": [
                "function"
            ],
            "type": "object"
        },
        "transform-subtype-iterate": {
            "additionalProperties": true,
            "allowSingular": "transformtype",
            "description": "Schema for transform component ['iterate'] subtype.",
            "properties": {
                "transformtype": {
                    "default": "iterate",
                    "description": "Split messages up into their iterable components",
                    "enum": [
                        "iterate"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "transform-subtype-map_fields": {
            "additionalProperties": true,
            "allowSingular": "transformtype",
            "description": "Schema for transform component ['map_fields'] subtype.",
            "properties": {
                "transformtype": {
                    "default": "map_fields",
                    "description": "Change the names of fields in a message",
                    "enum": [
                        "map_fields"
                    ],
                    "type": "string"
                },
                "map": {
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A mapping from original field name to new field names.",
                    "type": "object"
                }
            },
            "required": [
                "map"
            ],
            "type": "object"
        },
        "transform-subtype-map": {
            "additionalProperties": true,
            "allowSingular": "transformtype",
            "description": "Schema for transform component ['map'] subtype.",
            "properties": {
                "transformtype": {
                    "default": "map",
                    "description": "Convert an object into a dictionary.",
                    "enum": [
                        "map"
                    ],
                    "type": "string"
                },
                "field_names": {
                    "description": "A list of field names that should be used for array object. If not provided, names will be generated according to 'f0', 'f1', 'f2', etc.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "transform-subtype-pandas": {
            "additionalProperties": true,
            "allowSingular": "transformtype",
            "description": "Schema for transform component ['pandas'] subtype.",
            "properties": {
                "transformtype": {
                    "default": "pandas",
                    "description": "Convert messages into Pandas data frames",
                    "enum": [
                        "pandas"
                    ],
                    "type": "string"
                },
                "field_names": {
                    "description": "Names of fields in the array.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "transform-subtype-select_fields": {
            "additionalProperties": true,
            "allowSingular": "transformtype",
            "description": "Schema for transform component ['select_fields'] subtype.",
            "properties": {
                "transformtype": {
                    "default": "select_fields",
                    "description": "Select a subset of fields from a message",
                    "enum": [
                        "select_fields"
                    ],
                    "type": "string"
                },
                "original_order": {
                    "description": "The original order of fields that should be used for selecting from lists/tuples.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "selected": {
                    "description": "A list of fields that should be selected.",
                    "items": {
                        "type": [
                            "string",
                            "integer"
                        ]
                    },
                    "type": "array"
                },
                "single_as_scalar": {
                    "description": "If True and only a single field is selected, the transformed messages will be scalars rather than arrays with single elements. Defaults to False.",
                    "type": "boolean",
                    "format": "checkbox"
                }
            },
            "required": [
                "selected"
            ],
            "type": "object"
        },
        "transform-subtype-select_scalar": {
            "additionalProperties": true,
            "allowSingular": "transformtype",
            "description": "Schema for transform component ['select_scalar'] subtype.",
            "properties": {
                "transformtype": {
                    "default": "select_scalar",
                    "description": "Select a single field from a message",
                    "enum": [
                        "select_scalar"
                    ],
                    "type": "string"
                },
                "index": {
                    "default": 0,
                    "description": "Array index or dictionary key to select. Defaults to selecting the first element in an array or the first key alphabetically.",
                    "type": [
                        "integer",
                        "string"
                    ]
                },
                "original_order": {
                    "description": "The original order of fields that should be used for selecting from lists/tuples.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "transform-subtype-statement": {
            "additionalProperties": true,
            "allowSingular": "transformtype",
            "description": "Schema for transform component ['statement'] subtype.",
            "properties": {
                "transformtype": {
                    "default": "statement",
                    "description": "Transform messages according to a statement",
                    "enum": [
                        "statement"
                    ],
                    "type": "string"
                },
                "statement": {
                    "description": "Python statement in terms of the message as represented by the string \"%x%\" that should evaluate to the transformed message. The statement should only use a limited set of builtins and the math library (See yggdrasil.tools.safe_eval). If more complex relationships are required, use the FunctionTransform class.",
                    "type": "string"
                }
            },
            "required": [
                "statement"
            ],
            "type": "object"
        },
        "simpleTypes": {
            "enum": [
                "array",
                "boolean",
                "integer",
                "null",
                "number",
                "object",
                "string",
                "1darray",
                "any",
                "bytes",
                "class",
                "complex",
                "float",
                "function",
                "instance",
                "int",
                "ndarray",
                "obj",
                "ply",
                "schema",
                "uint",
                "unicode"
            ],
            "type": "string",
            "default": "bytes"
        },
        "schema": {
            "type": "object",
            "required": [
                "type"
            ],
            "properties": {
                "type": {
                    "$ref": "#/definitions/simpleTypes"
                },
                "subtype": {
                    "description": "The base type for each item.",
                    "enum": [
                        "string",
                        "complex",
                        "float",
                        "int",
                        "uint",
                        "bytes",
                        "unicode"
                    ],
                    "type": "string",
                    "options": {
                        "dependencies": {
                            "type": [
                                "1darray",
                                "ndarray"
                            ]
                        }
                    }
                },
                "units": {
                    "description": "Physical units.",
                    "type": "string",
                    "options": {
                        "dependencies": {
                            "type": [
                                "1darray",
                                "ndarray",
                                "int",
                                "uint",
                                "float",
                                "complex",
                                "string",
                                "bytes",
                                "unicode",
                                "number",
                                "integer"
                            ]
                        }
                    }
                },
                "precision": {
                    "description": "The size (in bits) of each item.",
                    "minimum": 1,
                    "type": "number",
                    "options": {
                        "dependencies": {
                            "type": [
                                "1darray",
                                "ndarray",
                                "int",
                                "uint",
                                "float",
                                "complex",
                                "string",
                                "bytes",
                                "unicode",
                                "number",
                                "integer"
                            ]
                        }
                    }
                },
                "length": {
                    "description": "Number of elements in the 1D array.",
                    "minimum": 1,
                    "type": "number",
                    "options": {
                        "dependencies": {
                            "type": [
                                "1darray"
                            ]
                        }
                    }
                },
                "shape": {
                    "description": "Shape of the ND array in each dimension.",
                    "items": {
                        "minimum": 1,
                        "type": "integer"
                    },
                    "type": "array",
                    "options": {
                        "dependencies": {
                            "type": [
                                "ndarray"
                            ]
                        }
                    }
                }
            }
        },
        "icomm": {
            "additionalProperties": false,
            "properties": {
                "datatype": {
                    "$ref": "#/definitions/schema"
                },
                "vars": {
                    "allowSingular": true,
                    "description": "Names of variables to be sent/received by this comm. Defaults to [].",
                    "items": {
                        "allowSingular": "name",
                        "properties": {
                            "datatype": {
                                "$ref": "#/definitions/schema"
                            },
                            "name": {
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "filter": {
                    "$ref": "#/definitions/filter",
                    "description": "Filter that will be used to determine when messages should be sent/received. Ignored if not provided."
                },
                "outside_loop": {
                    "default": false,
                    "description": "If True, and the comm is an input/outputs to/from a model being wrapped. The receive/send calls for this comm will be outside the loop for the model. Defaults to False.",
                    "type": "boolean",
                    "format": "checkbox"
                },
                "transform": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/transform"
                    },
                    "description": "One or more transformations that will be applied to messages that are sent/received. Ignored if not provided."
                },
                "default_file": {
                    "$ref": "#/definitions/file",
                    "description": "Comm information for a file that input should be drawn from (for input comms) or that output should be sent to (for output comms) in the event that a yaml does not pair the comm with another model comm or a file."
                },
                "default_value": {
                    "description": "Value that should be returned in the event that a yaml does not pair the comm with another model comm or a file.",
                    "type": [
                        "number",
                        "string",
                        "boolean",
                        "object",
                        "array",
                        "null"
                    ]
                },
                "name": {
                    "description": "Name used for component in log messages.",
                    "pattern": "^([A-Za-z0-9-_]+:)?[A-Za-z0-9-_]+(::[A-Za-z0-9-_]+)?$",
                    "type": "string",
                    "propertyOrder": 0
                },
                "format_str": {
                    "description": "String that should be used to format/parse messages. Default to None.",
                    "type": "string"
                },
                "working_dir": {
                    "description": "Working directory. If not provided, the current working directory is used.",
                    "type": "string"
                },
                "count": {
                    "default": 1,
                    "type": "integer",
                    "options": {
                        "dependencies": {
                            "commtype": [
                                "value"
                            ]
                        }
                    }
                }
            },
            "required": [
                "datatype",
                "name"
            ],
            "type": "object",
            "dependencies": {
                "driver": [
                    "args"
                ]
            },
            "oneOf": [
                {
                    "title": "default file",
                    "required": [
                        "default_file"
                    ],
                    "not": {
                        "required": [
                            "default_value"
                        ]
                    }
                },
                {
                    "title": "default value",
                    "required": [
                        "default_value"
                    ],
                    "not": {
                        "required": [
                            "default_file"
                        ]
                    }
                }
            ]
        },
        "ocomm": {
            "additionalProperties": false,
            "properties": {
                "datatype": {
                    "$ref": "#/definitions/schema"
                },
                "vars": {
                    "allowSingular": true,
                    "description": "Names of variables to be sent/received by this comm. Defaults to [].",
                    "items": {
                        "allowSingular": "name",
                        "properties": {
                            "datatype": {
                                "$ref": "#/definitions/schema"
                            },
                            "name": {
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "filter": {
                    "$ref": "#/definitions/filter",
                    "description": "Filter that will be used to determine when messages should be sent/received. Ignored if not provided."
                },
                "outside_loop": {
                    "default": false,
                    "description": "If True, and the comm is an input/outputs to/from a model being wrapped. The receive/send calls for this comm will be outside the loop for the model. Defaults to False.",
                    "type": "boolean",
                    "format": "checkbox"
                },
                "transform": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/transform"
                    },
                    "description": "One or more transformations that will be applied to messages that are sent/received. Ignored if not provided."
                },
                "default_file": {
                    "$ref": "#/definitions/file",
                    "description": "Comm information for a file that input should be drawn from (for input comms) or that output should be sent to (for output comms) in the event that a yaml does not pair the comm with another model comm or a file."
                },
                "name": {
                    "description": "Name used for component in log messages.",
                    "pattern": "^([A-Za-z0-9-_]+:)?[A-Za-z0-9-_]+(::[A-Za-z0-9-_]+)?$",
                    "type": "string",
                    "propertyOrder": 0
                },
                "format_str": {
                    "description": "String that should be used to format/parse messages. Default to None.",
                    "type": "string"
                },
                "working_dir": {
                    "description": "Working directory. If not provided, the current working directory is used.",
                    "type": "string"
                },
                "count": {
                    "default": 1,
                    "type": "integer",
                    "options": {
                        "dependencies": {
                            "commtype": [
                                "value"
                            ]
                        }
                    }
                }
            },
            "required": [
                "datatype",
                "name"
            ],
            "type": "object",
            "dependencies": {
                "driver": [
                    "args"
                ]
            }
        }
    },
    "required": [
        "args",
        "inputs",
        "name",
        "outputs",
        "language",
        "description",
        "repository_url",
        "repository_commit"
    ],
    "additionalProperties": false,
    "properties": {
        "dependencies": {
            "description": "A list of packages required by the model that are written in the same language as the model. If the package requires dependencies outside the language of the model. use the additional_dependencies parameter to provide them. If you need a version of the package from a specific package manager, a mapping with 'package' and 'package_manager' fields can be provided instead of just the name of the package.",
            "items": {
                "oneOf": [
                    {
                        "type": "string"
                    },
                    {
                        "additionalProperties": false,
                        "properties": {
                            "arguments": {
                                "type": "string"
                            },
                            "package": {
                                "type": "string"
                            },
                            "package_manager": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "package"
                        ],
                        "type": "object"
                    }
                ]
            },
            "type": "array"
        },
        "args": {
            "allowSingular": true,
            "description": "The path to the file containing the model program that will be run by the driver for the model's language and/or a list of arguments that should be passed as input to the model program or language executable (e.g. source code or configuration file for a domain specific language).",
            "items": {
                "type": [
                    "string",
                    "number"
                ]
            },
            "type": "array",
            "minItems": 1,
            "propertyOrder": 6
        },
        "additional_dependencies": {
            "additionalProperties": {
                "items": {
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "additionalProperties": false,
                            "properties": {
                                "arguments": {
                                    "type": "string"
                                },
                                "package": {
                                    "type": "string"
                                },
                                "package_manager": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "package"
                            ],
                            "type": "object"
                        }
                    ]
                },
                "type": "array"
            },
            "description": "A mapping between languages and lists of packages in those languages that are required by the model.",
            "type": "object"
        },
        "iter_function_over": {
            "default": [],
            "description": "Variable(s) that should be received or sent as an array, but iterated over. Defaults to an empty array and is ignored.",
            "items": {
                "type": "string"
            },
            "type": "array"
        },
        "env": {
            "additional_properties": {
                "type": "string"
            },
            "default": {},
            "description": "Dictionary of environment variables that should be set when the driver starts. Defaults to {}.",
            "type": "object"
        },
        "repository_commit": {
            "description": "Commit that should be checked out from the model repository.",
            "type": "string",
            "propertyOrder": 2
        },
        "inputs": {
            "aliases": [
                "input",
                "input_file",
                "input_files"
            ],
            "allowSingular": true,
            "default": [
                {
                    "commtype": "default",
                    "datatype": {
                        "type": "string"
                    },
                    "is_default": true,
                    "name": "input"
                }
            ],
            "description": "Zero or more channels carrying input to the model",
            "items": {
                "$ref": "#/definitions/icomm"
            },
            "type": "array",
            "propertyOrder": 7
        },
        "language": {
            "default": "executable",
            "description": "The programming language that the model is written in. A list of available languages can be found :ref:`here <schema_table_model_subtype_rst>`.",
            "enum": [
                "R",
                "c",
                "c++",
                "cmake",
                "cpp",
                "cxx",
                "dummy",
                "executable",
                "fortran",
                "julia",
                "lpy",
                "make",
                "matlab",
                "mpi",
                "osr",
                "python",
                "pytorch",
                "r",
                "sbml",
                "timesync"
            ],
            "type": "string",
            "propertyOrder": 4
        },
        "function": {
            "description": "If provided, an integrated model is created by wrapping the function named here. The function must be located within the file specified by the source file listed in the first argument. If not provided, the model must contain it's own calls to the |yggdrasil| interface.",
            "type": "string"
        },
        "outputs_in_inputs": {
            "description": "If True, outputs from wrapped model functions are passed by pointer as inputs for modification and the return value will be a flag. If False, outputs are limited to return values. Defaults to the value of the class attribute outputs_in_inputs.",
            "type": "boolean",
            "format": "checkbox"
        },
        "name": {
            "description": "Name used for component in log messages.",
            "type": "string",
            "propertyOrder": 0
        },
        "outputs": {
            "aliases": [
                "output",
                "output_file",
                "output_files"
            ],
            "allowSingular": true,
            "default": [
                {
                    "commtype": "default",
                    "datatype": {
                        "type": "string"
                    },
                    "is_default": true,
                    "name": "output"
                }
            ],
            "description": "Zero or more channels carrying output from the model",
            "items": {
                "$ref": "#/definitions/ocomm"
            },
            "type": "array",
            "propertyOrder": 8
        },
        "repository_url": {
            "description": "URL for the git repository containing the model source code. If provided, relative paths in the model YAML definition will be considered relative to the repository root directory.",
            "type": "string",
            "propertyOrder": 1
        },
        "description": {
            "description": "Description of the model. This parameter is only used in the model repository or when providing the model as a service.",
            "type": "string",
            "propertyOrder": 5
        },
        "allow_threading": {
            "description": "If True, comm connections will be set up so that the model-side comms can be used by more than one thread. Defaults to False.",
            "type": "boolean",
            "format": "checkbox"
        },
        "validation_command": {
            "description": "Path to a validation command that can be used to verify that the model ran as expected. A non-zero return code is taken to indicate failure.",
            "type": "string"
        },
        "strace_flags": {
            "default": [
                "-e",
                "trace=memory"
            ],
            "description": "Flags to pass to strace (or dtrace). Defaults to [].",
            "items": {
                "type": "string"
            },
            "type": "array"
        },
        "contact_email": {
            "description": "Email address that should be used to contact the maintainer of the model. This parameter is only used in the model repository.",
            "type": "string",
            "propertyOrder": 3
        },
        "builddir": {
            "description": "Directory where the build should be saved. Defaults to <sourcedir>/build. It can be relative to working_dir or absolute.",
            "type": "string",
            "options": {
                "dependencies": {
                    "language": [
                        "cmake",
                        "make"
                    ]
                }
            }
        },
        "buildfile": {
            "type": "string",
            "options": {
                "dependencies": {
                    "language": [
                        "cmake",
                        "make"
                    ]
                }
            }
        },
        "compiler": {
            "description": "Command or path to executable that should be used to compile the model. If not provided, the compiler will be determined based on configuration options for the language (if present) and the registered compilers that are available on the current operating system.",
            "type": "string",
            "options": {
                "dependencies": {
                    "language": [
                        "cmake",
                        "c",
                        "c++",
                        "cpp",
                        "cxx",
                        "fortran",
                        "make"
                    ]
                }
            }
        },
        "compiler_flags": {
            "default": [],
            "description": "Flags that should be passed to the compiler during compilation. If nto provided, the compiler flags will be determined based on configuration options for the language (if present), the compiler defaults, and the default_compiler_flags class attribute.",
            "items": {
                "type": "string"
            },
            "type": "array",
            "options": {
                "dependencies": {
                    "language": [
                        "cmake",
                        "c",
                        "c++",
                        "cpp",
                        "cxx",
                        "fortran",
                        "make"
                    ]
                }
            }
        },
        "configuration": {
            "default": "Release",
            "description": "Build type/configuration that should be built. Defaults to 'Release'.",
            "type": "string",
            "options": {
                "dependencies": {
                    "language": [
                        "cmake"
                    ]
                }
            }
        },
        "disable_python_c_api": {
            "description": "If True, the Python C API will be disabled. Defaults to False.",
            "type": "boolean",
            "options": {
                "dependencies": {
                    "language": [
                        "cmake",
                        "c",
                        "c++",
                        "cpp",
                        "cxx",
                        "fortran",
                        "make",
                        "osr"
                    ]
                }
            },
            "format": "checkbox"
        },
        "env_compiler": {
            "description": "Environment variable where the compiler executable should be stored for use within the Makefile. If not provided, this will be determined by the target language driver.",
            "type": "string",
            "options": {
                "dependencies": {
                    "language": [
                        "cmake",
                        "make"
                    ]
                }
            }
        },
        "env_compiler_flags": {
            "description": "Environment variable where the compiler flags should be stored (including those required to compile against the |yggdrasil| interface). If not provided, this will be determined by the target language driver.",
            "type": "string",
            "options": {
                "dependencies": {
                    "language": [
                        "cmake",
                        "make"
                    ]
                }
            }
        },
        "env_linker": {
            "description": "Environment variable where the linker executable should be stored for use within the Makefile. If not provided, this will be determined by the target language driver.",
            "type": "string",
            "options": {
                "dependencies": {
                    "language": [
                        "cmake",
                        "make"
                    ]
                }
            }
        },
        "env_linker_flags": {
            "description": "Environment variable where the linker flags should be stored (including those required to link against the |yggdrasil| interface). If not provided, this will be determined by the target language driver.",
            "type": "string",
            "options": {
                "dependencies": {
                    "language": [
                        "cmake",
                        "make"
                    ]
                }
            }
        },
        "linker": {
            "description": "Command or path to executable that should be used to link the model. If not provided, the linker will be determined based on configuration options for the language (if present) and the registered linkers that are available on the current operating system",
            "type": "string",
            "options": {
                "dependencies": {
                    "language": [
                        "cmake",
                        "c",
                        "c++",
                        "cpp",
                        "cxx",
                        "fortran",
                        "make"
                    ]
                }
            }
        },
        "linker_flags": {
            "default": [],
            "description": "Flags that should be passed to the linker during compilation. If not provided, the linker flags will be determined based on configuration options for the language (if present), the linker defaults, and the default_linker_flags class attribute.",
            "items": {
                "type": "string"
            },
            "type": "array",
            "options": {
                "dependencies": {
                    "language": [
                        "cmake",
                        "c",
                        "c++",
                        "cpp",
                        "cxx",
                        "fortran",
                        "make"
                    ]
                }
            }
        },
        "source_files": {
            "default": [],
            "description": "Source files that should be compiled into an executable. Defaults to an empty list and the driver will search for a source file based on the model executable (the first model argument).",
            "items": {
                "type": "string"
            },
            "type": "array",
            "options": {
                "dependencies": {
                    "language": [
                        "cmake",
                        "c",
                        "c++",
                        "cpp",
                        "cxx",
                        "fortran",
                        "make"
                    ]
                }
            }
        },
        "sourcedir": {
            "description": "Source directory to call cmake on. If not provided it is set to working_dir. This should be the directory containing the CMakeLists.txt file. It can be relative to working_dir or absolute.",
            "type": "string",
            "options": {
                "dependencies": {
                    "language": [
                        "cmake"
                    ]
                }
            }
        },
        "target": {
            "description": "Make target that should be built to create the model executable. Defaults to None.",
            "type": "string",
            "options": {
                "dependencies": {
                    "language": [
                        "cmake",
                        "make"
                    ]
                }
            }
        },
        "target_compiler": {
            "description": "Compilation tool that should be used to compile the target language. Defaults to None and will be set based on the selected language driver.",
            "type": "string",
            "options": {
                "dependencies": {
                    "language": [
                        "cmake",
                        "make"
                    ]
                }
            }
        },
        "target_compiler_flags": {
            "description": "Compilation flags that should be passed to the target language compiler. Defaults to [].",
            "items": {
                "type": "string"
            },
            "type": "array",
            "options": {
                "dependencies": {
                    "language": [
                        "cmake",
                        "make"
                    ]
                }
            }
        },
        "target_language": {
            "description": "Language that the target is written in. Defaults to None and will be set based on the source files provided.",
            "type": "string",
            "options": {
                "dependencies": {
                    "language": [
                        "cmake",
                        "make"
                    ]
                }
            }
        },
        "target_linker": {
            "description": "Compilation tool that should be used to link the target language. Defaults to None and will be set based on the selected language driver.",
            "type": "string",
            "options": {
                "dependencies": {
                    "language": [
                        "cmake",
                        "make"
                    ]
                }
            }
        },
        "target_linker_flags": {
            "description": "Linking flags that should be passed to the target language linker. Defaults to [].",
            "items": {
                "type": "string"
            },
            "type": "array",
            "options": {
                "dependencies": {
                    "language": [
                        "cmake",
                        "make"
                    ]
                }
            }
        },
        "with_asan": {
            "description": "If True, the model will be compiled and linked with the address sanitizer enabled (if there is one available for the selected compiler).",
            "type": "boolean",
            "options": {
                "dependencies": {
                    "language": [
                        "cmake",
                        "c",
                        "c++",
                        "cpp",
                        "cxx",
                        "fortran",
                        "make",
                        "osr"
                    ]
                }
            },
            "format": "checkbox"
        },
        "interpreter": {
            "description": "Name or path of interpreter executable that should be used to run the model. If not provided, the interpreter will be determined based on configuration options for the language (if present) and the default_interpreter class attribute.",
            "type": "string",
            "options": {
                "dependencies": {
                    "language": [
                        "dummy",
                        "julia",
                        "lpy",
                        "matlab",
                        "pytorch",
                        "python",
                        "R",
                        "r",
                        "sbml",
                        "timesync"
                    ]
                }
            }
        },
        "interpreter_flags": {
            "default": [],
            "description": "Flags that should be passed to the interpreter when running the model. If not provided, the flags are determined based on configuration options for the language (if present) and the default_interpreter_flags class attribute.",
            "items": {
                "type": "string"
            },
            "type": "array",
            "options": {
                "dependencies": {
                    "language": [
                        "dummy",
                        "julia",
                        "lpy",
                        "matlab",
                        "pytorch",
                        "python",
                        "R",
                        "r",
                        "sbml",
                        "timesync"
                    ]
                }
            }
        },
        "standard": {
            "default": "f2003",
            "description": "Fortran standard that should be used. Defaults to 'f2003'.",
            "enum": [
                "f2003",
                "f2008"
            ],
            "type": "string",
            "options": {
                "dependencies": {
                    "language": [
                        "fortran"
                    ]
                }
            }
        },
        "makedir": {
            "description": "Directory where make should be invoked from if it is not the same as the directory containing the makefile. Defaults to directory containing makefile if provided, otherwise working_dir.",
            "type": "string",
            "options": {
                "dependencies": {
                    "language": [
                        "make"
                    ]
                }
            }
        },
        "makefile": {
            "default": "Makefile",
            "description": "Path to make file either absolute, relative to makedir (if provided), or relative to working_dir. Defaults to Makefile.",
            "type": "string",
            "options": {
                "dependencies": {
                    "language": [
                        "make"
                    ]
                }
            }
        },
        "use_symunit": {
            "default": false,
            "description": "If True, input/output variables with units will be represented in Matlab using symunit. Defaults to False.",
            "type": "boolean",
            "options": {
                "dependencies": {
                    "language": [
                        "matlab"
                    ]
                }
            },
            "format": "checkbox"
        },
        "copy_xml_to_osr": {
            "default": false,
            "description": "If True, the XML file(s) will be copied to the OSR repository InputFiles direcitory before running. This is necessary if the XML file(s) use any of the files located there since OSR always assumes the included file paths are relative. Defaults to False.",
            "type": "boolean",
            "options": {
                "dependencies": {
                    "language": [
                        "osr"
                    ]
                }
            },
            "format": "checkbox"
        },
        "sync_vars_in": {
            "default": [],
            "description": "Variables that should be synchronized from other models. Defaults to [].",
            "items": {
                "type": "string"
            },
            "type": "array",
            "options": {
                "dependencies": {
                    "language": [
                        "osr"
                    ]
                }
            }
        },
        "sync_vars_out": {
            "default": [],
            "description": "Variables that should be synchronized to other models. Defaults to [].",
            "items": {
                "type": "string"
            },
            "type": "array",
            "options": {
                "dependencies": {
                    "language": [
                        "osr"
                    ]
                }
            }
        },
        "update_interval": {
            "additionalProperties": {
                "type": "number"
            },
            "default": {
                "timesync": 1.0
            },
            "description": "Max simulation interval at which synchronization should occur (in days). Defaults to 1.0 if not provided. If the XML input file loads additional export modules that output at a shorter rate, the existing table of values will be extrapolated.",
            "type": "object",
            "options": {
                "dependencies": {
                    "language": [
                        "osr"
                    ]
                }
            }
        },
        "input_transform": {
            "description": "Transformation that should be applied to input to get it into the format expected by the model (including transformation to pytorch tensors as necessary). This function should return a tuple of arguments for the model.",
            "type": "string",
            "options": {
                "dependencies": {
                    "language": [
                        "pytorch"
                    ]
                }
            }
        },
        "output_transform": {
            "description": "Transformation that should be applied to model output to get it into a format that can be serialized by yggdrasil (i.e. not a pytorch Tensor or model sepecific type).",
            "type": "string",
            "options": {
                "dependencies": {
                    "language": [
                        "pytorch"
                    ]
                }
            }
        },
        "weights": {
            "description": "Path to file where model weights are saved",
            "type": "string",
            "options": {
                "dependencies": {
                    "language": [
                        "pytorch"
                    ]
                }
            }
        },
        "integrator": {
            "default": "cvode",
            "description": "Name of integrator that should be used. Valid options include ['cvode', 'gillespie', 'rk4', 'rk45']. Defaults to 'cvode'.",
            "enum": [
                "cvode",
                "gillespie",
                "rk4",
                "rk45"
            ],
            "type": "string",
            "options": {
                "dependencies": {
                    "language": [
                        "sbml"
                    ]
                }
            }
        },
        "integrator_settings": {
            "default": {},
            "description": "Settings for the integrator. Defaults to empty dict.",
            "type": "object",
            "options": {
                "dependencies": {
                    "language": [
                        "sbml"
                    ]
                }
            }
        },
        "only_output_final_step": {
            "default": false,
            "description": "If True, only the final timestep is output. Defaults to False.",
            "type": "boolean",
            "options": {
                "dependencies": {
                    "language": [
                        "sbml"
                    ]
                }
            },
            "format": "checkbox"
        },
        "reset": {
            "default": false,
            "description": "If True, the simulation will be reset to it's initial values before each call (including the start time). Defaults to False.",
            "type": "boolean",
            "options": {
                "dependencies": {
                    "language": [
                        "sbml"
                    ]
                }
            },
            "format": "checkbox"
        },
        "selections": {
            "default": [],
            "description": "Variables to include in the output. Defaults to None and the time/floating selections will be returned.",
            "items": {
                "type": "string"
            },
            "type": "array",
            "options": {
                "dependencies": {
                    "language": [
                        "sbml"
                    ]
                }
            }
        },
        "skip_start_time": {
            "default": false,
            "description": "If True, the results for the initial time step will not be output. Defaults to False. This option is ignored if only_output_final_step is True.",
            "type": "boolean",
            "options": {
                "dependencies": {
                    "language": [
                        "sbml"
                    ]
                }
            },
            "format": "checkbox"
        },
        "start_time": {
            "default": 0.0,
            "description": "Time that simulation should be started from. If 'reset' is True, the start time will always be the provided value, otherwise, the start time will be the end of the previous call after the first call. Defaults to 0.0.",
            "type": "number",
            "options": {
                "dependencies": {
                    "language": [
                        "sbml"
                    ]
                }
            }
        },
        "steps": {
            "default": 1,
            "description": "Number of steps that should be output. Defaults to None.",
            "type": "integer",
            "options": {
                "dependencies": {
                    "language": [
                        "sbml"
                    ]
                }
            }
        }
    },
    "dependencies": {
        "driver": [
            "args"
        ]
    }
}