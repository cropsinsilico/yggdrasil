name: Test of package installation & execution

'on':  # quotes required so that pyyaml doesn't make this a bool
  push:
    branches-ignore:
      - 'gh-pages'
    tags:
      - '*'

env:
  NUMPY: numpy
  INSTALLR: 1
  INSTALLC: 1
  INSTALLFORTRAN: 1
  INSTALLSBML: 0
  INSTALLLPY: 0
  INSTALLJULIA: 1
  INSTALLZMQ: 1
  INSTALLRMQ: 0
  INSTALLTRIMESH: 1
  INSTALLPYGMENTS: 1
  INSTALLPYTORCH: 1
  INSTALLIMAGES: 1
  INSTALLSEQ: 1
  INSTALLEXCEL: 1
  INSTALLOMP: 1
  INSTALLMPI: 1
  INSTALLMATLAB: 0
  USEVIRTUALENV: 0
  BUILDDOCS: 0
  BUILDWHEELS: 1
  BUILDSOURCE: 1
  BUILDDOCKER: 0
  BUILDSCHEMA: 0
  YGG_GHA_JOB_ID_SUFFIX:
  TMPDIR: /tmp/

jobs:
  params:
    name: Prepare test parameters
    runs-on: ubuntu-latest
    outputs:
      builddocs: ${{ steps.set-flags.outputs.builddocs }}
      buildwheels: ${{ steps.set-flags.outputs.buildwheels }}
      buildsource: ${{ steps.set-flags.outputs.buildsource }}
      builddocker: ${{ steps.set-flags.outputs.builddocker }}
      buildschema: ${{ steps.set-flags.outputs.buildschema }}
    steps:
      - id: set-flags
        run: |
          echo "builddocs=${{ env.BUILDDOCS }}" >> $GITHUB_OUTPUT
          echo "buildwheels=${{ env.BUILDWHEELS }}" >> $GITHUB_OUTPUT
          echo "buildsource=${{ env.BUILDSOURCE }}" >> $GITHUB_OUTPUT
          echo "builddocker=${{ env.BUILDDOCKER }}" >> $GITHUB_OUTPUT
          echo "buildschema=${{ env.BUILDSCHEMA }}" >> $GITHUB_OUTPUT
  docs:
    name: Build the Docs
    needs: params
    if: github.event_name == 'push' && needs.params.outputs.builddocs == '1'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.8
    - name: Install dependencies
      run: python utils/setup_test_env.py install pip
    - name: Verify installation
      run: python utils/setup_test_env.py verify
    - name: Build the docs
      run: |
        cd docs
        make autodoc
        cd ../
    - name: Publish docs to Github pages
      if: github.event_name == 'push'
      uses: JamesIves/github-pages-deploy-action@3.7.1
      with:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        BRANCH: gh-pages
        FOLDER: docs/build/html/

  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    needs: params
    if: github.event_name == 'push' && needs.params.outputs.buildwheels == '1'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - ubuntu-20.04
          - macOS-11
          - windows-2019
        linux_arch:
          - auto
        windows_arch:
          - AMD64
        mac_arch:
          - x86_64 arm64
        include:
          - os: windows-2019
            windows_arch: x86
          - os: ubuntu-20.04
            linux_arch: aarch64
          - os: ubuntu-20.04
            linux_arch: ppc64le
      fail-fast: false
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3
        with:
          submodules: true

      - uses: docker/setup-qemu-action@v1
        if: runner.os == 'Linux'
        name: (LINUX) Set up QEMU
        with:
          platforms: all

      - name: setup rtools for 32-bit
        run: |
          echo "PLAT=i686" >> $env:GITHUB_ENV
          echo "PATH=$env:RTOOLS40_HOME\mingw32\bin;$env:PATH" >> $env:GITHUB_ENV
          gfortran --version
        if: ${{ matrix.windows_arch == 'x86' }}

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.12.1
        env:
          CIBW_ARCHS_LINUX: ${{ matrix.linux_arch }}
          CIBW_ARCHS_MACOS: ${{ matrix.mac_arch }}
          CIBW_ARCHS_WINDOWS: ${{ matrix.windows_arch }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          path: ./wheelhouse/*.whl
  
  build_sdist:
    name: Build source distribution
    needs: params
    if: github.event_name == 'push' && needs.params.outputs.buildsource == '1'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3
        with:
          submodules: true
          fetch-depth: 0
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.8
      - name: Build sdist
        run: |
          python setup.py sdist --force-clean-version
      - name: Install sdist
        run: |
          python -m pip install dist/*.gz
          python utils/setup_test_env.py deps pip
      - name: Test sdist
        run: |
          ygginfo
          pytest -m subset_rapidjson --import-mode=importlib tests
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: sdist
          path: ./dist/*

  upload_wheels:
    name: Upload wheels
    needs: [params, build_wheels]
    if: github.event_name == 'push' && needs.params.outputs.buildwheels == '1'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/download-artifact@v2
      with:
        name: artifact
        path: dist
    - name: Publish package to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.pypi }}
        skip_existing: true

  upload_sdist:
    name: Upload sdist
    needs: [params, build_sdist]
    if: github.event_name == 'push' && needs.params.outputs.buildsource == '1'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/download-artifact@v2
      with:
        name: sdist
        path: dist
    - name: Publish package to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.pypi }}
        skip_existing: true

  docker:
    name: Build and Publish Docker images
    needs: params
    if: github.event_name == 'push' && needs.params.outputs.builddocker == '1'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Build and push environment docker images for the new release
      run: python utils/build_docker.py --push
    - name: Build and push executable docker images for the new release
      run: python utils/build_docker.py --push executable

  schema:
    name: Update the schema used by the model submission form
    needs: params
    if: github.event_name == 'push' && needs.params.outputs.buildschema == '1'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.8
    - name: Install dependencies
      run: |
        python -m pip install PyGithub
        python utils/setup_test_env.py install pip
    - name: Verify installation
      run: python utils/setup_test_env.py verify
    - name: Update the form
      run: python utils/update_form_schema.py --token=${{ secrets.YGGDRASIL_UPDATE_TOKEN }}
