additionalProperties: false
definitions:
  comm:
    allOf:
    - additionalProperties: false
      dependencies:
        driver:
        - args
      description: Base schema for all subtypes of comm components.
      properties:
        address:
          description: Communication info. Default to None and address is taken from
            the environment variable.
          type: string
        args:
          description: '[DEPRECATED] Arguments that should be provided to the driver.'
          type: string
        as_array:
          default: false
          description: '[DEPRECATED] If True and the datatype is table-like, tables
            are sent/recieved with either columns rather than row by row. Defaults
            to False.'
          type: boolean
        client_id:
          type: string
        commtype:
          default: default
          description: Communication mechanism that should be used.
          enum:
          - buffer
          - default
          - ipc
          - mpi
          - rest
          - rmq
          - rmq_async
          - value
          - zmq
          type: string
        cookies:
          description: Cookies to send to the server. Defaults to None and is ignored.
          type: object
        count:
          default: 1
          type: integer
        datatype:
          default:
            type: bytes
          description: 'JSON schema (with expanded core types defined by |yggdrasil|)
            that constrains the type of data that should be sent/received by this
            object. Defaults to {''type'': ''bytes''}. Additional information on specifying
            datatypes can be found :ref:`here <datatypes_rst>`.'
          type: schema
        default_file:
          $ref: '#/definitions/file'
          description: Comm information for a file that input should be drawn from
            (for input comms) or that output should be sent to (for output comms)
            in the event that a yaml does not pair the comm with another model comm
            or a file.
        default_value:
          description: Value that should be returned in the event that a yaml does
            not pair the comm with another model comm or a file.
          type: any
        dont_copy:
          default: false
          description: If True, the comm will not be duplicated in the even a model
            is duplicated via the 'copies' parameter. Defaults to False except for
            in the case that a model is wrapped and the comm is inside the loop or
            that a model is a RPC input to a model server.
          type: boolean
        driver:
          description: '[DEPRECATED] Name of driver class that should be used.'
          type: string
        field_names:
          description: '[DEPRECATED] Field names that should be used to label fields
            in sent/received tables. This keyword is only valid for table-like datatypes.
            If not provided, field names are created based on the field order.'
          items:
            type: string
          type: array
        field_units:
          description: '[DEPRECATED] Field units that should be used to convert fields
            in sent/received tables. This keyword is only valid for table-like datatypes.
            If not provided, all fields are assumed to be unitless.'
          items:
            type: string
          type: array
        filter:
          $ref: '#/definitions/filter'
          description: Filter that will be used to determine when messages should
            be sent/received. Ignored if not provided.
        for_service:
          default: false
          description: If True, this comm bridges the gap to an integration running
            as a service, possibly on a remote machine. Defaults to False.
          type: boolean
        format_str:
          description: String that should be used to format/parse messages. Default
            to None.
          type: string
        host:
          default: http://localhost:{port}
          type: string
        is_default:
          default: false
          description: If True, this comm was created to handle all input/output variables
            to/from a model. Defaults to False. This variable is used internally and
            should not be set explicitly in the YAML.
          type: boolean
        length_map:
          additionalProperties:
            type: string
          description: Map from pointer variable names to the names of variables where
            their length will be stored. Defaults to {}.
          type: object
        name:
          description: Name used for component in log messages.
          type: string
        outside_loop:
          default: false
          description: If True, and the comm is an input/outputs to/from a model being
            wrapped. The receive/send calls for this comm will be outside the loop
            for the model. Defaults to False.
          type: boolean
        params:
          description: Parameters that should be passed via URL. Defaults to None
            and is ignored.
          type: object
        port:
          type: int
        recv_converter:
          anyOf:
          - $ref: '#/definitions/transform'
          - type:
            - function
            - string
          - items:
              anyOf:
              - $ref: '#/definitions/transform'
              - type:
                - function
                - string
            type: array
          description: Converter that should be used on received objects. Defaults
            to None.
        send_converter:
          anyOf:
          - $ref: '#/definitions/transform'
          - type:
            - function
            - string
          - items:
              anyOf:
              - $ref: '#/definitions/transform'
              - type:
                - function
                - string
            type: array
          description: Converter that should be used on sent objects. Defaults to
            None.
        transform:
          anyOf:
          - $ref: '#/definitions/transform'
          - type:
            - function
            - string
          - items:
              anyOf:
              - $ref: '#/definitions/transform'
              - type:
                - function
                - string
            type: array
          description: One or more transformations that will be applied to messages
            that are sent/received. Ignored if not provided.
        vars:
          description: Names of variables to be sent/received by this comm. Defaults
            to [].
          items:
            type: string
          type: array
      required:
      - datatype
      - name
      - commtype
      title: comm_base
      type: object
    - anyOf:
      - additionalProperties: true
        description: Schema for comm component ['mpi'] subtype.
        properties:
          commtype:
            default: default
            description: MPI communicator.
            enum:
            - mpi
            type: string
        title: MPIComm
        type: object
      - additionalProperties: true
        description: Schema for comm component ['rmq'] subtype.
        properties:
          commtype:
            default: default
            description: RabbitMQ connection.
            enum:
            - rmq
            type: string
        title: RMQComm
        type: object
      - additionalProperties: true
        description: Schema for comm component ['buffer'] subtype.
        properties:
          commtype:
            default: default
            description: Communication mechanism that should be used.
            enum:
            - buffer
            type: string
        title: BufferComm
        type: object
      - additionalProperties: true
        description: Schema for comm component ['rest'] subtype.
        properties:
          client_id:
            type: string
          commtype:
            default: default
            description: RESTful API.
            enum:
            - rest
            type: string
          cookies:
            description: Cookies to send to the server. Defaults to None and is ignored.
            type: object
          host:
            default: http://localhost:{port}
            type: string
          params:
            description: Parameters that should be passed via URL. Defaults to None
              and is ignored.
            type: object
          port:
            type: int
        title: RESTComm
        type: object
      - additionalProperties: true
        description: Schema for comm component ['value'] subtype.
        properties:
          commtype:
            default: default
            description: Constant value.
            enum:
            - value
            type: string
          count:
            default: 1
            type: integer
        title: ValueComm
        type: object
      - additionalProperties: true
        description: Schema for comm component ['rmq_async'] subtype.
        properties:
          commtype:
            default: default
            description: Asynchronous RabbitMQ connection.
            enum:
            - rmq_async
            type: string
        title: RMQAsyncComm
        type: object
      - additionalProperties: true
        description: Schema for comm component ['ipc'] subtype.
        properties:
          commtype:
            default: default
            description: Interprocess communication (IPC) queue.
            enum:
            - ipc
            type: string
        title: IPCComm
        type: object
      - additionalProperties: true
        description: Schema for comm component ['default'] subtype.
        properties:
          commtype:
            default: default
            description: Communication mechanism selected based on the current platform.
            enum:
            - default
            type: string
        title: DefaultComm
        type: object
      - additionalProperties: true
        description: Schema for comm component ['zmq'] subtype.
        properties:
          commtype:
            default: default
            description: ZeroMQ socket.
            enum:
            - zmq
            type: string
        title: ZMQComm
        type: object
    description: Schema for comm components.
    title: comm
  connection:
    allOf:
    - additionalProperties: false
      dependencies:
        driver:
        - args
      description: Base schema for all subtypes of connection components.
      properties:
        args:
          description: '[DEPRECATED] Arguments that should be provided to the driver.'
          type: string
        connection_type:
          enum:
          - connection
          - file_input
          - file_output
          - input
          - output
          - rpc_request
          - rpc_response
          type: string
        driver:
          description: '[DEPRECATED] Name of driver class that should be used.'
          type: string
        inputs:
          default:
          - {}
          description: One or more name(s) of model output channel(s) and/or new channel/file
            objects that the connection should receive messages from. A full description
            of file entries and the available options can be found :ref:`here<yaml_file_options>`.
          items:
            anyOf:
            - $ref: '#/definitions/comm'
            - $ref: '#/definitions/file'
          minItems: 1
          type: array
        onexit:
          description: Class method that should be called when a model that the connection
            interacts with exits, but before the connection driver is shut down. Defaults
            to None.
          type: string
        outputs:
          default:
          - {}
          description: One or more name(s) of model input channel(s) and/or new channel/file
            objects that the connection should send messages to. A full description
            of file entries and the available options can be found :ref:`here<yaml_file_options>`.
          items:
            anyOf:
            - $ref: '#/definitions/comm'
            - $ref: '#/definitions/file'
          minItems: 1
          type: array
        translator:
          description: Function or string specifying function that should be used
            to translate messages from the input communicator before passing them
            to the output communicator. If a string, the format should be "<package.module>:<function>"
            so that <function> can be imported from <package>. Defaults to None and
            messages are passed directly. This can also be a list of functions/strings
            that will be called on the messages in the order they are provided.
          items:
            oneOf:
            - type: function
            - $ref: '#/definitions/transform'
          type: array
      required:
      - inputs
      - outputs
      title: connection_base
      type: object
    - anyOf:
      - additionalProperties: true
        description: Schema for connection component ['connection'] subtype.
        properties:
          connection_type:
            description: Connection between one or more comms/files and one or more
              comms/files.
            enum:
            - connection
            type: string
        title: ConnectionDriver
        type: object
      - additionalProperties: true
        description: Schema for connection component ['rpc_response'] subtype.
        properties:
          connection_type:
            description: Connection between one or more comms/files and one or more
              comms/files.
            enum:
            - rpc_response
            type: string
        title: RPCResponseDriver
        type: object
      - additionalProperties: true
        description: Schema for connection component ['rpc_request'] subtype.
        properties:
          connection_type:
            description: Connection between one or more comms/files and one or more
              comms/files.
            enum:
            - rpc_request
            type: string
        title: RPCRequestDriver
        type: object
      - additionalProperties: true
        description: Schema for connection component ['output'] subtype.
        properties:
          connection_type:
            description: Connection between a model and one or more comms/files.
            enum:
            - output
            type: string
        title: OutputDriver
        type: object
      - additionalProperties: true
        description: Schema for connection component ['file_output'] subtype.
        properties:
          connection_type:
            description: Connection between a model and a file.
            enum:
            - file_output
            type: string
        title: FileOutputDriver
        type: object
      - additionalProperties: true
        description: Schema for connection component ['input'] subtype.
        properties:
          connection_type:
            description: Connection between one or more comms/files and a model.
            enum:
            - input
            type: string
        title: InputDriver
        type: object
      - additionalProperties: true
        description: Schema for connection component ['file_input'] subtype.
        properties:
          connection_type:
            description: Connection between a file and a model.
            enum:
            - file_input
            type: string
        title: FileInputDriver
        type: object
    description: Schema for connection components.
    title: connection
  file:
    allOf:
    - additionalProperties: false
      dependencies:
        driver:
        - args
      description: Base schema for all subtypes of file components.
      properties:
        address:
          description: Communication info. Default to None and address is taken from
            the environment variable.
          type: string
        append:
          default: false
          description: If True and writing, file is openned in append mode. If True
            and reading, file is kept open even if the end of the file is reached
            to allow for another process to write to the file in append mode. Defaults
            to False.
          type: boolean
        args:
          description: '[DEPRECATED] Arguments that should be provided to the driver.'
          type: string
        as_array:
          default: false
          description: '[DEPRECATED] If True and the datatype is table-like, tables
            are sent/recieved with either columns rather than row by row. Defaults
            to False.'
          type: boolean
        comment:
          default: '# '
          description: One or more characters indicating a comment. Defaults to '#
            '.
          type: string
        datatype:
          description: JSON schema defining the type of object that the serializer
            will be used to serialize/deserialize. Defaults to default_datatype.
          type: schema
        default_flow_style:
          default: false
          description: If True, nested collections will be serialized in the block
            style. If False, they will always be serialized in the flow style. See
            `PyYAML Documentation <https://pyyaml.org/wiki/PyYAMLDocumentation>`_.
          type: boolean
        delimiter:
          default: "\t"
          description: Delimiter that should be used to separate name/value pairs
            in the map. Defaults to \t.
          type: string
        driver:
          description: '[DEPRECATED] Name of driver class that should be used.'
          type: string
        encoding:
          default: utf-8
          description: Encoding that should be used to serialize the object. Defaults
            to 'utf-8'.
          type: string
        field_names:
          description: '[DEPRECATED] Field names that should be used to label fields
            in sent/received tables. This keyword is only valid for table-like datatypes.
            If not provided, field names are created based on the field order.'
          items:
            type: string
          type: array
        field_units:
          description: '[DEPRECATED] Field units that should be used to convert fields
            in sent/received tables. This keyword is only valid for table-like datatypes.
            If not provided, all fields are assumed to be unitless.'
          items:
            type: string
          type: array
        filetype:
          default: binary
          description: The type of file that will be read from or written to.
          enum:
          - ascii
          - binary
          - json
          - map
          - mat
          - netcdf
          - obj
          - pandas
          - pickle
          - ply
          - table
          - wofost
          - yaml
          type: string
        filter:
          $ref: '#/definitions/filter'
          description: Filter that will be used to determine when messages should
            be sent/received. Ignored if not provided.
        for_service:
          default: false
          description: If True, this comm bridges the gap to an integration running
            as a service, possibly on a remote machine. Defaults to False.
          type: boolean
        format_str:
          description: String that should be used to format/parse messages. Default
            to None.
          type: string
        in_temp:
          default: false
          description: If True, the path will be considered relative to the platform
            temporary directory. Defaults to False.
          type: boolean
        indent:
          default: "\t"
          description: String or number of spaces that should be used to indent each
            level within the seiralized structure. Defaults to '\t'.
          type:
          - string
          - int
        is_series:
          default: false
          description: If True, input/output will be done to a series of files. If
            reading, each file will be processed until the end is reached. If writing,
            each output will be to a new file in the series. The addressed is assumed
            to contain a format for the index of the file. Defaults to False.
          type: boolean
        length_map:
          additionalProperties:
            type: string
          description: Map from pointer variable names to the names of variables where
            their length will be stored. Defaults to {}.
          type: object
        name:
          description: Name used for component in log messages.
          type: string
        newline:
          default: '

            '
          description: One or more characters indicating a newline. Defaults to '\n'.
          type: string
        no_header:
          default: false
          description: If True, headers will not be read or serialized from/to tables.
            Defaults to False.
          type: boolean
        read_attributes:
          default: false
          description: If True, the attributes are read in as well as the variables.
            Defaults to False.
          type: boolean
        read_meth:
          default: read
          description: Method that should be used to read data from the file. Defaults
            to 'read'. Ignored if direction is 'send'.
          enum:
          - read
          - readline
          type: string
        recv_converter:
          anyOf:
          - $ref: '#/definitions/transform'
          - type:
            - function
            - string
          - items:
              anyOf:
              - $ref: '#/definitions/transform'
              - type:
                - function
                - string
            type: array
          description: Converter that should be used on received objects. Defaults
            to None.
        send_converter:
          anyOf:
          - $ref: '#/definitions/transform'
          - type:
            - function
            - string
          - items:
              anyOf:
              - $ref: '#/definitions/transform'
              - type:
                - function
                - string
            type: array
          description: Converter that should be used on sent objects. Defaults to
            None.
        serializer:
          default:
            seritype: direct
          description: Class with serialize and deserialize methods that should be
            used to process sent and received messages. Defaults to None and is constructed
            using provided 'serializer_kwargs'.
          oneOf:
          - $ref: '#/definitions/serializer'
          - class: yggdrasil.serialize.SerializeBase:SerializeBase
            type: instance
        sort_keys:
          default: true
          description: If True, the serialization of dictionaries will be in key sorted
            order. Defaults to True.
          type: boolean
        str_as_bytes:
          default: false
          description: If True, strings in columns are read as bytes. Defaults to
            False.
          type: boolean
        transform:
          anyOf:
          - $ref: '#/definitions/transform'
          - type:
            - function
            - string
          - items:
              anyOf:
              - $ref: '#/definitions/transform'
              - type:
                - function
                - string
            type: array
          description: One or more transformations that will be applied to messages
            that are sent/received. Ignored if not provided.
        use_astropy:
          default: false
          description: If True, the astropy package will be used to serialize/deserialize
            table. Defaults to False.
          type: boolean
        variables:
          description: List of variables to read in. If not provided, all variables
            will be read.
          items:
            type: string
          type: array
        vars:
          description: Names of variables to be sent/received by this comm. Defaults
            to [].
          items:
            type: string
          type: array
        version:
          default: 1
          description: Version of netCDF format that should be used. Defaults to 1.
            Options are 1 (classic format) and 2 (64-bit offset format).
          enum:
          - 1
          - 2
          type: integer
        wait_for_creation:
          default: 0.0
          description: Time (in seconds) that should be waited before opening for
            the file to be created if it dosn't exist. Defaults to 0 s and file will
            attempt to be opened immediately.
          type: float
        working_dir:
          description: Working directory. If not provided, the current working directory
            is used.
          type: string
      required:
      - filetype
      - name
      - working_dir
      title: file_base
      type: object
    - anyOf:
      - additionalProperties: true
        description: Schema for file component ['binary'] subtype.
        properties:
          filetype:
            default: binary
            description: The entire file is read/written all at once as bytes.
            enum:
            - binary
            type: string
          read_meth:
            default: read
            description: Method that should be used to read data from the file. Defaults
              to 'read'. Ignored if direction is 'send'.
            enum:
            - read
            - readline
            type: string
          serializer:
            default:
              seritype: direct
            description: Class with serialize and deserialize methods that should
              be used to process sent and received messages. Defaults to None and
              is constructed using provided 'serializer_kwargs'.
            oneOf:
            - $ref: '#/definitions/serializer'
            - class: yggdrasil.serialize.SerializeBase:SerializeBase
              type: instance
        required:
        - serializer
        title: FileComm
        type: object
      - additionalProperties: true
        description: Schema for file component ['map'] subtype.
        properties:
          comment:
            default: '# '
            description: One or more characters indicating a comment. Defaults to
              '# '.
            type: string
          datatype:
            description: JSON schema defining the type of object that the serializer
              will be used to serialize/deserialize. Defaults to default_datatype.
            type: schema
          delimiter:
            default: "\t"
            description: Delimiter that should be used to separate name/value pairs
              in the map. Defaults to \t.
            type: string
          filetype:
            default: binary
            description: The file contains a key/value mapping with one key/value
              pair per line and separated by some delimiter.
            enum:
            - map
            type: string
          newline:
            default: '

              '
            description: One or more characters indicating a newline. Defaults to
              '\n'.
            type: string
        title: AsciiMapComm
        type: object
      - additionalProperties: true
        description: Schema for file component ['ply'] subtype.
        properties:
          comment:
            default: '# '
            description: One or more characters indicating a comment. Defaults to
              '# '.
            type: string
          datatype:
            description: JSON schema defining the type of object that the serializer
              will be used to serialize/deserialize. Defaults to default_datatype.
            type: schema
          filetype:
            default: binary
            description: The file is in the `Ply <http://paulbourke.net/dataformats/ply/>`_
              data format for 3D structures.
            enum:
            - ply
            type: string
          newline:
            default: '

              '
            description: One or more characters indicating a newline. Defaults to
              '\n'.
            type: string
        title: PlyFileComm
        type: object
      - additionalProperties: true
        description: Schema for file component ['netcdf'] subtype.
        properties:
          comment:
            default: '# '
            description: One or more characters indicating a comment. Defaults to
              '# '.
            type: string
          datatype:
            description: JSON schema defining the type of object that the serializer
              will be used to serialize/deserialize. Defaults to default_datatype.
            type: schema
          filetype:
            default: binary
            description: The file is read/written as netCDF.
            enum:
            - netcdf
            type: string
          newline:
            default: '

              '
            description: One or more characters indicating a newline. Defaults to
              '\n'.
            type: string
          read_attributes:
            default: false
            description: If True, the attributes are read in as well as the variables.
              Defaults to False.
            type: boolean
          variables:
            description: List of variables to read in. If not provided, all variables
              will be read.
            items:
              type: string
            type: array
          version:
            default: 1
            description: Version of netCDF format that should be used. Defaults to
              1. Options are 1 (classic format) and 2 (64-bit offset format).
            enum:
            - 1
            - 2
            type: integer
        title: NetCDFFileComm
        type: object
      - additionalProperties: true
        description: Schema for file component ['wofost'] subtype.
        properties:
          comment:
            default: '# '
            description: One or more characters indicating a comment. Defaults to
              '# '.
            type: string
          datatype:
            description: JSON schema defining the type of object that the serializer
              will be used to serialize/deserialize. Defaults to default_datatype.
            type: schema
          delimiter:
            default: ' = '
            description: Delimiter that should be used to separate name/value pairs
              in the map. Defaults to \t.
            type: string
          filetype:
            default: binary
            description: The file is a WOFOST parameter file.
            enum:
            - wofost
            type: string
          newline:
            default: '

              '
            description: One or more characters indicating a newline. Defaults to
              '\n'.
            type: string
        title: WOFOSTParamFileComm
        type: object
      - additionalProperties: true
        description: Schema for file component ['table'] subtype.
        properties:
          comment:
            default: '# '
            description: One or more characters indicating a comment. Defaults to
              '# '.
            type: string
          datatype:
            description: JSON schema defining the type of object that the serializer
              will be used to serialize/deserialize. Defaults to default_datatype.
            type: schema
          delimiter:
            default: "\t"
            description: Character(s) that should be used to separate columns. Defaults
              to '\t'.
            type: string
          filetype:
            default: binary
            description: The file is an ASCII table that will be read/written one
              row at a time. If ``as_array`` is ``True``, the table will be read/written
              all at once.
            enum:
            - table
            type: string
          newline:
            default: '

              '
            description: One or more characters indicating a newline. Defaults to
              '\n'.
            type: string
          use_astropy:
            default: false
            description: If True, the astropy package will be used to serialize/deserialize
              table. Defaults to False.
            type: boolean
        title: AsciiTableComm
        type: object
      - additionalProperties: true
        description: Schema for file component ['mat'] subtype.
        properties:
          comment:
            default: '# '
            description: One or more characters indicating a comment. Defaults to
              '# '.
            type: string
          datatype:
            description: JSON schema defining the type of object that the serializer
              will be used to serialize/deserialize. Defaults to default_datatype.
            type: schema
          filetype:
            default: binary
            description: The file is a Matlab .mat file containing one or more serialized
              Matlab variables.
            enum:
            - mat
            type: string
          newline:
            default: '

              '
            description: One or more characters indicating a newline. Defaults to
              '\n'.
            type: string
        title: MatFileComm
        type: object
      - additionalProperties: true
        description: Schema for file component ['ascii'] subtype.
        properties:
          comment:
            default: '# '
            description: One or more characters indicating a comment. Defaults to
              '# '.
            type: string
          datatype:
            description: JSON schema defining the type of object that the serializer
              will be used to serialize/deserialize. Defaults to default_datatype.
            type: schema
          filetype:
            default: binary
            description: This file is read/written as encoded text one line at a time.
            enum:
            - ascii
            type: string
          newline:
            default: '

              '
            description: One or more characters indicating a newline. Defaults to
              '\n'.
            type: string
        title: AsciiFileComm
        type: object
      - additionalProperties: true
        description: Schema for file component ['pandas'] subtype.
        properties:
          comment:
            default: '# '
            description: One or more characters indicating a comment. Defaults to
              '# '.
            type: string
          datatype:
            description: JSON schema defining the type of object that the serializer
              will be used to serialize/deserialize. Defaults to default_datatype.
            type: schema
          delimiter:
            default: "\t"
            description: Character(s) that should be used to separate columns. Defaults
              to '\t'.
            type: string
          filetype:
            default: binary
            description: The file is a Pandas frame output as a table.
            enum:
            - pandas
            type: string
          newline:
            default: '

              '
            description: One or more characters indicating a newline. Defaults to
              '\n'.
            type: string
          no_header:
            default: false
            description: If True, headers will not be read or serialized from/to tables.
              Defaults to False.
            type: boolean
          str_as_bytes:
            default: false
            description: If True, strings in columns are read as bytes. Defaults to
              False.
            type: boolean
          use_astropy:
            default: false
            description: If True, the astropy package will be used to serialize/deserialize
              table. Defaults to False.
            type: boolean
        title: PandasFileComm
        type: object
      - additionalProperties: true
        description: Schema for file component ['obj'] subtype.
        properties:
          comment:
            default: '# '
            description: One or more characters indicating a comment. Defaults to
              '# '.
            type: string
          datatype:
            description: JSON schema defining the type of object that the serializer
              will be used to serialize/deserialize. Defaults to default_datatype.
            type: schema
          filetype:
            default: binary
            description: The file is in the `Obj <http://paulbourke.net/dataformats/obj/>`_
              data format for 3D structures.
            enum:
            - obj
            type: string
          newline:
            default: '

              '
            description: One or more characters indicating a newline. Defaults to
              '\n'.
            type: string
        title: ObjFileComm
        type: object
      - additionalProperties: true
        description: Schema for file component ['yaml'] subtype.
        properties:
          comment:
            default: '# '
            description: One or more characters indicating a comment. Defaults to
              '# '.
            type: string
          datatype:
            description: JSON schema defining the type of object that the serializer
              will be used to serialize/deserialize. Defaults to default_datatype.
            type: schema
          default_flow_style:
            default: false
            description: If True, nested collections will be serialized in the block
              style. If False, they will always be serialized in the flow style. See
              `PyYAML Documentation <https://pyyaml.org/wiki/PyYAMLDocumentation>`_.
            type: boolean
          encoding:
            default: utf-8
            description: Encoding that should be used to serialize the object. Defaults
              to 'utf-8'.
            type: string
          filetype:
            default: binary
            description: The file contains a YAML serialized object.
            enum:
            - yaml
            type: string
          indent:
            default: "\t"
            description: String or number of spaces that should be used to indent
              each level within the seiralized structure. Defaults to '\t'.
            type:
            - string
            - int
          newline:
            default: '

              '
            description: One or more characters indicating a newline. Defaults to
              '\n'.
            type: string
        title: YAMLFileComm
        type: object
      - additionalProperties: true
        description: Schema for file component ['json'] subtype.
        properties:
          comment:
            default: '# '
            description: One or more characters indicating a comment. Defaults to
              '# '.
            type: string
          datatype:
            description: JSON schema defining the type of object that the serializer
              will be used to serialize/deserialize. Defaults to default_datatype.
            type: schema
          filetype:
            default: binary
            description: The file contains a JSON serialized object.
            enum:
            - json
            type: string
          indent:
            default: "\t"
            description: String or number of spaces that should be used to indent
              each level within the seiralized structure. Defaults to '\t'.
            type:
            - string
            - int
          newline:
            default: '

              '
            description: One or more characters indicating a newline. Defaults to
              '\n'.
            type: string
          sort_keys:
            default: true
            description: If True, the serialization of dictionaries will be in key
              sorted order. Defaults to True.
            type: boolean
        title: JSONFileComm
        type: object
      - additionalProperties: true
        description: Schema for file component ['pickle'] subtype.
        properties:
          comment:
            default: '# '
            description: One or more characters indicating a comment. Defaults to
              '# '.
            type: string
          datatype:
            description: JSON schema defining the type of object that the serializer
              will be used to serialize/deserialize. Defaults to default_datatype.
            type: schema
          filetype:
            default: binary
            description: The file contains one or more pickled Python objects.
            enum:
            - pickle
            type: string
          newline:
            default: '

              '
            description: One or more characters indicating a newline. Defaults to
              '\n'.
            type: string
        title: PickleFileComm
        type: object
    description: Schema for file components.
    title: file
  filter:
    allOf:
    - additionalProperties: false
      dependencies:
        driver:
        - args
      description: Base schema for all subtypes of filter components.
      properties:
        filtertype:
          enum:
          - direct
          - function
          - statement
        function:
          description: The handle for a callable Python object (e.g. function) that
            should be used to determine if a message should be filtered or a string
            of the form "<function file>:<function name>" identifying a function where
            "<function file>" is the module or Python file containing the function
            and "<function name>" is the name of the function. The function should
            take the message as input and return a boolean, True if the message should
            pass through the filter, False if it should not.
          type: function
        initial_state:
          description: Dictionary of initial state variables that should be set when
            the filter is created.
          type: object
        statement:
          description: Python statement in terms of the message as represented by
            the string "%x%" that should evaluate to a boolean, True if the message
            should pass through the filter, False if it should not. The statement
            should only use a limited set of builtins and the math library (See yggdrasil.tools.safe_eval).
            If more complex relationships are required, use the FunctionFilter class.
          type: string
      title: filter_base
      type: object
    - anyOf:
      - additionalProperties: true
        description: Schema for filter component ['direct'] subtype.
        properties:
          filtertype:
            enum:
            - direct
        title: DirectFilter
        type: object
      - additionalProperties: true
        description: Schema for filter component ['statement'] subtype.
        properties:
          filtertype:
            enum:
            - statement
          statement:
            description: Python statement in terms of the message as represented by
              the string "%x%" that should evaluate to a boolean, True if the message
              should pass through the filter, False if it should not. The statement
              should only use a limited set of builtins and the math library (See
              yggdrasil.tools.safe_eval). If more complex relationships are required,
              use the FunctionFilter class.
            type: string
        required:
        - statement
        title: StatementFilter
        type: object
      - additionalProperties: true
        description: Schema for filter component ['function'] subtype.
        properties:
          filtertype:
            enum:
            - function
          function:
            description: The handle for a callable Python object (e.g. function) that
              should be used to determine if a message should be filtered or a string
              of the form "<function file>:<function name>" identifying a function
              where "<function file>" is the module or Python file containing the
              function and "<function name>" is the name of the function. The function
              should take the message as input and return a boolean, True if the message
              should pass through the filter, False if it should not.
            type: function
        required:
        - function
        title: FunctionFilter
        type: object
    description: Schema for filter components.
    title: filter
  model:
    allOf:
    - additionalProperties: false
      dependencies:
        driver:
        - args
      description: Base schema for all subtypes of model components.
      properties:
        additional_variables:
          additionalProperties:
            items:
              type: string
            type: array
          default: {}
          type: object
        aggregation:
          anyOf:
          - type: function
          - type: string
          - additionalProperties:
              anyOf:
              - type: function
              - type: string
            type: object
          default: mean
        allow_threading:
          description: If True, comm connections will be set up so that the model-side
            comms can be used by more than one thread. Defaults to False.
          type: boolean
        args:
          description: The path to the file containing the model program that will
            be run by the driver for the model's language and/or a list of arguments
            that should be passed as input to the model program or language executable
            (e.g. source code or configuration file for a domain specific language).
          items:
            type: string
          type: array
        builddir:
          type: string
        buildfile:
          type: string
        client_of:
          default: []
          description: The names of one or more models that this model will call as
            a server. If there are more than one, this should be specified as a sequence
            collection (list). The corresponding channel(s) that should be passed
            to the yggdrasil API will be the name of the server model joined with
            the name of the client model with an underscore `<server_model>_<client_model>`.
            There will be one channel created for each server the model is a client
            of. Defaults to empty list. Use of `client_of` with `function` is not
            currently supported.
          items:
            type: string
          type: array
        compiler:
          description: Command or path to executable that should be used to compile
            the model. If not provided, the compiler will be determined based on configuration
            options for the language (if present) and the registered compilers that
            are available on the current operating system.
          type: string
        compiler_flags:
          default: []
          description: Flags that should be passed to the compiler during compilation.
            If nto provided, the compiler flags will be determined based on configuration
            options for the language (if present), the compiler defaults, and the
            default_compiler_flags class attribute.
          items:
            type: string
          type: array
        configuration:
          default: Release
          description: Build type/configuration that should be built. Defaults to
            'Release'.
          type: string
        contact_email:
          description: Email address that should be used to contact the maintainer
            of the model. This parameter is only used in the model repository.
          type: string
        copies:
          default: 1
          description: The number of copies of the model that should be created. Defaults
            to 1.
          minimum: 1
          type: integer
        copy_xml_to_osr:
          default: false
          description: If True, the XML file(s) will be copied to the OSR repository
            InputFiles direcitory before running. This is necessary if the XML file(s)
            use any of the files located there since OSR always assumes the included
            file paths are relative. Defaults to False.
          type: boolean
        description:
          description: Description of the model. This parameter is only used in the
            model repository or when providing the model as a service.
          type: string
        driver:
          description: '[DEPRECATED] Name of driver class that should be used.'
          type: string
        env:
          additional_properties:
            type: string
          default: {}
          description: Dictionary of environment variables that should be set when
            the driver starts. Defaults to {}.
          type: object
        env_compiler:
          description: Environment variable where the compiler executable should be
            stored for use within the Makefile. If not provided, this will be determined
            by the target language driver.
          type: string
        env_compiler_flags:
          description: Environment variable where the compiler flags should be stored
            (including those required to compile against the |yggdrasil| interface).
            If not provided, this will be determined by the target language driver.
          type: string
        env_linker:
          description: Environment variable where the linker executable should be
            stored for use within the Makefile. If not provided, this will be determined
            by the target language driver.
          type: string
        env_linker_flags:
          description: Environment variable where the linker flags should be stored
            (including those required to link against the |yggdrasil| interface).
            If not provided, this will be determined by the target language driver.
          type: string
        function:
          description: If provided, an integrated model is created by wrapping the
            function named here. The function must be located within the file specified
            by the source file listed in the first argument. If not provided, the
            model must contain it's own calls to the |yggdrasil| interface.
          type: string
        inputs:
          default: []
          description: Zero or more channels carrying input to the model. A full description
            of channel entries and the options available for channels can be found
            :ref:`here<yaml_comm_options>`.
          items:
            $ref: '#/definitions/comm'
          type: array
        integrator:
          default: cvode
          description: Name of integrator that should be used. Valid options include
            ['cvode', 'gillespie', 'rk4', 'rk45']. Defaults to 'cvode'.
          enum:
          - cvode
          - gillespie
          - rk4
          - rk45
          type: string
        integrator_settings:
          default: {}
          description: Settings for the integrator. Defaults to empty dict.
          type: object
        interpolation:
          anyOf:
          - type: string
          - additionalProperties:
              oneOf:
              - type: string
              - properties:
                  method:
                    type: string
                required:
                - method
                type: object
            type: object
          - properties:
              method:
                type: string
            required:
            - method
            type: object
          default: index
        interpreter:
          description: Name or path of interpreter executable that should be used
            to run the model. If not provided, the interpreter will be determined
            based on configuration options for the language (if present) and the default_interpreter
            class attribute.
          type: string
        interpreter_flags:
          default: []
          description: Flags that should be passed to the interpreter when running
            the model. If not provided, the flags are determined based on configuration
            options for the language (if present) and the default_interpreter_flags
            class attribute.
          items:
            type: string
          type: array
        is_server:
          anyOf:
          - type: boolean
          - additionalProperties: false
            properties:
              input:
                type: string
              output:
                type: string
            type: object
          default: false
          description: 'If `True`, the model is assumed to be a server for one or
            more client models and an instance of :class:`yggdrasil.drivers.ServerDriver`
            is started. The corresponding channel that should be passed to the yggdrasil
            API will be the name of the model. If is_server is a dictionary, it should
            contain an ''input'' key and an ''output'' key. These are required to
            be the names of existing input and output channels in the model that will
            be co-opted by the server. (Note: This requires that the co-opted output
            channel''s send method is called once for each time the co-opted input
            channel''s recv method is called. If used with the `function` parameter,
            `is_server` must be a dictionary. Defaults to False.'
        iter_function_over:
          default: []
          description: Variable(s) that should be received or sent as an array, but
            iterated over. Defaults to an empty array and is ignored.
          items:
            type: string
          type: array
        language:
          default: executable
          description: The programming language that the model is written in. A list
            of available languages can be found :ref:`here <schema_table_model_subtype_rst>`.
          enum:
          - R
          - c
          - c++
          - cmake
          - cpp
          - cxx
          - dummy
          - executable
          - fortran
          - lpy
          - make
          - matlab
          - mpi
          - osr
          - python
          - r
          - sbml
          - timesync
          type: string
        linker:
          description: Command or path to executable that should be used to link the
            model. If not provided, the linker will be determined based on configuration
            options for the language (if present) and the registered linkers that
            are available on the current operating system
          type: string
        linker_flags:
          default: []
          description: Flags that should be passed to the linker during compilation.
            If nto provided, the linker flags will be determined based on configuration
            options for the language (if present), the linker defaults, and the default_linker_flags
            class attribute.
          items:
            type: string
          type: array
        logging_level:
          default: ''
          description: The level of logging messages that should be displayed by the
            model. Defaults to the logging level as determined by the configuration
            file and environment variables.
          type: string
        makedir:
          description: Directory where make should be invoked from if it is not the
            same as the directory containing the makefile. Defaults to directory containing
            makefile if provided, otherwise working_dir.
          type: string
        makefile:
          default: Makefile
          description: Path to make file either absolute, relative to makedir (if
            provided), or relative to working_dir. Defaults to Makefile.
          type: string
        name:
          description: Name used for component in log messages.
          type: string
        only_output_final_step:
          default: false
          description: If True, only the final timestep is output. Defaults to False.
          type: boolean
        outputs:
          default: []
          description: Zero or more channels carrying output from the model. A full
            description of channel entries and the options available for channels
            can be found :ref:`here<yaml_comm_options>`.
          items:
            $ref: '#/definitions/comm'
          type: array
        outputs_in_inputs:
          description: If True, outputs from wrapped model functions are passed by
            pointer as inputs for modification and the return value will be a flag.
            If False, outputs are limited to return values. Defaults to the value
            of the class attribute outputs_in_inputs.
          type: boolean
        overwrite:
          description: If True, any existing model products (compilation products,
            wrapper scripts, etc.) are removed prior to the run. If False, the products
            are not removed. Defaults to True. Setting this to False can improve the
            performance, particularly for models that take a long time to compile,
            but this should only be done once the model has been fully debugged to
            ensure that each run is tested on a clean copy of the model. The value
            of this keyword also determines whether or not products are removed after
            a run.
          type: boolean
        preserve_cache:
          default: false
          description: If True model products will be kept following the run, otherwise
            all products will be cleaned up. Defaults to False. This keyword is superceeded
            by overwrite.
          type: boolean
        products:
          default: []
          description: Paths to files created by the model that should be cleaned
            up when the model exits. Entries can be absolute paths or paths relative
            to the working directory. Defaults to [].
          items:
            type: string
          type: array
        repository_url:
          description: URL for the git repository containing the model source code.
            If provided, relative paths in the model YAML definition will be considered
            relative to the repository root directory.
          type: string
        reset:
          default: false
          description: If True, the simulation will be reset to it's initial values
            before each call (including the start time). Defaults to False.
          type: boolean
        selections:
          default: []
          description: Variables to include in the output. Defaults to None and the
            time/floating selections will be returned.
          items:
            type: string
          type: array
        skip_interpreter:
          default: false
          description: If True, no interpreter will be added to the arguments. This
            should only be used for subclasses that will not be invoking the model
            via the command line. Defaults to False.
          type: boolean
        skip_start_time:
          default: false
          description: If True, the results for the initial time step will not be
            output. Defaults to False. This option is ignored if only_output_final_step
            is True.
          type: boolean
        source_files:
          default: []
          description: Source files that should be compiled into an executable. Defaults
            to an empty list and the driver will search for a source file based on
            the model executable (the first model argument).
          items:
            type: string
          type: array
        source_products:
          default: []
          description: Files created by running the model that are source files. These
            files will be removed without checking their extension so users should
            avoid adding files to this list unless they are sure they should be deleted.
            Defaults to [].
          items:
            type: string
          type: array
        sourcedir:
          description: Source directory to call cmake on. If not provided it is set
            to working_dir. This should be the directory containing the CMakeLists.txt
            file. It can be relative to working_dir or absolute.
          type: string
        standard:
          default: f2003
          description: Fortran standard that should be used. Defaults to 'f2003'.
          enum:
          - f2003
          - f2008
          type: string
        start_time:
          default: 0.0
          description: Time that simulation should be started from. If 'reset' is
            True, the start time will always be the provided value, otherwise, the
            start time will be the end of the previous call after the first call.
            Defaults to 0.0.
          type: number
        steps:
          default: 1
          description: Number of steps that should be output. Defaults to None.
          type: integer
        strace_flags:
          default:
          - -e
          - trace=memory
          description: Flags to pass to strace (or dtrace). Defaults to [].
          items:
            type: string
          type: array
        sync_vars_in:
          default: []
          description: Variables that should be synchronized from other models. Defaults
            to [].
          items:
            type: string
          type: array
        sync_vars_out:
          default: []
          description: Variables that should be synchronized to other models. Defaults
            to [].
          items:
            type: string
          type: array
        synonyms:
          additionalProperties:
            additionalProperties:
              anyOf:
              - type: string
              - properties:
                  alt:
                    anyOf:
                    - type: string
                    - items:
                        type: string
                      type: array
                  alt2base:
                    type: function
                  base2alt:
                    type: function
                required:
                - alt
                - alt2base
                - base2alt
                type: object
            type: object
          default: {}
          description: 'Mapping from model names to mappings from base variables names
            to information about one or more alternate variable names used by the
            named model that should be converted to the base variable. Values for
            providing information about alternate variables can either be strings
            (implies equivalence with the base variable in everything but name and
            units) or mappings with the keys:'
          type: object
        target:
          description: Make target that should be built to create the model executable.
            Defaults to None.
          type: string
        target_compiler:
          description: Compilation tool that should be used to compile the target
            language. Defaults to None and will be set based on the selected language
            driver.
          type: string
        target_compiler_flags:
          description: Compilation flags that should be passed to the target language
            compiler. Defaults to [].
          items:
            type: string
          type: array
        target_language:
          description: Language that the target is written in. Defaults to None and
            will be set based on the source files provided.
          type: string
        target_linker:
          description: Compilation tool that should be used to link the target language.
            Defaults to None and will be set based on the selected language driver.
          type: string
        target_linker_flags:
          description: Linking flags that should be passed to the target language
            linker. Defaults to [].
          items:
            type: string
          type: array
        timesync:
          anyOf:
          - type: boolean
          - type: string
          - properties:
              inputs:
                anyOf:
                - type: string
                - items:
                    type: string
                  type: array
              name:
                default: timesync
                type: string
              outputs:
                anyOf:
                - type: string
                - items:
                    type: string
                  type: array
            required:
            - name
            type: object
          - items:
              anyOf:
              - type: string
              - properties:
                  inputs:
                    anyOf:
                    - type: string
                    - items:
                        type: string
                      type: array
                  name:
                    default: timesync
                    type: string
                  outputs:
                    anyOf:
                    - type: string
                    - items:
                        type: string
                      type: array
                required:
                - name
                type: object
            type: array
          default: false
          description: If set, the model is assumed to call a send then receive of
            the state at each timestep for syncronization with other models that are
            also integrating in time. If a string is provided, it is assumed to be
            the name of the server that will handle timestep synchronization. If a
            boolean is provided, the name of the server will be assumed to be 'timestep'.
            Defaults to False.
        update_interval:
          additionalProperties:
            type: float
          default:
            timesync: 1.0
          description: Max simulation interval at which synchronization should occur
            (in days). Defaults to 1.0 if not provided. If the XML input file loads
            additional export modules that output at a shorter rate, the existing
            table of values will be extrapolated.
          type: object
        use_symunit:
          default: false
          description: If True, input/output variables with units will be represented
            in Matlab using symunit. Defaults to False.
          type: boolean
        valgrind_flags:
          default:
          - --leak-check=full
          - --show-leak-kinds=all
          description: Flags to pass to valgrind. Defaults to [].
          items:
            type: string
          type: array
        with_strace:
          default: false
          description: If True, the command is run with strace (on Linux) or dtrace
            (on MacOS). Defaults to False.
          type: boolean
        with_valgrind:
          default: false
          description: If True, the command is run with valgrind. Defaults to False.
          type: boolean
        working_dir:
          description: Working directory. If not provided, the current working directory
            is used.
          type: string
      required:
      - args
      - name
      - working_dir
      - language
      title: model_base
      type: object
    - anyOf:
      - additionalProperties: true
        description: Schema for model component ['make'] subtype.
        properties:
          builddir:
            type: string
          buildfile:
            type: string
          compiler:
            description: Command or path to executable that should be used to compile
              the model. If not provided, the compiler will be determined based on
              configuration options for the language (if present) and the registered
              compilers that are available on the current operating system.
            type: string
          compiler_flags:
            default: []
            description: Flags that should be passed to the compiler during compilation.
              If nto provided, the compiler flags will be determined based on configuration
              options for the language (if present), the compiler defaults, and the
              default_compiler_flags class attribute.
            items:
              type: string
            type: array
          env_compiler:
            description: Environment variable where the compiler executable should
              be stored for use within the Makefile. If not provided, this will be
              determined by the target language driver.
            type: string
          env_compiler_flags:
            description: Environment variable where the compiler flags should be stored
              (including those required to compile against the |yggdrasil| interface).
              If not provided, this will be determined by the target language driver.
            type: string
          env_linker:
            description: Environment variable where the linker executable should be
              stored for use within the Makefile. If not provided, this will be determined
              by the target language driver.
            type: string
          env_linker_flags:
            description: Environment variable where the linker flags should be stored
              (including those required to link against the |yggdrasil| interface).
              If not provided, this will be determined by the target language driver.
            type: string
          language:
            default: executable
            description: Model is written in C/C++ and has a Makefile for compilation.
            enum:
            - make
            type: string
          linker:
            description: Command or path to executable that should be used to link
              the model. If not provided, the linker will be determined based on configuration
              options for the language (if present) and the registered linkers that
              are available on the current operating system
            type: string
          linker_flags:
            default: []
            description: Flags that should be passed to the linker during compilation.
              If nto provided, the linker flags will be determined based on configuration
              options for the language (if present), the linker defaults, and the
              default_linker_flags class attribute.
            items:
              type: string
            type: array
          makedir:
            description: Directory where make should be invoked from if it is not
              the same as the directory containing the makefile. Defaults to directory
              containing makefile if provided, otherwise working_dir.
            type: string
          makefile:
            default: Makefile
            description: Path to make file either absolute, relative to makedir (if
              provided), or relative to working_dir. Defaults to Makefile.
            type: string
          source_files:
            default: []
            description: Source files that should be compiled into an executable.
              Defaults to an empty list and the driver will search for a source file
              based on the model executable (the first model argument).
            items:
              type: string
            type: array
          target:
            description: Make target that should be built to create the model executable.
              Defaults to None.
            type: string
          target_compiler:
            description: Compilation tool that should be used to compile the target
              language. Defaults to None and will be set based on the selected language
              driver.
            type: string
          target_compiler_flags:
            description: Compilation flags that should be passed to the target language
              compiler. Defaults to [].
            items:
              type: string
            type: array
          target_language:
            description: Language that the target is written in. Defaults to None
              and will be set based on the source files provided.
            type: string
          target_linker:
            description: Compilation tool that should be used to link the target language.
              Defaults to None and will be set based on the selected language driver.
            type: string
          target_linker_flags:
            description: Linking flags that should be passed to the target language
              linker. Defaults to [].
            items:
              type: string
            type: array
        title: MakeModelDriver
        type: object
      - additionalProperties: true
        description: Schema for model component ['mpi'] subtype.
        properties:
          language:
            default: executable
            description: Model is being run on another MPI process and this driver
              is used as as stand-in to monitor it on the root process.
            enum:
            - mpi
            type: string
        title: MPIPartnerModel
        type: object
      - additionalProperties: true
        description: Schema for model component ['python'] subtype.
        properties:
          interpreter:
            description: Name or path of interpreter executable that should be used
              to run the model. If not provided, the interpreter will be determined
              based on configuration options for the language (if present) and the
              default_interpreter class attribute.
            type: string
          interpreter_flags:
            default: []
            description: Flags that should be passed to the interpreter when running
              the model. If not provided, the flags are determined based on configuration
              options for the language (if present) and the default_interpreter_flags
              class attribute.
            items:
              type: string
            type: array
          language:
            default: executable
            description: Model is written in Python.
            enum:
            - python
            type: string
          skip_interpreter:
            default: false
            description: If True, no interpreter will be added to the arguments. This
              should only be used for subclasses that will not be invoking the model
              via the command line. Defaults to False.
            type: boolean
        title: PythonModelDriver
        type: object
      - additionalProperties: true
        description: Schema for model component ['lpy'] subtype.
        properties:
          interpreter:
            description: Name or path of interpreter executable that should be used
              to run the model. If not provided, the interpreter will be determined
              based on configuration options for the language (if present) and the
              default_interpreter class attribute.
            type: string
          interpreter_flags:
            default: []
            description: Flags that should be passed to the interpreter when running
              the model. If not provided, the flags are determined based on configuration
              options for the language (if present) and the default_interpreter_flags
              class attribute.
            items:
              type: string
            type: array
          language:
            default: executable
            description: Model is an LPy system.
            enum:
            - lpy
            type: string
          skip_interpreter:
            default: false
            description: If True, no interpreter will be added to the arguments. This
              should only be used for subclasses that will not be invoking the model
              via the command line. Defaults to False.
            type: boolean
        title: LPyModelDriver
        type: object
      - additionalProperties: true
        description: Schema for model component ['executable'] subtype.
        properties:
          language:
            default: executable
            description: Model is an executable.
            enum:
            - executable
            type: string
        title: ExecutableModelDriver
        type: object
      - additionalProperties: true
        description: Schema for model component ['c'] subtype.
        properties:
          compiler:
            description: Command or path to executable that should be used to compile
              the model. If not provided, the compiler will be determined based on
              configuration options for the language (if present) and the registered
              compilers that are available on the current operating system.
            type: string
          compiler_flags:
            default: []
            description: Flags that should be passed to the compiler during compilation.
              If nto provided, the compiler flags will be determined based on configuration
              options for the language (if present), the compiler defaults, and the
              default_compiler_flags class attribute.
            items:
              type: string
            type: array
          language:
            default: executable
            description: Model is written in C.
            enum:
            - c
            type: string
          linker:
            description: Command or path to executable that should be used to link
              the model. If not provided, the linker will be determined based on configuration
              options for the language (if present) and the registered linkers that
              are available on the current operating system
            type: string
          linker_flags:
            default: []
            description: Flags that should be passed to the linker during compilation.
              If nto provided, the linker flags will be determined based on configuration
              options for the language (if present), the linker defaults, and the
              default_linker_flags class attribute.
            items:
              type: string
            type: array
          source_files:
            default: []
            description: Source files that should be compiled into an executable.
              Defaults to an empty list and the driver will search for a source file
              based on the model executable (the first model argument).
            items:
              type: string
            type: array
        title: CModelDriver
        type: object
      - additionalProperties: true
        description: Schema for model component ['c++', 'cpp', 'cxx'] subtype.
        properties:
          compiler:
            description: Command or path to executable that should be used to compile
              the model. If not provided, the compiler will be determined based on
              configuration options for the language (if present) and the registered
              compilers that are available on the current operating system.
            type: string
          compiler_flags:
            default: []
            description: Flags that should be passed to the compiler during compilation.
              If nto provided, the compiler flags will be determined based on configuration
              options for the language (if present), the compiler defaults, and the
              default_compiler_flags class attribute.
            items:
              type: string
            type: array
          language:
            default: executable
            description: Model is written in C++.
            enum:
            - c++
            - cpp
            - cxx
            type: string
          linker:
            description: Command or path to executable that should be used to link
              the model. If not provided, the linker will be determined based on configuration
              options for the language (if present) and the registered linkers that
              are available on the current operating system
            type: string
          linker_flags:
            default: []
            description: Flags that should be passed to the linker during compilation.
              If nto provided, the linker flags will be determined based on configuration
              options for the language (if present), the linker defaults, and the
              default_linker_flags class attribute.
            items:
              type: string
            type: array
          source_files:
            default: []
            description: Source files that should be compiled into an executable.
              Defaults to an empty list and the driver will search for a source file
              based on the model executable (the first model argument).
            items:
              type: string
            type: array
        title: CPPModelDriver
        type: object
      - additionalProperties: true
        description: Schema for model component ['osr'] subtype.
        properties:
          copy_xml_to_osr:
            default: false
            description: If True, the XML file(s) will be copied to the OSR repository
              InputFiles direcitory before running. This is necessary if the XML file(s)
              use any of the files located there since OSR always assumes the included
              file paths are relative. Defaults to False.
            type: boolean
          language:
            default: executable
            description: Model is an OSR model.
            enum:
            - osr
            type: string
          sync_vars_in:
            default: []
            description: Variables that should be synchronized from other models.
              Defaults to [].
            items:
              type: string
            type: array
          sync_vars_out:
            default: []
            description: Variables that should be synchronized to other models. Defaults
              to [].
            items:
              type: string
            type: array
          update_interval:
            additionalProperties:
              type: float
            default:
              timesync: 1.0
            description: Max simulation interval at which synchronization should occur
              (in days). Defaults to 1.0 if not provided. If the XML input file loads
              additional export modules that output at a shorter rate, the existing
              table of values will be extrapolated.
            type: object
        title: OSRModelDriver
        type: object
      - additionalProperties: true
        description: Schema for model component ['matlab'] subtype.
        properties:
          interpreter:
            description: Name or path of interpreter executable that should be used
              to run the model. If not provided, the interpreter will be determined
              based on configuration options for the language (if present) and the
              default_interpreter class attribute.
            type: string
          interpreter_flags:
            default: []
            description: Flags that should be passed to the interpreter when running
              the model. If not provided, the flags are determined based on configuration
              options for the language (if present) and the default_interpreter_flags
              class attribute.
            items:
              type: string
            type: array
          language:
            default: executable
            description: Model is written in Matlab.
            enum:
            - matlab
            type: string
          skip_interpreter:
            default: false
            description: If True, no interpreter will be added to the arguments. This
              should only be used for subclasses that will not be invoking the model
              via the command line. Defaults to False.
            type: boolean
          use_symunit:
            default: false
            description: If True, input/output variables with units will be represented
              in Matlab using symunit. Defaults to False.
            type: boolean
        title: MatlabModelDriver
        type: object
      - additionalProperties: true
        description: Schema for model component ['R', 'r'] subtype.
        properties:
          interpreter:
            description: Name or path of interpreter executable that should be used
              to run the model. If not provided, the interpreter will be determined
              based on configuration options for the language (if present) and the
              default_interpreter class attribute.
            type: string
          interpreter_flags:
            default: []
            description: Flags that should be passed to the interpreter when running
              the model. If not provided, the flags are determined based on configuration
              options for the language (if present) and the default_interpreter_flags
              class attribute.
            items:
              type: string
            type: array
          language:
            default: executable
            description: Model is written in R.
            enum:
            - R
            - r
            type: string
          skip_interpreter:
            default: false
            description: If True, no interpreter will be added to the arguments. This
              should only be used for subclasses that will not be invoking the model
              via the command line. Defaults to False.
            type: boolean
        title: RModelDriver
        type: object
      - additionalProperties: true
        description: Schema for model component ['timesync'] subtype.
        properties:
          additional_variables:
            additionalProperties:
              items:
                type: string
              type: array
            default: {}
            type: object
          aggregation:
            anyOf:
            - type: function
            - type: string
            - additionalProperties:
                anyOf:
                - type: function
                - type: string
              type: object
            default: mean
          interpolation:
            anyOf:
            - type: string
            - additionalProperties:
                oneOf:
                - type: string
                - properties:
                    method:
                      type: string
                  required:
                  - method
                  type: object
              type: object
            - properties:
                method:
                  type: string
              required:
              - method
              type: object
            default: index
          interpreter:
            description: Name or path of interpreter executable that should be used
              to run the model. If not provided, the interpreter will be determined
              based on configuration options for the language (if present) and the
              default_interpreter class attribute.
            type: string
          interpreter_flags:
            default: []
            description: Flags that should be passed to the interpreter when running
              the model. If not provided, the flags are determined based on configuration
              options for the language (if present) and the default_interpreter_flags
              class attribute.
            items:
              type: string
            type: array
          language:
            default: executable
            description: Model is dedicated to synchronizingtimesteps between other
              models.
            enum:
            - timesync
            type: string
          skip_interpreter:
            default: false
            description: If True, no interpreter will be added to the arguments. This
              should only be used for subclasses that will not be invoking the model
              via the command line. Defaults to False.
            type: boolean
          synonyms:
            additionalProperties:
              additionalProperties:
                anyOf:
                - type: string
                - properties:
                    alt:
                      anyOf:
                      - type: string
                      - items:
                          type: string
                        type: array
                    alt2base:
                      type: function
                    base2alt:
                      type: function
                  required:
                  - alt
                  - alt2base
                  - base2alt
                  type: object
              type: object
            default: {}
            description: 'Mapping from model names to mappings from base variables
              names to information about one or more alternate variable names used
              by the named model that should be converted to the base variable. Values
              for providing information about alternate variables can either be strings
              (implies equivalence with the base variable in everything but name and
              units) or mappings with the keys:'
            type: object
        title: TimeSyncModelDriver
        type: object
      - additionalProperties: true
        description: Schema for model component ['sbml'] subtype.
        properties:
          integrator:
            default: cvode
            description: Name of integrator that should be used. Valid options include
              ['cvode', 'gillespie', 'rk4', 'rk45']. Defaults to 'cvode'.
            enum:
            - cvode
            - gillespie
            - rk4
            - rk45
            type: string
          integrator_settings:
            default: {}
            description: Settings for the integrator. Defaults to empty dict.
            type: object
          interpreter:
            description: Name or path of interpreter executable that should be used
              to run the model. If not provided, the interpreter will be determined
              based on configuration options for the language (if present) and the
              default_interpreter class attribute.
            type: string
          interpreter_flags:
            default: []
            description: Flags that should be passed to the interpreter when running
              the model. If not provided, the flags are determined based on configuration
              options for the language (if present) and the default_interpreter_flags
              class attribute.
            items:
              type: string
            type: array
          language:
            default: executable
            description: Model is an SBML model.
            enum:
            - sbml
            type: string
          only_output_final_step:
            default: false
            description: If True, only the final timestep is output. Defaults to False.
            type: boolean
          reset:
            default: false
            description: If True, the simulation will be reset to it's initial values
              before each call (including the start time). Defaults to False.
            type: boolean
          selections:
            default: []
            description: Variables to include in the output. Defaults to None and
              the time/floating selections will be returned.
            items:
              type: string
            type: array
          skip_interpreter:
            default: false
            description: If True, no interpreter will be added to the arguments. This
              should only be used for subclasses that will not be invoking the model
              via the command line. Defaults to False.
            type: boolean
          skip_start_time:
            default: false
            description: If True, the results for the initial time step will not be
              output. Defaults to False. This option is ignored if only_output_final_step
              is True.
            type: boolean
          start_time:
            default: 0.0
            description: Time that simulation should be started from. If 'reset' is
              True, the start time will always be the provided value, otherwise, the
              start time will be the end of the previous call after the first call.
              Defaults to 0.0.
            type: number
          steps:
            default: 1
            description: Number of steps that should be output. Defaults to None.
            type: integer
        title: SBMLModelDriver
        type: object
      - additionalProperties: true
        description: Schema for model component ['cmake'] subtype.
        properties:
          builddir:
            description: Directory where the build should be saved. Defaults to <sourcedir>/build.
              It can be relative to working_dir or absolute.
            type: string
          buildfile:
            type: string
          compiler:
            description: Command or path to executable that should be used to compile
              the model. If not provided, the compiler will be determined based on
              configuration options for the language (if present) and the registered
              compilers that are available on the current operating system.
            type: string
          compiler_flags:
            default: []
            description: Flags that should be passed to the compiler during compilation.
              If nto provided, the compiler flags will be determined based on configuration
              options for the language (if present), the compiler defaults, and the
              default_compiler_flags class attribute.
            items:
              type: string
            type: array
          configuration:
            default: Release
            description: Build type/configuration that should be built. Defaults to
              'Release'.
            type: string
          env_compiler:
            description: Environment variable where the compiler executable should
              be stored for use within the Makefile. If not provided, this will be
              determined by the target language driver.
            type: string
          env_compiler_flags:
            description: Environment variable where the compiler flags should be stored
              (including those required to compile against the |yggdrasil| interface).
              If not provided, this will be determined by the target language driver.
            type: string
          env_linker:
            description: Environment variable where the linker executable should be
              stored for use within the Makefile. If not provided, this will be determined
              by the target language driver.
            type: string
          env_linker_flags:
            description: Environment variable where the linker flags should be stored
              (including those required to link against the |yggdrasil| interface).
              If not provided, this will be determined by the target language driver.
            type: string
          language:
            default: executable
            description: Model is written in C/C++ and has a CMake build system.
            enum:
            - cmake
            type: string
          linker:
            description: Command or path to executable that should be used to link
              the model. If not provided, the linker will be determined based on configuration
              options for the language (if present) and the registered linkers that
              are available on the current operating system
            type: string
          linker_flags:
            default: []
            description: Flags that should be passed to the linker during compilation.
              If nto provided, the linker flags will be determined based on configuration
              options for the language (if present), the linker defaults, and the
              default_linker_flags class attribute.
            items:
              type: string
            type: array
          source_files:
            default: []
            description: Source files that should be compiled into an executable.
              Defaults to an empty list and the driver will search for a source file
              based on the model executable (the first model argument).
            items:
              type: string
            type: array
          sourcedir:
            description: Source directory to call cmake on. If not provided it is
              set to working_dir. This should be the directory containing the CMakeLists.txt
              file. It can be relative to working_dir or absolute.
            type: string
          target:
            description: Make target that should be built to create the model executable.
              Defaults to None.
            type: string
          target_compiler:
            description: Compilation tool that should be used to compile the target
              language. Defaults to None and will be set based on the selected language
              driver.
            type: string
          target_compiler_flags:
            description: Compilation flags that should be passed to the target language
              compiler. Defaults to [].
            items:
              type: string
            type: array
          target_language:
            description: Language that the target is written in. Defaults to None
              and will be set based on the source files provided.
            type: string
          target_linker:
            description: Compilation tool that should be used to link the target language.
              Defaults to None and will be set based on the selected language driver.
            type: string
          target_linker_flags:
            description: Linking flags that should be passed to the target language
              linker. Defaults to [].
            items:
              type: string
            type: array
        title: CMakeModelDriver
        type: object
      - additionalProperties: true
        description: Schema for model component ['fortran'] subtype.
        properties:
          compiler:
            description: Command or path to executable that should be used to compile
              the model. If not provided, the compiler will be determined based on
              configuration options for the language (if present) and the registered
              compilers that are available on the current operating system.
            type: string
          compiler_flags:
            default: []
            description: Flags that should be passed to the compiler during compilation.
              If nto provided, the compiler flags will be determined based on configuration
              options for the language (if present), the compiler defaults, and the
              default_compiler_flags class attribute.
            items:
              type: string
            type: array
          language:
            default: executable
            description: Model is written in Fortran.
            enum:
            - fortran
            type: string
          linker:
            description: Command or path to executable that should be used to link
              the model. If not provided, the linker will be determined based on configuration
              options for the language (if present) and the registered linkers that
              are available on the current operating system
            type: string
          linker_flags:
            default: []
            description: Flags that should be passed to the linker during compilation.
              If nto provided, the linker flags will be determined based on configuration
              options for the language (if present), the linker defaults, and the
              default_linker_flags class attribute.
            items:
              type: string
            type: array
          source_files:
            default: []
            description: Source files that should be compiled into an executable.
              Defaults to an empty list and the driver will search for a source file
              based on the model executable (the first model argument).
            items:
              type: string
            type: array
          standard:
            default: f2003
            description: Fortran standard that should be used. Defaults to 'f2003'.
            enum:
            - f2003
            - f2008
            type: string
        title: FortranModelDriver
        type: object
      - additionalProperties: true
        description: Schema for model component ['dummy'] subtype.
        properties:
          interpreter:
            description: Name or path of interpreter executable that should be used
              to run the model. If not provided, the interpreter will be determined
              based on configuration options for the language (if present) and the
              default_interpreter class attribute.
            type: string
          interpreter_flags:
            default: []
            description: Flags that should be passed to the interpreter when running
              the model. If not provided, the flags are determined based on configuration
              options for the language (if present) and the default_interpreter_flags
              class attribute.
            items:
              type: string
            type: array
          language:
            default: executable
            description: The programming language that the model is written in. A
              list of available languages can be found :ref:`here <schema_table_model_subtype_rst>`.
            enum:
            - dummy
            type: string
          skip_interpreter:
            default: false
            description: If True, no interpreter will be added to the arguments. This
              should only be used for subclasses that will not be invoking the model
              via the command line. Defaults to False.
            type: boolean
        title: DummyModelDriver
        type: object
    description: Schema for model components.
    title: model
  serializer:
    allOf:
    - additionalProperties: false
      dependencies:
        driver:
        - args
      description: Base schema for all subtypes of serializer components.
      properties:
        as_array:
          default: false
          description: If True, each of the arguments being serialized/deserialized
            will be arrays that are converted to/from bytes in column major ('F')
            order. Otherwise, each argument should be a scalar. Defaults to False.
          type: boolean
        comment:
          default: '# '
          description: One or more characters indicating a comment. Defaults to '#
            '.
          type: string
        datatype:
          description: JSON schema defining the type of object that the serializer
            will be used to serialize/deserialize. Defaults to default_datatype.
          type: schema
        default_flow_style:
          default: false
          description: If True, nested collections will be serialized in the block
            style. If False, they will always be serialized in the flow style. See
            `PyYAML Documentation <https://pyyaml.org/wiki/PyYAMLDocumentation>`_.
          type: boolean
        delimiter:
          default: "\t"
          description: Character(s) that should be used to separate columns. Defaults
            to '\t'.
          type: string
        encoded_datatype:
          description: JSON schema describing the type that serialized objects should
            conform to. Defaults to the class attribute default_encoded_datatype.
            If either func_serialize or func_deserialize are not provided, this needs
            to be specified in order to serialize non-bytes objects.
          type: schema
        encoding:
          default: utf-8
          description: Encoding that should be used to serialize the object. Defaults
            to 'utf-8'.
          type: string
        field_names:
          description: The names of fields in the format string. If not provided,
            names are set based on the order of the fields in the format string.
          items:
            type: string
          type: array
        field_units:
          description: The units of fields in the format string. If not provided,
            all fields are assumed to be dimensionless.
          items:
            type: string
          type: array
        format_str:
          description: If provided, this string will be used to format messages from
            a list of arguments and parse messages to get a list of arguments in C
            printf/scanf style. Defaults to None and messages are assumed to already
            be bytes.
          type: string
        func_deserialize:
          description: Callable object that takes objects of a type that conforms
            to encoded_datatype and returns a deserialized Python object. Defaults
            to None and the default deserialization for encoded_datatype will be used.
          type: function
        func_serialize:
          description: Callable object that takes Python objects as input and returns
            a representation that conforms to encoded_datatype. Defaults to None and
            the default serialization for encoded_datatype will be used.
          type: function
        indent:
          default: "\t"
          description: String or number of spaces that should be used to indent each
            level within the seiralized structure. Defaults to '\t'.
          type:
          - string
          - int
        newline:
          default: '

            '
          description: One or more characters indicating a newline. Defaults to '\n'.
          type: string
        no_header:
          default: false
          description: If True, headers will not be read or serialized from/to tables.
            Defaults to False.
          type: boolean
        seritype:
          default: default
          description: Serializer type.
          enum:
          - default
          - direct
          - functional
          - json
          - map
          - mat
          - obj
          - pandas
          - pickle
          - ply
          - table
          - wofost
          - yaml
          type: string
        sort_keys:
          default: true
          description: If True, the serialization of dictionaries will be in key sorted
            order. Defaults to True.
          type: boolean
        str_as_bytes:
          default: false
          description: If True, strings in columns are read as bytes. Defaults to
            False.
          type: boolean
        use_astropy:
          default: false
          description: If True, the astropy package will be used to serialize/deserialize
            table. Defaults to False.
          type: boolean
      title: serializer_base
      type: object
    - anyOf:
      - additionalProperties: true
        description: Schema for serializer component ['default'] subtype.
        properties:
          seritype:
            default: default
            description: Default serializer that uses |yggdrasil|'s extended JSON
              serialization based on a provided type definition (See discussion :ref:`here
              <serialization_rst>`).
            enum:
            - default
            type: string
        title: DefaultSerialize
        type: object
      - additionalProperties: true
        description: Schema for serializer component ['table'] subtype.
        properties:
          as_array:
            default: false
            description: If True, each of the arguments being serialized/deserialized
              will be arrays that are converted to/from bytes in column major ('F')
              order. Otherwise, each argument should be a scalar. Defaults to False.
            type: boolean
          delimiter:
            default: "\t"
            description: Character(s) that should be used to separate columns. Defaults
              to '\t'.
            type: string
          field_names:
            description: The names of fields in the format string. If not provided,
              names are set based on the order of the fields in the format string.
            items:
              type: string
            type: array
          field_units:
            description: The units of fields in the format string. If not provided,
              all fields are assumed to be dimensionless.
            items:
              type: string
            type: array
          format_str:
            description: If provided, this string will be used to format messages
              from a list of arguments and parse messages to get a list of arguments
              in C printf/scanf style. Defaults to None and messages are assumed to
              already be bytes.
            type: string
          seritype:
            default: default
            description: ASCII tab (or otherwise) delimited table.
            enum:
            - table
            type: string
          use_astropy:
            default: false
            description: If True, the astropy package will be used to serialize/deserialize
              table. Defaults to False.
            type: boolean
        title: AsciiTableSerialize
        type: object
      - additionalProperties: true
        description: Schema for serializer component ['pandas'] subtype.
        properties:
          delimiter:
            default: "\t"
            description: Character(s) that should be used to separate columns. Defaults
              to '\t'.
            type: string
          field_names:
            description: The names of fields in the format string. If not provided,
              names are set based on the order of the fields in the format string.
            items:
              type: string
            type: array
          field_units:
            description: The units of fields in the format string. If not provided,
              all fields are assumed to be dimensionless.
            items:
              type: string
            type: array
          format_str:
            description: If provided, this string will be used to format messages
              from a list of arguments and parse messages to get a list of arguments
              in C printf/scanf style. Defaults to None and messages are assumed to
              already be bytes.
            type: string
          no_header:
            default: false
            description: If True, headers will not be read or serialized from/to tables.
              Defaults to False.
            type: boolean
          seritype:
            default: default
            description: Serializes tables using the pandas package.
            enum:
            - pandas
            type: string
          str_as_bytes:
            default: false
            description: If True, strings in columns are read as bytes. Defaults to
              False.
            type: boolean
          use_astropy:
            default: false
            description: If True, the astropy package will be used to serialize/deserialize
              table. Defaults to False.
            type: boolean
        title: PandasSerialize
        type: object
      - additionalProperties: true
        description: Schema for serializer component ['functional'] subtype.
        properties:
          encoded_datatype:
            description: JSON schema describing the type that serialized objects should
              conform to. Defaults to the class attribute default_encoded_datatype.
              If either func_serialize or func_deserialize are not provided, this
              needs to be specified in order to serialize non-bytes objects.
            type: schema
          func_deserialize:
            description: Callable object that takes objects of a type that conforms
              to encoded_datatype and returns a deserialized Python object. Defaults
              to None and the default deserialization for encoded_datatype will be
              used.
            type: function
          func_serialize:
            description: Callable object that takes Python objects as input and returns
              a representation that conforms to encoded_datatype. Defaults to None
              and the default serialization for encoded_datatype will be used.
            type: function
          seritype:
            default: default
            description: Serializer that uses provied function to serialize messages.
            enum:
            - functional
            type: string
        title: FunctionalSerialize
        type: object
      - additionalProperties: true
        description: Schema for serializer component ['mat'] subtype.
        properties:
          seritype:
            default: default
            description: Serializes objects using the Matlab .mat format.
            enum:
            - mat
            type: string
        title: MatSerialize
        type: object
      - additionalProperties: true
        description: Schema for serializer component ['direct'] subtype.
        properties:
          seritype:
            default: default
            description: Direct serialization of bytes.
            enum:
            - direct
            type: string
        title: DirectSerialize
        type: object
      - additionalProperties: true
        description: Schema for serializer component ['json'] subtype.
        properties:
          indent:
            default: "\t"
            description: String or number of spaces that should be used to indent
              each level within the seiralized structure. Defaults to '\t'.
            type:
            - string
            - int
          seritype:
            default: default
            description: Serializes Python objects using the JSON standard.
            enum:
            - json
            type: string
          sort_keys:
            default: true
            description: If True, the serialization of dictionaries will be in key
              sorted order. Defaults to True.
            type: boolean
        title: JSONSerialize
        type: object
      - additionalProperties: true
        description: Schema for serializer component ['ply'] subtype.
        properties:
          seritype:
            default: default
            description: Serialize 3D structures using Ply format.
            enum:
            - ply
            type: string
        title: PlySerialize
        type: object
      - additionalProperties: true
        description: Schema for serializer component ['map'] subtype.
        properties:
          delimiter:
            default: "\t"
            description: Delimiter that should be used to separate name/value pairs
              in the map. Defaults to \t.
            type: string
          seritype:
            default: default
            description: Serialzation of mapping between key/value pairs with one
              pair per line and using a character delimiter to separate keys and values.
            enum:
            - map
            type: string
        title: AsciiMapSerialize
        type: object
      - additionalProperties: true
        description: Schema for serializer component ['obj'] subtype.
        properties:
          seritype:
            default: default
            description: Serialize 3D structures using Obj format.
            enum:
            - obj
            type: string
        title: ObjSerialize
        type: object
      - additionalProperties: true
        description: Schema for serializer component ['pickle'] subtype.
        properties:
          seritype:
            default: default
            description: Serialize any Python object using a Python pickle.
            enum:
            - pickle
            type: string
        title: PickleSerialize
        type: object
      - additionalProperties: true
        description: Schema for serializer component ['yaml'] subtype.
        properties:
          default_flow_style:
            default: false
            description: If True, nested collections will be serialized in the block
              style. If False, they will always be serialized in the flow style. See
              `PyYAML Documentation <https://pyyaml.org/wiki/PyYAMLDocumentation>`_.
            type: boolean
          encoding:
            default: utf-8
            description: Encoding that should be used to serialize the object. Defaults
              to 'utf-8'.
            type: string
          indent:
            default: "\t"
            description: String or number of spaces that should be used to indent
              each level within the seiralized structure. Defaults to '\t'.
            type:
            - string
            - int
          seritype:
            default: default
            description: Serializes Python objects using the YAML standard.
            enum:
            - yaml
            type: string
        title: YAMLSerialize
        type: object
      - additionalProperties: true
        description: Schema for serializer component ['wofost'] subtype.
        properties:
          delimiter:
            default: ' = '
            description: Delimiter that should be used to separate name/value pairs
              in the map. Defaults to \t.
            type: string
          seritype:
            default: default
            description: Serialization of mapping between keys and scalar or array
              values as used in the WOFOST parameter files.
            enum:
            - wofost
            type: string
        title: WOFOSTParamSerialize
        type: object
    description: Schema for serializer components.
    title: serializer
  transform:
    allOf:
    - additionalProperties: false
      dependencies:
        driver:
        - args
      description: Base schema for all subtypes of transform components.
      properties:
        field_names:
          items:
            type: string
          type: array
        filter:
          $ref: '#/definitions/filter'
        function:
          description: The handle for a callable Python object (e.g. function) that
            should be used to transform messages or a string of the form "<function
            file>:<function name>" identifying a function where "<function file>"
            is the module or Python file containing the function and "<function name>"
            is the name of the function. The function should take the message as input
            and return the transformed message.
          type: function
        initial_state:
          description: Dictionary of initial state variables that should be set when
            the transform is created.
          type: object
        map:
          additionalProperties:
            type: string
          description: A mapping from original field name to new field names.
          type: object
        original_datatype:
          description: Datatype associated with expected messages. Defaults to None.
          type: schema
        original_order:
          description: The original order of fields that should be used for selecting
            from lists/tuples.
          items:
            type: string
          type: array
        selected:
          description: A list of fields that should be selected.
          items:
            type: string
          type: array
        single_as_scalar:
          description: If True and only a single field is selected, the transformed
            messages will be scalars rather than arrays with single elements. Defaults
            to False.
          type: boolean
        statement:
          description: Python statement in terms of the message as represented by
            the string "%x%" that should evaluate to the transformed message. The
            statement should only use a limited set of builtins and the math library
            (See yggdrasil.tools.safe_eval). If more complex relationships are required,
            use the FunctionTransform class.
          type: string
        transformtype:
          enum:
          - array
          - direct
          - filter
          - function
          - iterate
          - map_fields
          - pandas
          - select_fields
          - statement
      title: transform_base
      type: object
    - anyOf:
      - additionalProperties: true
        description: Schema for transform component ['array'] subtype.
        properties:
          field_names:
            items:
              type: string
            type: array
          transformtype:
            enum:
            - array
        title: ArrayTransform
        type: object
      - additionalProperties: true
        description: Schema for transform component ['pandas'] subtype.
        properties:
          field_names:
            items:
              type: string
            type: array
          transformtype:
            enum:
            - pandas
        title: PandasTransform
        type: object
      - additionalProperties: true
        description: Schema for transform component ['select_fields'] subtype.
        properties:
          original_order:
            description: The original order of fields that should be used for selecting
              from lists/tuples.
            items:
              type: string
            type: array
          selected:
            description: A list of fields that should be selected.
            items:
              type: string
            type: array
          single_as_scalar:
            description: If True and only a single field is selected, the transformed
              messages will be scalars rather than arrays with single elements. Defaults
              to False.
            type: boolean
          transformtype:
            enum:
            - select_fields
        required:
        - selected
        title: SelectFieldsTransform
        type: object
      - additionalProperties: true
        description: Schema for transform component ['iterate'] subtype.
        properties:
          transformtype:
            enum:
            - iterate
        title: IterateTransform
        type: object
      - additionalProperties: true
        description: Schema for transform component ['function'] subtype.
        properties:
          function:
            description: The handle for a callable Python object (e.g. function) that
              should be used to transform messages or a string of the form "<function
              file>:<function name>" identifying a function where "<function file>"
              is the module or Python file containing the function and "<function
              name>" is the name of the function. The function should take the message
              as input and return the transformed message.
            type: function
          transformtype:
            enum:
            - function
        required:
        - function
        title: FunctionTransform
        type: object
      - additionalProperties: true
        description: Schema for transform component ['statement'] subtype.
        properties:
          statement:
            description: Python statement in terms of the message as represented by
              the string "%x%" that should evaluate to the transformed message. The
              statement should only use a limited set of builtins and the math library
              (See yggdrasil.tools.safe_eval). If more complex relationships are required,
              use the FunctionTransform class.
            type: string
          transformtype:
            enum:
            - statement
        required:
        - statement
        title: StatementTransform
        type: object
      - additionalProperties: true
        description: Schema for transform component ['direct'] subtype.
        properties:
          transformtype:
            enum:
            - direct
        title: DirectTransform
        type: object
      - additionalProperties: true
        description: Schema for transform component ['map_fields'] subtype.
        properties:
          map:
            additionalProperties:
              type: string
            description: A mapping from original field name to new field names.
            type: object
          transformtype:
            enum:
            - map_fields
        required:
        - map
        title: MapFieldsTransform
        type: object
      - additionalProperties: true
        description: Schema for transform component ['filter'] subtype.
        properties:
          filter:
            $ref: '#/definitions/filter'
          transformtype:
            enum:
            - filter
        required:
        - filter
        title: FilterTransform
        type: object
    description: Schema for transform components.
    title: transform
description: Schema for yggdrasil YAML input files.
properties:
  models:
    items:
      $ref: '#/definitions/model'
    minItems: 1
    type: array
  connections:
    items:
      $ref: '#/definitions/connection'
    type: array
required:
- models
title: YAML Schema
type: object
